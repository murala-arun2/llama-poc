{
    "org.springframework.security.access.AccessDecisionManager": {
        "type": "interface",
        "class_name": "AccessDecisionManager",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "configAttributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.authentication.InsufficientAuthenticationException",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.AccessDecisionVoter": {
        "type": "interface",
        "class_name": "AccessDecisionVoter",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "vote",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.access.S"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.AccessDeniedException": {
        "type": "class",
        "class_name": "AccessDeniedException",
        "class_type": "class",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": "org.springframework.security.access.RuntimeException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AccessDeniedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AccessDeniedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.access.AfterInvocationProvider": {
        "type": "interface",
        "class_name": "AfterInvocationProvider",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.intercept.AfterInvocationProviderManager",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.AuthorizationServiceException": {
        "type": "class",
        "class_name": "AuthorizationServiceException",
        "class_type": "class",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": "org.springframework.security.access.AccessDeniedException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.access.ConfigAttribute": {
        "type": "interface",
        "class_name": "ConfigAttribute",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttribute",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "org.springframework.security.access.intercept.RunAsManager"
        ]
    },
    "org.springframework.security.access.PermissionCacheOptimizer": {
        "type": "interface",
        "class_name": "PermissionCacheOptimizer",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "cachePermissionsFor",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "a",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "objects",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.PermissionEvaluator": {
        "type": "interface",
        "class_name": "PermissionEvaluator",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "targetDomainObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "targetId",
                        "param_type": "java.io.Serializable"
                    },
                    {
                        "param_name": "targetType",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.SecurityConfig": {
        "type": "class",
        "class_name": "SecurityConfig",
        "class_type": "class",
        "package": "org.springframework.security.access",
        "implementz": [
            "org.springframework.security.access.ConfigAttribute"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "attrib",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityConfig",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "config",
                            "\"You must provide a configuration attribute\""
                        ],
                        "usage": "Assert.hasText(config,\"You must provide a configuration attribute\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attrib"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "attrib",
                        "target_method_name": "equals",
                        "target_params": [
                            "attr"
                        ],
                        "usage": "this.attrib.equals(attr.getAttribute())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attrib"
                    },
                    {
                        "target_type": null,
                        "target_name": "attr",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attr.getAttribute()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttribute",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attrib"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "attrib",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.attrib.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attrib"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attrib"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createListFromCommaDelimitedString",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "access",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "commaDelimitedListToStringArray",
                        "target_params": [
                            "access"
                        ],
                        "usage": "StringUtils.commaDelimitedListToStringArray(access)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createList",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attributeNames",
                            "\"You must supply an array of attribute names\""
                        ],
                        "usage": "Assert.notNull(attributeNames,\"You must supply an array of attribute names\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "attributeNames.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "add",
                        "target_params": [
                            "newSecurityConfig"
                        ],
                        "usage": "attributes.add(newSecurityConfig(attribute.trim()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "trim",
                        "target_params": [],
                        "usage": "attribute.trim()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.util.ArrayList",
            "java.util.List",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.access.SecurityMetadataSource": {
        "type": "interface",
        "class_name": "SecurityMetadataSource",
        "class_type": "interface",
        "package": "org.springframework.security.access",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.access.intercept.AbstractSecurityInterceptor"
        ]
    },
    "org.springframework.security.access.annotation.AnnotationMetadataExtractor": {
        "type": "interface",
        "class_name": "AnnotationMetadataExtractor",
        "class_type": "interface",
        "package": "org.springframework.security.access.annotation",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "extractAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "securityAnnotation",
                        "param_type": "org.springframework.security.access.annotation.A"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute"
        ]
    },
    "org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource": {
        "type": "class",
        "class_name": "Jsr250MethodSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.annotation",
        "implementz": [],
        "extendz": "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource",
        "fields": [
            {
                "type": "field",
                "field_name": "defaultRolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setDefaultRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaultRolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getAnnotations",
                        "target_params": [],
                        "usage": "clazz.getAnnotations()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "getAnnotations",
                        "target_params": [
                            "method"
                        ],
                        "usage": "AnnotationUtils.getAnnotations(method)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "processAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "annotations",
                        "param_type": "org.springframework.security.access.annotation.Annotation[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "annotations.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "add",
                        "target_params": [
                            "Jsr250SecurityConfig"
                        ],
                        "usage": "attributes.add(Jsr250SecurityConfig.DENY_ALL_ATTRIBUTE)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "add",
                        "target_params": [
                            "Jsr250SecurityConfig"
                        ],
                        "usage": "attributes.add(Jsr250SecurityConfig.PERMIT_ALL_ATTRIBUTE)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ra",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "ra.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "add",
                        "target_params": [
                            "newJsr250SecurityConfig"
                        ],
                        "usage": "attributes.add(newJsr250SecurityConfig(defaultedAllowed))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRoleWithDefaultPrefix",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "defaultRolePrefix",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "this.defaultRolePrefix.length()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "defaultRolePrefix"
                        ],
                        "usage": "role.startsWith(this.defaultRolePrefix)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "jakarta.annotation.security.DenyAll",
            "jakarta.annotation.security.PermitAll",
            "jakarta.annotation.security.RolesAllowed",
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource"
        ]
    },
    "org.springframework.security.access.annotation.Jsr250SecurityConfig": {
        "type": "class",
        "class_name": "Jsr250SecurityConfig",
        "class_type": "class",
        "package": "org.springframework.security.access.annotation",
        "implementz": [],
        "extendz": "org.springframework.security.access.SecurityConfig",
        "fields": [
            {
                "type": "field",
                "field_name": "PERMIT_ALL_ATTRIBUTE",
                "field_type": "org.springframework.security.access.annotation.Jsr250SecurityConfig",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DENY_ALL_ATTRIBUTE",
                "field_type": "org.springframework.security.access.annotation.Jsr250SecurityConfig",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "Jsr250SecurityConfig",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "PermitAll.class.getName()",
            "DenyAll.class.getName()"
        ],
        "imports": [
            "jakarta.annotation.security.DenyAll",
            "jakarta.annotation.security.PermitAll",
            "org.springframework.security.access.SecurityConfig",
            "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor"
        ]
    },
    "org.springframework.security.access.annotation.Jsr250Voter": {
        "type": "class",
        "class_name": "Jsr250Voter",
        "class_type": "class",
        "package": "org.springframework.security.access.annotation",
        "implementz": [
            "org.springframework.security.access.AccessDecisionVoter"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "configAttribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "vote",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "definition",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute().equals(authority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource": {
        "type": "class",
        "class_name": "SecuredAnnotationSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.annotation",
        "implementz": [],
        "extendz": "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource",
        "fields": [
            {
                "type": "field",
                "field_name": "annotationExtractor",
                "field_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "annotationType",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecuredAnnotationSecurityMetadataSource",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "SecuredAnnotationSecurityMetadataSource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "annotationMetadataExtractor",
                        "param_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "annotationMetadataExtractor",
                            "\"annotationMetadataExtractor cannot be null\""
                        ],
                        "usage": "Assert.notNull(annotationMetadataExtractor,\"annotationMetadataExtractor cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationExtractor"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationType"
                    },
                    {
                        "target_type": "org.springframework.core.GenericTypeResolver",
                        "target_name": "GenericTypeResolver",
                        "target_method_name": "resolveTypeArgument",
                        "target_params": [
                            "annotationExtractor"
                        ],
                        "usage": "GenericTypeResolver.resolveTypeArgument(this.annotationExtractor.getClass(),AnnotationMetadataExtractor.class)"
                    },
                    {
                        "target_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor",
                        "target_name": "annotationExtractor",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.annotationExtractor.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationExtractor"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "annotationType",
                            ""
                        ],
                        "usage": "Assert.notNull(this.annotationType,()->this.annotationExtractor.getClass().getName()+\" must supply a generic parameter for AnnotationMetadataExtractor\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationType"
                    },
                    {
                        "target_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor",
                        "target_name": "annotationExtractor",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.annotationExtractor.getClass().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor",
                        "target_name": "annotationExtractor",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.annotationExtractor.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationExtractor"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "clazz",
                            "annotationType"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(clazz,this.annotationType)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationType"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "method",
                            "annotationType"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(method,this.annotationType)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationType"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "processAnnotation",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "annotation",
                        "param_type": "java.lang.annotation.Annotation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.annotation.AnnotationMetadataExtractor",
                        "target_name": "annotationExtractor",
                        "target_method_name": "extractAttributes",
                        "target_params": [
                            "annotation"
                        ],
                        "usage": "this.annotationExtractor.extractAttributes(annotation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationExtractor"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "org.springframework.core.GenericTypeResolver",
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.SecurityConfig",
            "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.annotation.SecuredAnnotationMetadataExtractor": {
        "type": "class",
        "class_name": "SecuredAnnotationMetadataExtractor",
        "class_type": "class",
        "package": "org.springframework.security.access.annotation",
        "implementz": [
            "org.springframework.security.access.annotation.AnnotationMetadataExtractor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "extractAttributes",
                "return_type": "org.springframework.security.access.annotation.Collection",
                "formal_params": [
                    {
                        "param_name": "secured",
                        "param_type": "org.springframework.security.access.annotation.Secured"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.annotation.Secured",
                        "target_name": "secured",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "secured.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "attributeTokens.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "add",
                        "target_params": [
                            "newSecurityConfig"
                        ],
                        "usage": "attributes.add(newSecurityConfig(token))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.event.AbstractAuthorizationEvent": {
        "type": "class",
        "class_name": "AbstractAuthorizationEvent",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractAuthorizationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.context.ApplicationEvent"
        ]
    },
    "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent": {
        "type": "class",
        "class_name": "AuthenticationCredentialsNotFoundEvent",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [],
        "extendz": "org.springframework.security.access.event.AbstractAuthorizationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "credentialsNotFoundException",
                "field_type": "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "configAttribs",
                "field_type": "java.util.Collection",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationCredentialsNotFoundEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "credentialsNotFoundException",
                        "param_type": "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "attributes!=null&&credentialsNotFoundException!=null",
                            "\"All parameters are required and cannot be null\""
                        ],
                        "usage": "Assert.isTrue(attributes!=null&&credentialsNotFoundException!=null,\"All parameters are required and cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttribs"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsNotFoundException"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttribs"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentialsNotFoundException",
                "return_type": "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsNotFoundException"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.event.AuthorizationFailureEvent": {
        "type": "class",
        "class_name": "AuthorizationFailureEvent",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [],
        "extendz": "org.springframework.security.access.event.AbstractAuthorizationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "accessDeniedException",
                "field_type": "org.springframework.security.access.AccessDeniedException",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "configAttributes",
                "field_type": "java.util.Collection",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationFailureEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "accessDeniedException",
                        "param_type": "org.springframework.security.access.AccessDeniedException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "attributes!=null&&authentication!=null&&accessDeniedException!=null",
                            "\"All parameters are required and cannot be null\""
                        ],
                        "usage": "Assert.isTrue(attributes!=null&&authentication!=null&&accessDeniedException!=null,\"All parameters are required and cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttributes"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDeniedException"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAccessDeniedException",
                "return_type": "org.springframework.security.access.AccessDeniedException",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDeniedException"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttributes"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.event.AuthorizedEvent": {
        "type": "class",
        "class_name": "AuthorizedEvent",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [],
        "extendz": "org.springframework.security.access.event.AbstractAuthorizationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "configAttributes",
                "field_type": "java.util.Collection",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "attributes!=null&&authentication!=null",
                            "\"All parameters are required and cannot be null\""
                        ],
                        "usage": "Assert.isTrue(attributes!=null&&authentication!=null,\"All parameters are required and cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttributes"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configAttributes"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.event.LoggerListener": {
        "type": "class",
        "class_name": "LoggerListener",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [
            "org.springframework.context.ApplicationListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "onApplicationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.access.event.AbstractAuthorizationEvent"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "onAuthenticationCredentialsNotFoundEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authEvent",
                        "param_type": "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.warn(LogMessage.format(\"Security interception failed due to: %s; secure object: %s; configuration attributes: %s\",authEvent.getCredentialsNotFoundException(),authEvent.getSource(),authEvent.getConfigAttributes()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Security interception failed due to: %s; secure object: %s; configuration attributes: %s\"",
                            "authEvent"
                        ],
                        "usage": "LogMessage.format(\"Security interception failed due to: %s; secure object: %s; configuration attributes: %s\",authEvent.getCredentialsNotFoundException(),authEvent.getSource(),authEvent.getConfigAttributes())"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getCredentialsNotFoundException",
                        "target_params": [],
                        "usage": "authEvent.getCredentialsNotFoundException()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "authEvent.getSource()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getConfigAttributes",
                        "target_params": [],
                        "usage": "authEvent.getConfigAttributes()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onPublicInvocationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.access.event.PublicInvocationEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "info",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.info(LogMessage.format(\"Security interception not required for public secure object: %s\",event.getSource()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Security interception not required for public secure object: %s\"",
                            "event"
                        ],
                        "usage": "LogMessage.format(\"Security interception not required for public secure object: %s\",event.getSource())"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.PublicInvocationEvent",
                        "target_name": "event",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "event.getSource()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onAuthorizedEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authEvent",
                        "param_type": "org.springframework.security.access.event.AuthorizedEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "info",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.info(LogMessage.format(\"Security authorized for authenticated principal: %s; secure object: %s; configuration attributes: %s\",authEvent.getAuthentication(),authEvent.getSource(),authEvent.getConfigAttributes()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Security authorized for authenticated principal: %s; secure object: %s; configuration attributes: %s\"",
                            "authEvent"
                        ],
                        "usage": "LogMessage.format(\"Security authorized for authenticated principal: %s; secure object: %s; configuration attributes: %s\",authEvent.getAuthentication(),authEvent.getSource(),authEvent.getConfigAttributes())"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizedEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "authEvent.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizedEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "authEvent.getSource()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizedEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getConfigAttributes",
                        "target_params": [],
                        "usage": "authEvent.getConfigAttributes()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onAuthorizationFailureEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authEvent",
                        "param_type": "org.springframework.security.access.event.AuthorizationFailureEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.warn(LogMessage.format(\"Security authorization failed due to: %s; authenticated principal: %s; secure object: %s; configuration attributes: %s\",authEvent.getAccessDeniedException(),authEvent.getAuthentication(),authEvent.getSource(),authEvent.getConfigAttributes()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Security authorization failed due to: %s; authenticated principal: %s; secure object: %s; configuration attributes: %s\"",
                            "authEvent"
                        ],
                        "usage": "LogMessage.format(\"Security authorization failed due to: %s; authenticated principal: %s; secure object: %s; configuration attributes: %s\",authEvent.getAccessDeniedException(),authEvent.getAuthentication(),authEvent.getSource(),authEvent.getConfigAttributes())"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizationFailureEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getAccessDeniedException",
                        "target_params": [],
                        "usage": "authEvent.getAccessDeniedException()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizationFailureEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "authEvent.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizationFailureEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "authEvent.getSource()"
                    },
                    {
                        "target_type": "org.springframework.security.access.event.AuthorizationFailureEvent",
                        "target_name": "authEvent",
                        "target_method_name": "getConfigAttributes",
                        "target_params": [],
                        "usage": "authEvent.getConfigAttributes()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(LoggerListener.class)"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.ApplicationListener",
            "org.springframework.core.log.LogMessage"
        ]
    },
    "org.springframework.security.access.event.PublicInvocationEvent": {
        "type": "class",
        "class_name": "PublicInvocationEvent",
        "class_type": "class",
        "package": "org.springframework.security.access.event",
        "implementz": [],
        "extendz": "org.springframework.security.access.event.AbstractAuthorizationEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PublicInvocationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.authorization.event.AuthorizationGrantedEvent"
        ]
    },
    "org.springframework.security.access.expression.AbstractSecurityExpressionHandler": {
        "type": "class",
        "class_name": "AbstractSecurityExpressionHandler",
        "class_type": "class",
        "package": "org.springframework.security.access.expression",
        "implementz": [
            "org.springframework.security.access.expression.SecurityExpressionHandler"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "expressionParser",
                "field_type": "org.springframework.expression.ExpressionParser",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "beanResolver",
                "field_type": "org.springframework.expression.BeanResolver",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "roleHierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "permissionEvaluator",
                "field_type": "org.springframework.security.access.PermissionEvaluator",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getExpressionParser",
                "return_type": "org.springframework.expression.ExpressionParser",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionParser"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionParser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionParser",
                        "param_type": "org.springframework.expression.ExpressionParser"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionParser",
                            "\"expressionParser cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionParser,\"expressionParser cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionParser"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEvaluationContext",
                "return_type": "org.springframework.expression.EvaluationContext",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.access.expression.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "ctx",
                        "target_method_name": "setBeanResolver",
                        "target_params": [
                            "beanResolver"
                        ],
                        "usage": "ctx.setBeanResolver(this.beanResolver)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanResolver"
                    },
                    {
                        "target_type": null,
                        "target_name": "ctx",
                        "target_method_name": "setRootObject",
                        "target_params": [
                            "root"
                        ],
                        "usage": "ctx.setRootObject(root)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEvaluationContextInternal",
                "return_type": "org.springframework.expression.spel.support.StandardEvaluationContext",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.access.expression.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createSecurityExpressionRoot",
                "return_type": "org.springframework.security.access.expression.SecurityExpressionOperations",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.access.expression.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getRoleHierarchy",
                "return_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRoleHierarchy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPermissionEvaluator",
                "return_type": "org.springframework.security.access.PermissionEvaluator",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionEvaluator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPermissionEvaluator",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "permissionEvaluator",
                        "param_type": "org.springframework.security.access.PermissionEvaluator"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionEvaluator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getBeanResolver",
                "return_type": "org.springframework.expression.BeanResolver",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "applicationContext",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.context.ApplicationContext",
            "org.springframework.context.ApplicationContextAware",
            "org.springframework.context.expression.BeanFactoryResolver",
            "org.springframework.expression.BeanResolver",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.ExpressionParser",
            "org.springframework.expression.spel.standard.SpelExpressionParser",
            "org.springframework.expression.spel.support.StandardEvaluationContext",
            "org.springframework.security.access.PermissionEvaluator",
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.expression.DenyAllPermissionEvaluator": {
        "type": "class",
        "class_name": "DenyAllPermissionEvaluator",
        "class_type": "class",
        "package": "org.springframework.security.access.expression",
        "implementz": [
            "org.springframework.security.access.PermissionEvaluator"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.warn(LogMessage.format(\"Denying user %s permission '%s' on object %s\",authentication.getName(),permission,target))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Denying user %s permission '%s' on object %s\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Denying user %s permission '%s' on object %s\",authentication.getName(),permission,target)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "targetId",
                        "param_type": "java.io.Serializable"
                    },
                    {
                        "param_name": "targetType",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.warn(LogMessage.format(\"Denying user %s permission '%s' on object with Id %s\",authentication.getName(),permission,targetId))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Denying user %s permission '%s' on object with Id %s\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Denying user %s permission '%s' on object with Id %s\",authentication.getName(),permission,targetId)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.io.Serializable",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.PermissionEvaluator",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.expression.ExpressionUtils": {
        "type": "class",
        "class_name": "ExpressionUtils",
        "class_type": "class",
        "package": "org.springframework.security.access.expression",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "evaluateAsBoolean",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getValue",
                        "target_params": [
                            "ctx",
                            "Boolean"
                        ],
                        "usage": "expr.getValue(ctx,Boolean.class)"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "expr.getExpressionString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.EvaluationException",
            "org.springframework.expression.Expression"
        ]
    },
    "org.springframework.security.access.expression.SecurityExpressionHandler": {
        "type": "interface",
        "class_name": "SecurityExpressionHandler",
        "class_type": "interface",
        "package": "org.springframework.security.access.expression",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getExpressionParser",
                "return_type": "org.springframework.expression.ExpressionParser",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createEvaluationContext",
                "return_type": "org.springframework.expression.EvaluationContext",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.access.expression.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createEvaluationContext",
                "return_type": "org.springframework.expression.EvaluationContext",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.access.expression.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "authentication.get()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.ExpressionParser",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.expression.SecurityExpressionOperations": {
        "type": "interface",
        "class_name": "SecurityExpressionOperations",
        "class_type": "interface",
        "package": "org.springframework.security.access.expression",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAuthority",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authority",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAnyAuthority",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasRole",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAnyRole",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "permitAll",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "denyAll",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAnonymous",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isRememberMe",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isFullyAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "targetId",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "targetType",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.expression.SecurityExpressionRoot": {
        "type": "class",
        "class_name": "SecurityExpressionRoot",
        "class_type": "class",
        "package": "org.springframework.security.access.expression",
        "implementz": [
            "org.springframework.security.access.expression.SecurityExpressionOperations"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "trustResolver",
                "field_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "roleHierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "roles",
                "field_type": "java.util.Set",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultRolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "permitAll",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "denyAll",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "permissionEvaluator",
                "field_type": "org.springframework.security.access.PermissionEvaluator",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "read",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "write",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "create",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delete",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "admin",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityExpressionRoot",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "SecurityExpressionRoot",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": "org.springframework.util.function.SingletonSupplier",
                        "target_name": "SingletonSupplier",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "SingletonSupplier.of(()->{Authenticationvalue=authentication.get();Assert.notNull(value,\"Authentication object cannot be null\");returnvalue;})"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "authentication.get()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "value",
                            "\"Authentication object cannot be null\""
                        ],
                        "usage": "Assert.notNull(value,\"Authentication object cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAuthority",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authority",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAnyAuthority",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasRole",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAnyRole",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAnyAuthorityName",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "prefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "roleSet",
                        "target_method_name": "contains",
                        "target_params": [
                            "defaultedRole"
                        ],
                        "usage": "roleSet.contains(defaultedRole)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.authentication.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "permitAll",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "denyAll",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAnonymous",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "trustResolver",
                        "target_method_name": "isAnonymous",
                        "target_params": [
                            "getAuthentication"
                        ],
                        "usage": "this.trustResolver.isAnonymous(getAuthentication())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "trustResolver",
                        "target_method_name": "isAuthenticated",
                        "target_params": [
                            "getAuthentication"
                        ],
                        "usage": "this.trustResolver.isAuthenticated(getAuthentication())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isRememberMe",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "trustResolver",
                        "target_method_name": "isRememberMe",
                        "target_params": [
                            "getAuthentication"
                        ],
                        "usage": "this.trustResolver.isRememberMe(getAuthentication())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isFullyAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "trustResolver",
                        "target_method_name": "isFullyAuthenticated",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.trustResolver.isFullyAuthenticated(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionRoot",
                        "target_name": "this",
                        "target_method_name": "getAuthentication",
                        "target_params": [
                            ".getPrincipal"
                        ],
                        "usage": "getAuthentication().getPrincipal()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTrustResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "trustResolver",
                        "param_type": "org.springframework.security.authentication.AuthenticationTrustResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRoleHierarchy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDefaultRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaultRolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthoritySet",
                "return_type": "java.util.Set",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roles"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionRoot",
                        "target_name": "this",
                        "target_method_name": "getAuthentication",
                        "target_params": [
                            ".getAuthorities"
                        ],
                        "usage": "getAuthentication().getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    },
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                        "target_name": "roleHierarchy",
                        "target_method_name": "getReachableGrantedAuthorities",
                        "target_params": [
                            "userAuthorities"
                        ],
                        "usage": "this.roleHierarchy.getReachableGrantedAuthorities(userAuthorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roles"
                    },
                    {
                        "target_type": "org.springframework.security.core.authority.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "authorityListToSet",
                        "target_params": [
                            "userAuthorities"
                        ],
                        "usage": "AuthorityUtils.authorityListToSet(userAuthorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roles"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.PermissionEvaluator",
                        "target_name": "permissionEvaluator",
                        "target_method_name": "hasPermission",
                        "target_params": [
                            "getAuthentication"
                        ],
                        "usage": "this.permissionEvaluator.hasPermission(getAuthentication(),target,permission)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionEvaluator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasPermission",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "targetId",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "targetType",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "permission",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.PermissionEvaluator",
                        "target_name": "permissionEvaluator",
                        "target_method_name": "hasPermission",
                        "target_params": [
                            "getAuthentication"
                        ],
                        "usage": "this.permissionEvaluator.hasPermission(getAuthentication(),(Serializable)targetId,targetType,permission)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionEvaluator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPermissionEvaluator",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "permissionEvaluator",
                        "param_type": "org.springframework.security.access.PermissionEvaluator"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionEvaluator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRoleWithDefaultPrefix",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "defaultRolePrefix",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "defaultRolePrefix",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "defaultRolePrefix.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "defaultRolePrefix"
                        ],
                        "usage": "role.startsWith(defaultRolePrefix)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.util.Collection",
            "java.util.Set",
            "java.util.function.Supplier",
            "org.springframework.security.access.PermissionEvaluator",
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
            "org.springframework.security.authentication.AuthenticationTrustResolver",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.util.Assert",
            "org.springframework.util.function.SingletonSupplier"
        ]
    },
    "org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute": {
        "type": "class",
        "class_name": "AbstractExpressionBasedMethodConfigAttribute",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.ConfigAttribute"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "filterExpression",
                "field_type": "org.springframework.expression.Expression",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizeExpression",
                "field_type": "org.springframework.expression.Expression",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractExpressionBasedMethodConfigAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "filterExpression!=null||authorizeExpression!=null",
                            "\"Filter and authorization Expressions cannot both be null\""
                        ],
                        "usage": "Assert.isTrue(filterExpression!=null||authorizeExpression!=null,\"Filter and authorization Expressions cannot both be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterExpression"
                    },
                    {
                        "target_type": null,
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "filterExpression"
                        ],
                        "usage": "parser.parseExpression(filterExpression)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizeExpression"
                    },
                    {
                        "target_type": null,
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "authorizeExpression"
                        ],
                        "usage": "parser.parseExpression(authorizeExpression)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AbstractExpressionBasedMethodConfigAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "filterExpression!=null||authorizeExpression!=null",
                            "\"Filter and authorization Expressions cannot both be null\""
                        ],
                        "usage": "Assert.isTrue(filterExpression!=null||authorizeExpression!=null,\"Filter and authorization Expressions cannot both be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterExpression"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizeExpression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getFilterExpression",
                "return_type": "org.springframework.expression.Expression",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterExpression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorizeExpression",
                "return_type": "org.springframework.expression.Expression",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizeExpression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttribute",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.expression.ParseException",
            "org.springframework.expression.spel.standard.SpelExpressionParser",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler": {
        "type": "class",
        "class_name": "DefaultMethodSecurityExpressionHandler",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
        ],
        "extendz": "org.springframework.security.access.expression.AbstractSecurityExpressionHandler",
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "trustResolver",
                "field_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "parameterNameDiscoverer",
                "field_type": "org.springframework.core.ParameterNameDiscoverer",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "permissionCacheOptimizer",
                "field_type": "org.springframework.security.access.PermissionCacheOptimizer",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultRolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultMethodSecurityExpressionHandler",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createEvaluationContextInternal",
                "return_type": "org.springframework.expression.spel.support.StandardEvaluationContext",
                "formal_params": [
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createEvaluationContext",
                "return_type": "org.springframework.expression.EvaluationContext",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "ctx",
                        "target_method_name": "setBeanResolver",
                        "target_params": [
                            "getBeanResolver"
                        ],
                        "usage": "ctx.setBeanResolver(getBeanResolver())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createSecurityExpressionRoot",
                "return_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createSecurityExpressionRoot",
                "return_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "root",
                        "target_method_name": "setThis",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "root.setThis(invocation.getThis())"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "invocation.getThis()"
                    },
                    {
                        "target_type": null,
                        "target_name": "root",
                        "target_method_name": "setPermissionEvaluator",
                        "target_params": [
                            "getPermissionEvaluator"
                        ],
                        "usage": "root.setPermissionEvaluator(getPermissionEvaluator())"
                    },
                    {
                        "target_type": null,
                        "target_name": "root",
                        "target_method_name": "setTrustResolver",
                        "target_params": [
                            "getTrustResolver"
                        ],
                        "usage": "root.setTrustResolver(getTrustResolver())"
                    },
                    {
                        "target_type": null,
                        "target_name": "root",
                        "target_method_name": "setRoleHierarchy",
                        "target_params": [
                            "getRoleHierarchy"
                        ],
                        "usage": "root.setRoleHierarchy(getRoleHierarchy())"
                    },
                    {
                        "target_type": null,
                        "target_name": "root",
                        "target_method_name": "setDefaultRolePrefix",
                        "target_params": [
                            "getDefaultRolePrefix"
                        ],
                        "usage": "root.setDefaultRolePrefix(getDefaultRolePrefix())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filter",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject().getValue()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Filtering with expression: %s\",filterExpression.getExpressionString()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Filtering with expression: %s\"",
                            "filterExpression"
                        ],
                        "usage": "LogMessage.format(\"Filtering with expression: %s\",filterExpression.getExpressionString())"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "filterExpression",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "filterExpression.getExpressionString()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass().isArray()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterCollection",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "rootObject",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Filtering collection with %s elements\",filterTarget.size()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Filtering collection with %s elements\"",
                            "filterTarget"
                        ],
                        "usage": "LogMessage.format(\"Filtering collection with %s elements\",filterTarget.size())"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "filterTarget",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "filterTarget.size()"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "filterTarget",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "filterTarget.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionCacheOptimizer"
                    },
                    {
                        "target_type": "org.springframework.security.access.PermissionCacheOptimizer",
                        "target_name": "permissionCacheOptimizer",
                        "target_method_name": "cachePermissionsFor",
                        "target_params": [
                            "rootObject"
                        ],
                        "usage": "this.permissionCacheOptimizer.cachePermissionsFor(rootObject.getAuthentication(),filterTarget)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionCacheOptimizer"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "rootObject.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "add",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "retain.add(filterObject)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Retaining elements: %s\",retain))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Retaining elements: %s\"",
                            "retain"
                        ],
                        "usage": "LogMessage.format(\"Retaining elements: %s\",retain)"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "filterTarget",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "filterTarget.clear()"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "filterTarget",
                        "target_method_name": "addAll",
                        "target_params": [
                            "retain"
                        ],
                        "usage": "filterTarget.addAll(retain)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Collection threw exception: %s. Will return a new instance instead of mutating its state.\",readonly.getMessage()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Collection threw exception: %s"
                        ],
                        "usage": "LogMessage.format(\"Collection threw exception: %s. Will return a new instance instead of mutating its state.\",readonly.getMessage())"
                    },
                    {
                        "target_type": null,
                        "target_name": "readonly",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "readonly.getMessage()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterArray",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "org.springframework.security.access.expression.method.Object[]"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "rootObject",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.length"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Filtering array with %s elements\",filterTarget.length))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Filtering array with %s elements\"",
                            "filterTarget"
                        ],
                        "usage": "LogMessage.format(\"Filtering array with %s elements\",filterTarget.length)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.length"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionCacheOptimizer"
                    },
                    {
                        "target_type": "org.springframework.security.access.PermissionCacheOptimizer",
                        "target_name": "permissionCacheOptimizer",
                        "target_method_name": "cachePermissionsFor",
                        "target_params": [
                            "rootObject"
                        ],
                        "usage": "this.permissionCacheOptimizer.cachePermissionsFor(rootObject.getAuthentication(),Arrays.asList(filterTarget))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionCacheOptimizer"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "rootObject.getAuthentication()"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Arrays.asList(filterTarget)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "add",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "retain.add(filterObject)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Retaining elements: %s\",retain))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Retaining elements: %s\"",
                            "retain"
                        ],
                        "usage": "LogMessage.format(\"Retaining elements: %s\",retain)"
                    },
                    {
                        "target_type": "java.lang.reflect.Array",
                        "target_name": "Array",
                        "target_method_name": "newInstance",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Array.newInstance(filterTarget.getClass().getComponentType(),retain.size())"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.Object[]",
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass().getComponentType()"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.Object[]",
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "retain.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "retain.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "get",
                        "target_params": [
                            "i"
                        ],
                        "usage": "retain.get(i)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterMap",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.util.Map"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "rootObject",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "filterTarget",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "filterTarget.size()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Filtering map with %s elements\",filterTarget.size()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Filtering map with %s elements\"",
                            "filterTarget"
                        ],
                        "usage": "LogMessage.format(\"Filtering map with %s elements\",filterTarget.size())"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "filterTarget",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "filterTarget.size()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "filterTarget",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "filterTarget.entrySet()"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "put",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "retain.put(filterObject.getKey(),filterObject.getValue())"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterObject",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "filterObject.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterObject",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "filterObject.getValue()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Retaining elements: %s\",retain))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Retaining elements: %s\"",
                            "retain"
                        ],
                        "usage": "LogMessage.format(\"Retaining elements: %s\",retain)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "filterTarget",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "filterTarget.clear()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "filterTarget",
                        "target_method_name": "putAll",
                        "target_params": [
                            "retain"
                        ],
                        "usage": "filterTarget.putAll(retain)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Map threw exception: %s. Will return a new instance instead of mutating its state.\",readonly.getMessage()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Map threw exception: %s"
                        ],
                        "usage": "LogMessage.format(\"Map threw exception: %s. Will return a new instance instead of mutating its state.\",readonly.getMessage())"
                    },
                    {
                        "target_type": null,
                        "target_name": "readonly",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "readonly.getMessage()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterStream",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.util.stream.Stream"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "rootObject",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.stream.Stream",
                        "target_name": "filterTarget",
                        "target_method_name": "filter",
                        "target_params": [],
                        "usage": "filterTarget.filter((filterObject)->{rootObject.setFilterObject(filterObject);returnExpressionUtils.evaluateAsBoolean(filterExpression,ctx);}).onClose(filterTarget::close)"
                    },
                    {
                        "target_type": "java.util.stream.Stream",
                        "target_name": "filterTarget",
                        "target_method_name": "filter",
                        "target_params": [],
                        "usage": "filterTarget.filter((filterObject)->{rootObject.setFilterObject(filterObject);returnExpressionUtils.evaluateAsBoolean(filterExpression,ctx);})"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTrustResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "trustResolver",
                        "param_type": "org.springframework.security.authentication.AuthenticationTrustResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "trustResolver",
                            "\"trustResolver cannot be null\""
                        ],
                        "usage": "Assert.notNull(trustResolver,\"trustResolver cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getTrustResolver",
                "return_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setParameterNameDiscoverer",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "parameterNameDiscoverer",
                        "param_type": "org.springframework.core.ParameterNameDiscoverer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parameterNameDiscoverer"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getParameterNameDiscoverer",
                "return_type": "org.springframework.core.ParameterNameDiscoverer",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parameterNameDiscoverer"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPermissionCacheOptimizer",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "permissionCacheOptimizer",
                        "param_type": "org.springframework.security.access.PermissionCacheOptimizer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.permissionCacheOptimizer"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setReturnObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "returnObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((MethodSecurityExpressionOperations)ctx.getRootObject().getValue()).setReturnObject(returnObject)"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject().getValue()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDefaultRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaultRolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDefaultRolePrefix",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultRolePrefix"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.lang.reflect.Array",
            "java.util.ArrayList",
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.LinkedHashMap",
            "java.util.List",
            "java.util.Map",
            "java.util.function.Supplier",
            "java.util.stream.Stream",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.core.log.LogMessage",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.expression.spel.support.StandardEvaluationContext",
            "org.springframework.security.access.PermissionCacheOptimizer",
            "org.springframework.security.access.expression.AbstractSecurityExpressionHandler",
            "org.springframework.security.access.expression.ExpressionUtils",
            "org.springframework.security.authentication.AuthenticationTrustResolver",
            "org.springframework.security.authentication.AuthenticationTrustResolverImpl",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory": {
        "type": "class",
        "class_name": "ExpressionBasedAnnotationAttributeFactory",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "parserLock",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "parser",
                "field_type": "org.springframework.expression.ExpressionParser",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handler",
                "field_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionBasedAnnotationAttributeFactory",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "handler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createPreInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PreInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "preFilterAttribute",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "filterObject",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "preAuthorizeAttribute",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.ExpressionParser",
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "preAuthorizeAttribute"
                        ],
                        "usage": "parser.parseExpression(preAuthorizeAttribute)"
                    },
                    {
                        "target_type": "org.springframework.expression.ExpressionParser",
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "\"permitAll\""
                        ],
                        "usage": "parser.parseExpression(\"permitAll\")"
                    },
                    {
                        "target_type": "org.springframework.expression.ExpressionParser",
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "preFilterAttribute"
                        ],
                        "usage": "parser.parseExpression(preFilterAttribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "ex.getExpressionString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createPostInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PostInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "postFilterAttribute",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "postAuthorizeAttribute",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.ExpressionParser",
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "postAuthorizeAttribute"
                        ],
                        "usage": "parser.parseExpression(postAuthorizeAttribute)"
                    },
                    {
                        "target_type": "org.springframework.expression.ExpressionParser",
                        "target_name": "parser",
                        "target_method_name": "parseExpression",
                        "target_params": [
                            "postFilterAttribute"
                        ],
                        "usage": "parser.parseExpression(postFilterAttribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "ex.getExpressionString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getParser",
                "return_type": "org.springframework.expression.ExpressionParser",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parser"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parser"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parserLock"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parser"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "handler",
                        "target_method_name": "getExpressionParser",
                        "target_params": [],
                        "usage": "this.handler.getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parser"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.expression.ExpressionParser",
            "org.springframework.expression.ParseException",
            "org.springframework.security.access.prepost.PostInvocationAttribute",
            "org.springframework.security.access.prepost.PreInvocationAttribute",
            "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory"
        ]
    },
    "org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice": {
        "type": "class",
        "class_name": "ExpressionBasedPostInvocationAdvice",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expressionHandler",
                "field_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionBasedPostInvocationAdvice",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "after",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "postAttr",
                        "param_type": "org.springframework.security.access.prepost.PostInvocationAttribute"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.expressionHandler.createEvaluationContext(authentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": "pia",
                        "target_method_name": "getFilterExpression",
                        "target_params": [],
                        "usage": "pia.getFilterExpression()"
                    },
                    {
                        "target_type": null,
                        "target_name": "pia",
                        "target_method_name": "getAuthorizeExpression",
                        "target_params": [],
                        "usage": "pia.getAuthorizeExpression()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Applying PostFilter expression %s\",postFilter))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Applying PostFilter expression %s\"",
                            "postFilter"
                        ],
                        "usage": "LogMessage.format(\"Applying PostFilter expression %s\",postFilter)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "filter",
                        "target_params": [
                            "returnedObject",
                            "postFilter",
                            "ctx"
                        ],
                        "usage": "this.expressionHandler.filter(returnedObject,postFilter,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Return object is null",
                            " filtering will be skipped\""
                        ],
                        "usage": "this.logger.debug(\"Return object is null, filtering will be skipped\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "setReturnObject",
                        "target_params": [
                            "returnedObject",
                            "ctx"
                        ],
                        "usage": "this.expressionHandler.setReturnObject(returnedObject,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "postAuthorize",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(postAuthorize,ctx)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"PostAuthorize expression rejected access\""
                        ],
                        "usage": "this.logger.debug(\"PostAuthorize expression rejected access\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.log.LogMessage",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.expression.ExpressionUtils",
            "org.springframework.security.access.prepost.PostInvocationAttribute",
            "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice": {
        "type": "class",
        "class_name": "ExpressionBasedPreInvocationAdvice",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "expressionHandler",
                "field_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "before",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "org.springframework.security.access.prepost.PreInvocationAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.expressionHandler.createEvaluationContext(authentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAttr",
                        "target_method_name": "getFilterExpression",
                        "target_params": [],
                        "usage": "preAttr.getFilterExpression()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAttr",
                        "target_method_name": "getAuthorizeExpression",
                        "target_params": [],
                        "usage": "preAttr.getAuthorizeExpression()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAttr",
                        "target_method_name": "getFilterTarget",
                        "target_params": [],
                        "usage": "preAttr.getFilterTarget()"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "filter",
                        "target_params": [
                            "filterTarget",
                            "preFilter",
                            "ctx"
                        ],
                        "usage": "this.expressionHandler.filter(filterTarget,preFilter,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "preAuthorize",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(preAuthorize,ctx)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findFilterTarget",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTargetName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "filterTargetName",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "filterTargetName.length()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "lookupVariable",
                        "target_params": [
                            "filterTargetName"
                        ],
                        "usage": "ctx.lookupVariable(filterTargetName)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "filterTarget",
                            ""
                        ],
                        "usage": "Assert.notNull(filterTarget,()->\"Filter target was null, or no argument with name \"+filterTargetName+\" found in method\")"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments().length"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments()"
                    },
                    {
                        "target_type": null,
                        "target_name": "arg",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "arg.getClass().isArray()"
                    },
                    {
                        "target_type": null,
                        "target_name": "arg",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "arg.getClass()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "filterTarget",
                            ""
                        ],
                        "usage": "Assert.notNull(filterTarget,()->\"A PreFilter expression was set but the method argument type\"+arg.getClass()+\" is not filterable\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "arg",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "arg.getClass()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments().length"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!filterTarget"
                        ],
                        "usage": "Assert.isTrue(!filterTarget.getClass().isArray(),\"Pre-filtering on array types is not supported. Using a Collection will solve this problem\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass().isArray()"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.expression.ExpressionUtils",
            "org.springframework.security.access.prepost.PreInvocationAttribute",
            "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.expression.method.MethodSecurityEvaluationContext": {
        "type": "class",
        "class_name": "MethodSecurityEvaluationContext",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [],
        "extendz": "org.springframework.context.expression.MethodBasedEvaluationContext",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodSecurityEvaluationContext",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "MethodSecurityEvaluationContext",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "parameterNameDiscoverer",
                        "param_type": "org.springframework.core.ParameterNameDiscoverer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "mi.getThis()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "MethodSecurityEvaluationContext",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "root",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "parameterNameDiscoverer",
                        "param_type": "org.springframework.core.ParameterNameDiscoverer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSpecificMethod",
                "return_type": "java.lang.reflect.Method",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aop.support.AopUtils",
                        "target_name": "AopUtils",
                        "target_method_name": "getMostSpecificMethod",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "AopUtils.getMostSpecificMethod(mi.getMethod(),AopProxyUtils.ultimateTargetClass(mi.getThis()))"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": "org.springframework.aop.framework.AopProxyUtils",
                        "target_name": "AopProxyUtils",
                        "target_method_name": "ultimateTargetClass",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "AopProxyUtils.ultimateTargetClass(mi.getThis())"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "mi.getThis()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.framework.AopProxyUtils",
            "org.springframework.aop.support.AopUtils",
            "org.springframework.context.expression.MethodBasedEvaluationContext",
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer"
        ]
    },
    "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler": {
        "type": "interface",
        "class_name": "MethodSecurityExpressionHandler",
        "class_type": "interface",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "filter",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setReturnObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "returnObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.expression.SecurityExpressionHandler"
        ]
    },
    "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations": {
        "type": "interface",
        "class_name": "MethodSecurityExpressionOperations",
        "class_type": "interface",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "setFilterObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "filterObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getFilterObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setReturnObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "returnObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getReturnObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getThis",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.access.expression.SecurityExpressionOperations"
        ]
    },
    "org.springframework.security.access.expression.method.MethodSecurityExpressionRoot": {
        "type": "class",
        "class_name": "MethodSecurityExpressionRoot",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations"
        ],
        "extendz": "org.springframework.security.access.expression.SecurityExpressionRoot",
        "fields": [
            {
                "type": "field",
                "field_name": "filterObject",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "returnObject",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "target",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodSecurityExpressionRoot",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "a",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "MethodSecurityExpressionRoot",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setFilterObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "filterObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getFilterObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setReturnObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "returnObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.returnObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getReturnObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.returnObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setThis",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.target"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getThis",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.target"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.access.expression.SecurityExpressionRoot",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.expression.method.PostInvocationExpressionAttribute": {
        "type": "class",
        "class_name": "PostInvocationExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.prepost.PostInvocationAttribute"
        ],
        "extendz": "org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostInvocationExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "PostInvocationExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"[authorize: '\""
                        ],
                        "usage": "sb.append(\"[authorize: '\").append((authorize!=null)?authorize.getExpressionString():\"null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"[authorize: '\""
                        ],
                        "usage": "sb.append(\"[authorize: '\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authorize",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "authorize.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filter: '\""
                        ],
                        "usage": "sb.append(\"', filter: '\").append((filter!=null)?filter.getExpressionString():\"null\").append(\"']\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filter: '\""
                        ],
                        "usage": "sb.append(\"', filter: '\").append((filter!=null)?filter.getExpressionString():\"null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filter: '\""
                        ],
                        "usage": "sb.append(\"', filter: '\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "filter",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "filter.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.expression.ParseException",
            "org.springframework.security.access.prepost.PostInvocationAttribute"
        ]
    },
    "org.springframework.security.access.expression.method.PreInvocationExpressionAttribute": {
        "type": "class",
        "class_name": "PreInvocationExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.access.expression.method",
        "implementz": [
            "org.springframework.security.access.prepost.PreInvocationAttribute"
        ],
        "extendz": "org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute",
        "fields": [
            {
                "type": "field",
                "field_name": "filterTarget",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreInvocationExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "PreInvocationExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorizeExpression",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getFilterTarget",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"[authorize: '\""
                        ],
                        "usage": "sb.append(\"[authorize: '\").append((authorize!=null)?authorize.getExpressionString():\"null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"[authorize: '\""
                        ],
                        "usage": "sb.append(\"[authorize: '\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authorize",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "authorize.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filter: '\""
                        ],
                        "usage": "sb.append(\"', filter: '\").append((filter!=null)?filter.getExpressionString():\"null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filter: '\""
                        ],
                        "usage": "sb.append(\"', filter: '\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "filter",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "filter.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filterTarget: '\""
                        ],
                        "usage": "sb.append(\"', filterTarget: '\").append(this.filterTarget).append(\"']\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filterTarget: '\""
                        ],
                        "usage": "sb.append(\"', filterTarget: '\").append(this.filterTarget)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"'",
                            " filterTarget: '\""
                        ],
                        "usage": "sb.append(\"', filterTarget: '\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.expression.ParseException",
            "org.springframework.security.access.prepost.PreInvocationAttribute"
        ]
    },
    "org.springframework.security.access.hierarchicalroles.CycleInRoleHierarchyException": {
        "type": "class",
        "class_name": "CycleInRoleHierarchyException",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [],
        "extendz": "org.springframework.security.access.hierarchicalroles.RuntimeException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CycleInRoleHierarchyException",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.hierarchicalroles.NullRoleHierarchy": {
        "type": "class",
        "class_name": "NullRoleHierarchy",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getReachableGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.access.hierarchicalroles.RoleHierarchy": {
        "type": "interface",
        "class_name": "RoleHierarchy",
        "class_type": "interface",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getReachableGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper": {
        "type": "class",
        "class_name": "RoleHierarchyAuthoritiesMapper",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [
            "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "roleHierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RoleHierarchyAuthoritiesMapper",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mapAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                        "target_name": "roleHierarchy",
                        "target_method_name": "getReachableGrantedAuthorities",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "this.roleHierarchy.getReachableGrantedAuthorities(authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper"
        ]
    },
    "org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl": {
        "type": "class",
        "class_name": "RoleHierarchyImpl",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rolesReachableInOneOrMoreStepsMap",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RoleHierarchyImpl",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "RoleHierarchyImpl",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "hierarchy",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolesReachableInOneOrMoreStepsMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "fromHierarchy",
                "return_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl",
                "formal_params": [
                    {
                        "param_name": "hierarchy",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "withDefaultRolePrefix",
                "return_type": "org.springframework.security.access.hierarchicalroles.Builder",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "withRolePrefix",
                "return_type": "org.springframework.security.access.hierarchicalroles.Builder",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "rolePrefix",
                            "\"rolePrefix must not be null\""
                        ],
                        "usage": "Assert.notNull(rolePrefix,\"rolePrefix must not be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setHierarchy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "roleHierarchyStringRepresentation",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"setHierarchy() - The following role hierarchy was set: %s\",roleHierarchyStringRepresentation))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"setHierarchy"
                        ],
                        "usage": "LogMessage.format(\"setHierarchy() - The following role hierarchy was set: %s\",roleHierarchyStringRepresentation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolesReachableInOneOrMoreStepsMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getReachableGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "authorities",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "authorities.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "reachableRoles",
                        "target_method_name": "add",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "reachableRoles.add(authority)"
                    },
                    {
                        "target_type": null,
                        "target_name": "processedNames",
                        "target_method_name": "add",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "processedNames.add(authority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "reachableRoles",
                        "target_method_name": "add",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "reachableRoles.add(authority)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "rolesReachableInOneOrMoreStepsMap",
                        "target_method_name": "get",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "this.rolesReachableInOneOrMoreStepsMap.get(authority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolesReachableInOneOrMoreStepsMap"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "processedNames",
                        "target_method_name": "add",
                        "target_params": [
                            "role"
                        ],
                        "usage": "processedNames.add(role.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "role",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "role.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "reachableRoles",
                        "target_method_name": "add",
                        "target_params": [
                            "role"
                        ],
                        "usage": "reachableRoles.add(role)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"getReachableGrantedAuthorities() - From the roles %s one can reach %s in zero or more steps.\",authorities,reachableRoles))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"getReachableGrantedAuthorities"
                        ],
                        "usage": "LogMessage.format(\"getReachableGrantedAuthorities() - From the roles %s one can reach %s in zero or more steps.\",authorities,reachableRoles)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "buildRolesReachableInOneStepMap",
                "return_type": "java.util.Map",
                "formal_params": [
                    {
                        "param_name": "hierarchy",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "hierarchy",
                        "target_method_name": "split",
                        "target_params": [
                            "\"\\n\""
                        ],
                        "usage": "hierarchy.split(\"\\n\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "line",
                        "target_method_name": "trim",
                        "target_params": [],
                        "usage": "line.trim().split(\"\\\\s+>\\\\s+\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "line",
                        "target_method_name": "trim",
                        "target_params": [],
                        "usage": "line.trim()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesReachableInOneStepMap",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "higherRole"
                        ],
                        "usage": "rolesReachableInOneStepMap.containsKey(higherRole)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesReachableInOneStepMap",
                        "target_method_name": "put",
                        "target_params": [
                            "higherRole",
                            "rolesReachableInOneStepSet"
                        ],
                        "usage": "rolesReachableInOneStepMap.put(higherRole,rolesReachableInOneStepSet)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesReachableInOneStepMap",
                        "target_method_name": "get",
                        "target_params": [
                            "higherRole"
                        ],
                        "usage": "rolesReachableInOneStepMap.get(higherRole)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesReachableInOneStepSet",
                        "target_method_name": "add",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "rolesReachableInOneStepSet.add(lowerRole)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"buildRolesReachableInOneStepMap() - From role %s one can reach role %s in one step.\",higherRole,lowerRole))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"buildRolesReachableInOneStepMap"
                        ],
                        "usage": "LogMessage.format(\"buildRolesReachableInOneStepMap() - From role %s one can reach role %s in one step.\",higherRole,lowerRole)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "buildRolesReachableInOneOrMoreStepsMap",
                "return_type": "java.util.Map",
                "formal_params": [
                    {
                        "param_name": "hierarchy",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "hierarchy",
                        "target_method_name": "keySet",
                        "target_params": [],
                        "usage": "hierarchy.keySet()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "hierarchy",
                        "target_method_name": "get",
                        "target_params": [
                            "roleName"
                        ],
                        "usage": "hierarchy.get(roleName)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesToVisitSet",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "rolesToVisitSet.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesToVisitSet",
                        "target_method_name": "iterator",
                        "target_params": [],
                        "usage": "rolesToVisitSet.iterator().next()"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesToVisitSet",
                        "target_method_name": "iterator",
                        "target_params": [],
                        "usage": "rolesToVisitSet.iterator()"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesToVisitSet",
                        "target_method_name": "remove",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "rolesToVisitSet.remove(lowerRole)"
                    },
                    {
                        "target_type": null,
                        "target_name": "visitedRolesSet",
                        "target_method_name": "add",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "visitedRolesSet.add(lowerRole)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "hierarchy",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "hierarchy.containsKey(lowerRole.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "lowerRole",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "lowerRole.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "roleName",
                        "target_method_name": "equals",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "roleName.equals(lowerRole.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "lowerRole",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "lowerRole.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": "rolesToVisitSet",
                        "target_method_name": "addAll",
                        "target_params": [
                            "hierarchy"
                        ],
                        "usage": "rolesToVisitSet.addAll(hierarchy.get(lowerRole.getAuthority()))"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "hierarchy",
                        "target_method_name": "get",
                        "target_params": [
                            "lowerRole"
                        ],
                        "usage": "hierarchy.get(lowerRole.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "lowerRole",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "lowerRole.getAuthority()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "rolesReachableInOneOrMoreStepsMap",
                        "target_method_name": "put",
                        "target_params": [
                            "roleName",
                            "visitedRolesSet"
                        ],
                        "usage": "rolesReachableInOneOrMoreStepsMap.put(roleName,visitedRolesSet)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"buildRolesReachableInOneOrMoreStepsMap() - From role %s one can reach %s in one or more steps.\",roleName,visitedRolesSet))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"buildRolesReachableInOneOrMoreStepsMap"
                        ],
                        "usage": "LogMessage.format(\"buildRolesReachableInOneOrMoreStepsMap() - From role %s one can reach %s in one or more steps.\",roleName,visitedRolesSet)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(RoleHierarchyImpl.class)"
        ],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.HashMap",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.Map",
            "java.util.Set",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.hierarchicalroles.Builder": {
        "type": "class",
        "class_name": "Builder",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "rolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "hierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "Builder",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "role",
                "return_type": "org.springframework.security.access.hierarchicalroles.ImpliedRoles",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "role",
                            "\"role must not be empty\""
                        ],
                        "usage": "Assert.hasText(role,\"role must not be empty\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "build",
                "return_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addHierarchy",
                "return_type": "org.springframework.security.access.hierarchicalroles.Builder",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.Map",
                        "target_name": "hierarchy",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "rolePrefix"
                        ],
                        "usage": "this.hierarchy.computeIfAbsent(this.rolePrefix.concat(role),(r)->newHashSet<>())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hierarchy"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "rolePrefix",
                        "target_method_name": "concat",
                        "target_params": [
                            "role"
                        ],
                        "usage": "this.rolePrefix.concat(role)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    },
                    {
                        "target_type": null,
                        "target_name": "withPrefix",
                        "target_method_name": "add",
                        "target_params": [
                            "newSimpleGrantedAuthority"
                        ],
                        "usage": "withPrefix.add(newSimpleGrantedAuthority(this.rolePrefix.concat(impliedRole)))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "rolePrefix",
                        "target_method_name": "concat",
                        "target_params": [
                            "impliedRole"
                        ],
                        "usage": "this.rolePrefix.concat(impliedRole)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.hierarchicalroles.ImpliedRoles": {
        "type": "class",
        "class_name": "ImpliedRoles",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "role",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ImpliedRoles",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "implies",
                "return_type": "org.springframework.security.access.hierarchicalroles.Builder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "impliedRoles",
                            "\"at least one implied role must be provided\""
                        ],
                        "usage": "Assert.notEmpty(impliedRoles,\"at least one implied role must be provided\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "impliedRoles",
                            "\"implied role name"
                        ],
                        "usage": "Assert.noNullElements(impliedRoles,\"implied role name(s) cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.Builder",
                        "target_name": "Builder",
                        "target_method_name": "addHierarchy",
                        "target_params": [
                            "role",
                            "impliedRoles"
                        ],
                        "usage": "Builder.this.addHierarchy(this.role,impliedRoles)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils": {
        "type": "class",
        "class_name": "RoleHierarchyUtils",
        "class_type": "class",
        "package": "org.springframework.security.access.hierarchicalroles",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RoleHierarchyUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "roleHierarchyFromMap",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "roleHierarchyMap",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "roleHierarchyMap",
                            "\"roleHierarchyMap cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(roleHierarchyMap,\"roleHierarchyMap cannot be empty\")"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "roleHierarchyMap",
                        "target_method_name": "forEach",
                        "target_params": [],
                        "usage": "roleHierarchyMap.forEach((role,impliedRoles)->{Assert.hasLength(role,\"role name must be supplied\");Assert.notEmpty(impliedRoles,\"implied role name(s) cannot be empty\");for(StringimpliedRole:impliedRoles){writer.println(role+\" > \"+impliedRole);}})"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "role",
                            "\"role name must be supplied\""
                        ],
                        "usage": "Assert.hasLength(role,\"role name must be supplied\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "impliedRoles",
                            "\"implied role name"
                        ],
                        "usage": "Assert.notEmpty(impliedRoles,\"implied role name(s) cannot be empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "writer",
                        "target_method_name": "println",
                        "target_params": [
                            "role+\" > \"+impliedRole"
                        ],
                        "usage": "writer.println(role+\" > \"+impliedRole)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "result.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.PrintWriter",
            "java.io.StringWriter",
            "java.util.List",
            "java.util.Map",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.intercept.AbstractSecurityInterceptor": {
        "type": "class",
        "class_name": "AbstractSecurityInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.InitializingBean,ApplicationEventPublisherAware,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "eventPublisher",
                "field_type": "org.springframework.context.ApplicationEventPublisher",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "accessDecisionManager",
                "field_type": "org.springframework.security.access.AccessDecisionManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "afterInvocationManager",
                "field_type": "org.springframework.security.access.intercept.AfterInvocationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationManager",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "runAsManager",
                "field_type": "org.springframework.security.access.intercept.RunAsManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "alwaysReauthenticate",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rejectPublicInvocations",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "validateConfigAttributes",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "publishAuthorizationSuccess",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "getSecureObjectClass"
                        ],
                        "usage": "Assert.notNull(getSecureObjectClass(),\"Subclass must provide a non-null response to getSecureObjectClass()\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messages",
                            "\"A message source must be set\""
                        ],
                        "usage": "Assert.notNull(this.messages,\"A message source must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationManager",
                            "\"An AuthenticationManager is required\""
                        ],
                        "usage": "Assert.notNull(this.authenticationManager,\"An AuthenticationManager is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "accessDecisionManager",
                            "\"An AccessDecisionManager is required\""
                        ],
                        "usage": "Assert.notNull(this.accessDecisionManager,\"An AccessDecisionManager is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "runAsManager",
                            "\"A RunAsManager is required\""
                        ],
                        "usage": "Assert.notNull(this.runAsManager,\"A RunAsManager is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "obtainSecurityMetadataSource"
                        ],
                        "usage": "Assert.notNull(this.obtainSecurityMetadataSource(),\"An SecurityMetadataSource is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.obtainSecurityMetadataSource()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "obtainSecurityMetadataSource"
                        ],
                        "usage": "Assert.isTrue(this.obtainSecurityMetadataSource().supports(getSecureObjectClass()),()->\"SecurityMetadataSource does not support secure object class: \"+getSecureObjectClass())"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "this",
                        "target_method_name": "obtainSecurityMetadataSource",
                        "target_params": [
                            ".supports"
                        ],
                        "usage": "this.obtainSecurityMetadataSource().supports(getSecureObjectClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.obtainSecurityMetadataSource()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "runAsManager"
                        ],
                        "usage": "Assert.isTrue(this.runAsManager.supports(getSecureObjectClass()),()->\"RunAsManager does not support secure object class: \"+getSecureObjectClass())"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.RunAsManager",
                        "target_name": "runAsManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "getSecureObjectClass"
                        ],
                        "usage": "this.runAsManager.supports(getSecureObjectClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "accessDecisionManager"
                        ],
                        "usage": "Assert.isTrue(this.accessDecisionManager.supports(getSecureObjectClass()),()->\"AccessDecisionManager does not support secure object class: \"+getSecureObjectClass())"
                    },
                    {
                        "target_type": "org.springframework.security.access.AccessDecisionManager",
                        "target_name": "accessDecisionManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "getSecureObjectClass"
                        ],
                        "usage": "this.accessDecisionManager.supports(getSecureObjectClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "afterInvocationManager"
                        ],
                        "usage": "Assert.isTrue(this.afterInvocationManager.supports(getSecureObjectClass()),()->\"AfterInvocationManager does not support secure object class: \"+getSecureObjectClass())"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AfterInvocationManager",
                        "target_name": "afterInvocationManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "getSecureObjectClass"
                        ],
                        "usage": "this.afterInvocationManager.supports(getSecureObjectClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.validateConfigAttributes"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "this",
                        "target_method_name": "obtainSecurityMetadataSource",
                        "target_params": [
                            ".getAllConfigAttributes"
                        ],
                        "usage": "this.obtainSecurityMetadataSource().getAllConfigAttributes()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.obtainSecurityMetadataSource()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "\"Could not validate configuration attributes as the \"+\"SecurityMetadataSource did not return any attributes from getAllConfigAttributes"
                        ],
                        "usage": "this.logger.warn(\"Could not validate configuration attributes as the \"+\"SecurityMetadataSource did not return any attributes from getAllConfigAttributes()\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "validateAttributeDefs",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "attributeDefs",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.intercept.RunAsManager",
                        "target_name": "runAsManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "attr"
                        ],
                        "usage": "this.runAsManager.supports(attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    },
                    {
                        "target_type": "org.springframework.security.access.AccessDecisionManager",
                        "target_name": "accessDecisionManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "attr"
                        ],
                        "usage": "this.accessDecisionManager.supports(attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AfterInvocationManager",
                        "target_name": "afterInvocationManager",
                        "target_method_name": "supports",
                        "target_params": [
                            "attr"
                        ],
                        "usage": "this.afterInvocationManager.supports(attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "unsupportedAttrs",
                        "target_method_name": "add",
                        "target_params": [
                            "attr"
                        ],
                        "usage": "unsupportedAttrs.add(attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": "unsupportedAttrs",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "unsupportedAttrs.size()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "\"Did not validate configuration attributes since validateConfigurationAttributes is false\""
                        ],
                        "usage": "this.logger.trace(\"Did not validate configuration attributes since validateConfigurationAttributes is false\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "\"Validated configuration attributes\""
                        ],
                        "usage": "this.logger.trace(\"Validated configuration attributes\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "beforeInvocation",
                "return_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "object",
                            "\"Object was null\""
                        ],
                        "usage": "Assert.notNull(object,\"Object was null\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "this",
                        "target_method_name": "getSecureObjectClass",
                        "target_params": [
                            ".isAssignableFrom"
                        ],
                        "usage": "getSecureObjectClass().isAssignableFrom(object.getClass())"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass().getName()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "this",
                        "target_method_name": "obtainSecurityMetadataSource",
                        "target_params": [
                            ".getAttributes"
                        ],
                        "usage": "this.obtainSecurityMetadataSource().getAttributes(object)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.obtainSecurityMetadataSource()"
                    },
                    {
                        "target_type": "org.springframework.util.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "attributes"
                        ],
                        "usage": "CollectionUtils.isEmpty(attributes)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!rejectPublicInvocations",
                            ""
                        ],
                        "usage": "Assert.isTrue(!this.rejectPublicInvocations,()->\"Secure object invocation \"+object+\" was denied as public invocations are not allowed via this interceptor. \"+\"This indicates a configuration error because the \"+\"rejectPublicInvocations property is set to 'true'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rejectPublicInvocations"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Authorized public object %s\",object))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authorized public object %s\"",
                            "object"
                        ],
                        "usage": "LogMessage.format(\"Authorized public object %s\",object)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractSecurityInterceptor"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractSecurityInterceptor.authenticationNotFound\",\"An Authentication object was not found in the SecurityContext\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isTraceEnabled",
                        "target_params": [],
                        "usage": "this.logger.isTraceEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Authorizing %s with attributes %s\",object,attributes))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authorizing %s with attributes %s\"",
                            "object",
                            "attributes"
                        ],
                        "usage": "LogMessage.format(\"Authorizing %s with attributes %s\",object,attributes)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Authorized %s with attributes %s\",object,attributes))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authorized %s with attributes %s\"",
                            "object",
                            "attributes"
                        ],
                        "usage": "LogMessage.format(\"Authorized %s with attributes %s\",object,attributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.publishAuthorizationSuccess"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.RunAsManager",
                        "target_name": "runAsManager",
                        "target_method_name": "buildRunAs",
                        "target_params": [
                            "authenticated",
                            "object",
                            "attributes"
                        ],
                        "usage": "this.runAsManager.buildRunAs(authenticated,object,attributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "newCtx",
                        "target_method_name": "setAuthentication",
                        "target_params": [
                            "runAs"
                        ],
                        "usage": "newCtx.setAuthentication(runAs)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "newCtx"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(newCtx)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Switched to RunAs authentication %s\",runAs))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Switched to RunAs authentication %s\"",
                            "runAs"
                        ],
                        "usage": "LogMessage.format(\"Switched to RunAs authentication %s\",runAs)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "\"Did not switch RunAs authentication since RunAsManager returned null\""
                        ],
                        "usage": "this.logger.trace(\"Did not switch RunAs authentication since RunAsManager returned null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "attemptAuthorization",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "authenticated",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.AccessDecisionManager",
                        "target_name": "accessDecisionManager",
                        "target_method_name": "decide",
                        "target_params": [
                            "authenticated",
                            "object",
                            "attributes"
                        ],
                        "usage": "this.accessDecisionManager.decide(authenticated,object,attributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isTraceEnabled",
                        "target_params": [],
                        "usage": "this.logger.isTraceEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Failed to authorize %s with attributes %s using %s\",object,attributes,this.accessDecisionManager))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Failed to authorize %s with attributes %s using %s\"",
                            "object",
                            "attributes",
                            "accessDecisionManager"
                        ],
                        "usage": "LogMessage.format(\"Failed to authorize %s with attributes %s using %s\",object,attributes,this.accessDecisionManager)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Failed to authorize %s with attributes %s\",object,attributes))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Failed to authorize %s with attributes %s\"",
                            "object",
                            "attributes"
                        ],
                        "usage": "LogMessage.format(\"Failed to authorize %s with attributes %s\",object,attributes)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "finallyInvocation",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.access.intercept.InterceptorStatusToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "isContextHolderRefreshRequired",
                        "target_params": [],
                        "usage": "token.isContextHolderRefreshRequired()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "token"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(token.getSecurityContext())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Reverted to original authentication \"+token.getSecurityContext().getAuthentication()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Reverted to original authentication \"+token.getSecurityContext().getAuthentication())"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.access.intercept.InterceptorStatusToken"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AfterInvocationManager",
                        "target_name": "afterInvocationManager",
                        "target_method_name": "decide",
                        "target_params": [
                            "token"
                        ],
                        "usage": "this.afterInvocationManager.decide(token.getSecurityContext().getAuthentication(),token.getSecureObject(),token.getAttributes(),returnedObject)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecureObject",
                        "target_params": [],
                        "usage": "token.getSecureObject()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getAttributes",
                        "target_params": [],
                        "usage": "token.getAttributes()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecureObject",
                        "target_params": [],
                        "usage": "token.getSecureObject()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getAttributes",
                        "target_params": [],
                        "usage": "token.getAttributes()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.InterceptorStatusToken",
                        "target_name": "token",
                        "target_method_name": "getSecurityContext",
                        "target_params": [],
                        "usage": "token.getSecurityContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticateIfRequired",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "authentication",
                        "target_method_name": "isAuthenticated",
                        "target_params": [],
                        "usage": "authentication.isAuthenticated()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.alwaysReauthenticate"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isTraceEnabled",
                        "target_params": [],
                        "usage": "this.logger.isTraceEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Did not re-authenticate %s before authorizing\",authentication))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Did not re-authenticate %s before authorizing\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Did not re-authenticate %s before authorizing\",authentication)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "authenticationManager",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationManager.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Re-authenticated %s before authorizing\",authentication))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Re-authenticated %s before authorizing\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Re-authenticated %s before authorizing\",authentication)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthentication",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "context.setAuthentication(authentication)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "credentialsNotFound",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "reason",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "configAttribs",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAccessDecisionManager",
                "return_type": "org.springframework.security.access.AccessDecisionManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAfterInvocationManager",
                "return_type": "org.springframework.security.access.intercept.AfterInvocationManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationManager",
                "return_type": "org.springframework.security.authentication.AuthenticationManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRunAsManager",
                "return_type": "org.springframework.security.access.intercept.RunAsManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSecureObjectClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAlwaysReauthenticate",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.alwaysReauthenticate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isRejectPublicInvocations",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rejectPublicInvocations"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isValidateConfigAttributes",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.validateConfigAttributes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "obtainSecurityMetadataSource",
                "return_type": "org.springframework.security.access.SecurityMetadataSource",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAccessDecisionManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "accessDecisionManager",
                        "param_type": "org.springframework.security.access.AccessDecisionManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accessDecisionManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAfterInvocationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "afterInvocationManager",
                        "param_type": "org.springframework.security.access.intercept.AfterInvocationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.afterInvocationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAlwaysReauthenticate",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "alwaysReauthenticate",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.alwaysReauthenticate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "applicationEventPublisher",
                        "param_type": "org.springframework.context.ApplicationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "newManager",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPublishAuthorizationSuccess",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "publishAuthorizationSuccess",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.publishAuthorizationSuccess"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRejectPublicInvocations",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rejectPublicInvocations",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rejectPublicInvocations"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRunAsManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "runAsManager",
                        "param_type": "org.springframework.security.access.intercept.RunAsManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.runAsManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setValidateConfigAttributes",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "validateConfigAttributes",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.validateConfigAttributes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.context.ApplicationEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "event"
                        ],
                        "usage": "this.eventPublisher.publishEvent(event)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SpringSecurityMessageSource.getAccessor()",
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.util.Collection",
            "java.util.HashSet",
            "java.util.Set",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.ApplicationEvent",
            "org.springframework.context.ApplicationEventPublisher",
            "org.springframework.context.ApplicationEventPublisherAware",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDecisionManager",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.SecurityMetadataSource",
            "org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent",
            "org.springframework.security.access.event.AuthorizationFailureEvent",
            "org.springframework.security.access.event.AuthorizedEvent",
            "org.springframework.security.access.event.PublicInvocationEvent",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.authentication.AuthenticationServiceException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils"
        ]
    },
    "org.springframework.security.access.intercept.NoOpAuthenticationManager": {
        "type": "class",
        "class_name": "NoOpAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.AuthenticationManager"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.access.intercept.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.access.intercept.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.intercept.AfterInvocationManager": {
        "type": "interface",
        "class_name": "AfterInvocationManager",
        "class_type": "interface",
        "package": "org.springframework.security.access.intercept",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.intercept.AfterInvocationProviderManager": {
        "type": "class",
        "class_name": "AfterInvocationProviderManager",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.AfterInvocationManager,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "providers",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "decide",
                        "target_params": [
                            "authentication",
                            "object",
                            "config",
                            "result"
                        ],
                        "usage": "provider.decide(authentication,object,config,result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getProviders",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setProviders",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "newList",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "newList",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "newList.size()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isInstanceOf",
                        "target_params": [
                            "AfterInvocationProvider"
                        ],
                        "usage": "Assert.isInstanceOf(AfterInvocationProvider.class,currentObject,()->\"AfterInvocationProvider \"+currentObject.getClass().getName()+\" must implement AfterInvocationProvider\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentObject",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "currentObject.getClass().getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentObject",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "currentObject.getClass()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "providers",
                        "target_method_name": "add",
                        "target_params": [],
                        "usage": "this.providers.add((AfterInvocationProvider)currentObject)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "checkIfValidList",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "listToCheck",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!CollectionUtils"
                        ],
                        "usage": "Assert.isTrue(!CollectionUtils.isEmpty(listToCheck),\"A list of AfterInvocationProviders is required\")"
                    },
                    {
                        "target_type": "org.springframework.util.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "listToCheck"
                        ],
                        "usage": "CollectionUtils.isEmpty(listToCheck)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Evaluating %s against %s\",attribute,provider))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Evaluating %s against %s\"",
                            "attribute",
                            "provider"
                        ],
                        "usage": "LogMessage.format(\"Evaluating %s against %s\",attribute,provider)"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "supports",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "provider.supports(attribute)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "supports",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "provider.supports(clazz)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(AfterInvocationProviderManager.class)"
        ],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.AfterInvocationProvider",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils"
        ]
    },
    "org.springframework.security.access.intercept.InterceptorStatusToken": {
        "type": "class",
        "class_name": "InterceptorStatusToken",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "attr",
                "field_type": "java.util.Collection",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "secureObject",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "contextHolderRefreshRequired",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InterceptorStatusToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "contextHolderRefreshRequired",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "secureObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.contextHolderRefreshRequired"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attr"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.secureObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attr"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSecurityContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSecureObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.secureObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isContextHolderRefreshRequired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.contextHolderRefreshRequired"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.context.SecurityContext"
        ]
    },
    "org.springframework.security.access.intercept.MethodInvocationPrivilegeEvaluator": {
        "type": "class",
        "class_name": "MethodInvocationPrivilegeEvaluator",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.beans.factory.InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityInterceptor",
                "field_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityInterceptor",
                            "\"SecurityInterceptor required\""
                        ],
                        "usage": "Assert.notNull(this.securityInterceptor,\"SecurityInterceptor required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityInterceptor"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAllowed",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "invocation",
                            "\"MethodInvocation required\""
                        ],
                        "usage": "Assert.notNull(invocation,\"MethodInvocation required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "Assert.notNull(invocation.getMethod(),\"MethodInvocation must provide a non-null getMethod()\")"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "obtainSecurityMetadataSource",
                        "target_params": [],
                        "usage": "this.securityInterceptor.obtainSecurityMetadataSource().getAttributes(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "obtainSecurityMetadataSource",
                        "target_params": [],
                        "usage": "this.securityInterceptor.obtainSecurityMetadataSource()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityInterceptor"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "isRejectPublicInvocations",
                        "target_params": [],
                        "usage": "this.securityInterceptor.isRejectPublicInvocations()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityInterceptor"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities().isEmpty()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "getAccessDecisionManager",
                        "target_params": [],
                        "usage": "this.securityInterceptor.getAccessDecisionManager().decide(authentication,invocation,attrs)"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "getAccessDecisionManager",
                        "target_params": [],
                        "usage": "this.securityInterceptor.getAccessDecisionManager()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityInterceptor"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"%s denied for %s\",invocation,authentication),unauthorized)"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"%s denied for %s\"",
                            "invocation",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"%s denied for %s\",invocation,authentication)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityInterceptor",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityInterceptor",
                        "param_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityInterceptor",
                            "\"AbstractSecurityInterceptor cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityInterceptor,\"AbstractSecurityInterceptor cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "MethodInvocation"
                        ],
                        "usage": "Assert.isTrue(MethodInvocation.class.equals(securityInterceptor.getSecureObjectClass()),\"AbstractSecurityInterceptor does not support MethodInvocations\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "getSecureObjectClass",
                        "target_params": [],
                        "usage": "securityInterceptor.getSecureObjectClass()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityInterceptor"
                        ],
                        "usage": "Assert.notNull(securityInterceptor.getAccessDecisionManager(),\"AbstractSecurityInterceptor must provide a non-null AccessDecisionManager\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
                        "target_name": "securityInterceptor",
                        "target_method_name": "getAccessDecisionManager",
                        "target_params": [],
                        "usage": "securityInterceptor.getAccessDecisionManager()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityInterceptor"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(MethodInvocationPrivilegeEvaluator.class)"
        ],
        "imports": [
            "java.util.Collection",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.intercept.NullRunAsManager": {
        "type": "class",
        "class_name": "NullRunAsManager",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.RunAsManager"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "buildRunAs",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.intercept.RunAsImplAuthenticationProvider": {
        "type": "class",
        "class_name": "RunAsImplAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.InitializingBean,AuthenticationProvider,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "key",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "key",
                            "\"A Key is required and should match that configured for the RunAsManagerImpl\""
                        ],
                        "usage": "Assert.notNull(this.key,\"A Key is required and should match that configured for the RunAsManagerImpl\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "token",
                        "target_method_name": "getKeyHash",
                        "target_params": [],
                        "usage": "token.getKeyHash()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"RunAsImplAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"RunAsImplAuthenticationProvider.incorrectKey\",\"The presented RunAsUserToken does not contain the expected key\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setKey",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.intercept.RunAsManager": {
        "type": "interface",
        "class_name": "RunAsManager",
        "class_type": "interface",
        "package": "org.springframework.security.access.intercept",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "buildRunAs",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.intercept.RunAsManagerImpl": {
        "type": "class",
        "class_name": "RunAsManagerImpl",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [
            "org.springframework.security.access.intercept.RunAsManager,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "key",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "key",
                            "\"A Key is required and should match that configured for the RunAsImplAuthenticationProvider\""
                        ],
                        "usage": "Assert.notNull(this.key,\"A Key is required and should match that configured for the RunAsImplAuthenticationProvider\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "buildRunAs",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.supports(attribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthorities",
                        "target_method_name": "add",
                        "target_params": [
                            "extraAuthority"
                        ],
                        "usage": "newAuthorities.add(extraAuthority)"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthorities",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "newAuthorities.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthorities",
                        "target_method_name": "addAll",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "newAuthorities.addAll(authentication.getAuthorities())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "authentication.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRolePrefix",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setKey",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute().startsWith(\"RUN_AS_\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.intercept.RunAsUserToken": {
        "type": "class",
        "class_name": "RunAsUserToken",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "originalAuthentication",
                "field_type": "java.lang.Class",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "credentials",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "keyHash",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RunAsUserToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "originalAuthentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalAuthentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKeyHash",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getOriginalAuthentication",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalAuthentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "super.toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalAuthentication"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "originalAuthentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "this.originalAuthentication.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalAuthentication"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"; Original Class: \""
                        ],
                        "usage": "sb.append(\"; Original Class: \").append(className)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"; Original Class: \""
                        ],
                        "usage": "sb.append(\"; Original Class: \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.authentication.AbstractAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion"
        ]
    },
    "org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor": {
        "type": "class",
        "class_name": "MethodSecurityInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept.aopalliance",
        "implementz": [
            "org.aopalliance.intercept.MethodInterceptor"
        ],
        "extendz": "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
        "fields": [
            {
                "type": "field",
                "field_name": "securityMetadataSource",
                "field_type": "org.springframework.security.access.method.MethodSecurityMetadataSource",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getSecureObjectClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "beforeInvocation",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "super.beforeInvocation(mi)"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "finallyInvocation",
                        "target_params": [
                            "token"
                        ],
                        "usage": "super.finallyInvocation(token)"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "afterInvocation",
                        "target_params": [
                            "token",
                            "result"
                        ],
                        "usage": "super.afterInvocation(token,result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSecurityMetadataSource",
                "return_type": "org.springframework.security.access.method.MethodSecurityMetadataSource",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityMetadataSource"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "obtainSecurityMetadataSource",
                "return_type": "org.springframework.security.access.SecurityMetadataSource",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityMetadataSource"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityMetadataSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "newSource",
                        "param_type": "org.springframework.security.access.method.MethodSecurityMetadataSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityMetadataSource"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.security.access.SecurityMetadataSource",
            "org.springframework.security.access.intercept.AbstractSecurityInterceptor",
            "org.springframework.security.access.intercept.InterceptorStatusToken",
            "org.springframework.security.access.method.MethodSecurityMetadataSource"
        ]
    },
    "org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor": {
        "type": "class",
        "class_name": "MethodSecurityMetadataSourceAdvisor",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept.aopalliance",
        "implementz": [
            "org.springframework.beans.factory.BeanFactoryAware"
        ],
        "extendz": "org.springframework.aop.support.AbstractPointcutAdvisor",
        "fields": [
            {
                "type": "field",
                "field_name": "attributeSource",
                "field_type": "org.springframework.security.access.method.MethodSecurityMetadataSource",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "interceptor",
                "field_type": "org.aopalliance.intercept.MethodInterceptor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "beanFactory",
                "field_type": "org.springframework.beans.factory.BeanFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "adviceBeanName",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "metadataSourceBeanName",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "adviceMonitor",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodSecurityMetadataSourceAdvisor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "adviceBeanName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "attributeSource",
                        "param_type": "org.springframework.security.access.method.MethodSecurityMetadataSource"
                    },
                    {
                        "param_name": "attributeSourceBeanName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "adviceBeanName",
                            "\"The adviceBeanName cannot be null\""
                        ],
                        "usage": "Assert.notNull(adviceBeanName,\"The adviceBeanName cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attributeSource",
                            "\"The attributeSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(attributeSource,\"The attributeSource cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attributeSourceBeanName",
                            "\"The attributeSourceBeanName cannot be null\""
                        ],
                        "usage": "Assert.notNull(attributeSourceBeanName,\"The attributeSourceBeanName cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.adviceBeanName"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeSource"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.metadataSourceBeanName"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.adviceMonitor"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.interceptor"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "adviceBeanName",
                            "\"'adviceBeanName' must be set for use with bean factory lookup"
                        ],
                        "usage": "Assert.notNull(this.adviceBeanName,\"'adviceBeanName' must be set for use with bean factory lookup.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.adviceBeanName"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "beanFactory!=null",
                            "\"BeanFactory must be set to resolve 'adviceBeanName'\""
                        ],
                        "usage": "Assert.state(this.beanFactory!=null,\"BeanFactory must be set to resolve 'adviceBeanName'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.interceptor"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.BeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBean",
                        "target_params": [
                            "adviceBeanName",
                            "MethodInterceptor"
                        ],
                        "usage": "this.beanFactory.getBean(this.adviceBeanName,MethodInterceptor.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.adviceBeanName"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.interceptor"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setBeanFactory",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.BeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "readObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "ois",
                        "param_type": "java.io.ObjectInputStream"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.io.ObjectInputStream",
                        "target_name": "ois",
                        "target_method_name": "defaultReadObject",
                        "target_params": [],
                        "usage": "ois.defaultReadObject()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.adviceMonitor"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeSource"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.BeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBean",
                        "target_params": [
                            "metadataSourceBeanName",
                            "MethodSecurityMetadataSource"
                        ],
                        "usage": "this.beanFactory.getBean(this.metadataSourceBeanName,MethodSecurityMetadataSource.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.metadataSourceBeanName"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "java.io.ObjectInputStream",
            "java.io.Serializable",
            "java.lang.reflect.Method",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.springframework.aop.Pointcut",
            "org.springframework.aop.support.AbstractPointcutAdvisor",
            "org.springframework.aop.support.StaticMethodMatcherPointcut",
            "org.springframework.beans.BeansException",
            "org.springframework.beans.factory.BeanFactory",
            "org.springframework.beans.factory.BeanFactoryAware",
            "org.springframework.security.access.method.MethodSecurityMetadataSource",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils"
        ]
    },
    "org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourcePointcut": {
        "type": "class",
        "class_name": "MethodSecurityMetadataSourcePointcut",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept.aopalliance",
        "implementz": [
            "org.springframework.security.access.intercept.aopalliance.Serializable"
        ],
        "extendz": "org.springframework.security.access.intercept.aopalliance.StaticMethodMatcherPointcut",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "matches",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "m",
                        "param_type": "org.springframework.security.access.intercept.aopalliance.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.intercept.aopalliance.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "source"
                        ],
                        "usage": "CollectionUtils.isEmpty(source.getAttributes(m,targetClass))"
                    },
                    {
                        "target_type": null,
                        "target_name": "source",
                        "target_method_name": "getAttributes",
                        "target_params": [
                            "m",
                            "targetClass"
                        ],
                        "usage": "source.getAttributes(m,targetClass)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.intercept.aspectj.AspectJCallback": {
        "type": "interface",
        "class_name": "AspectJCallback",
        "class_type": "interface",
        "package": "org.springframework.security.access.intercept.aspectj",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "proceedWithObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor": {
        "type": "class",
        "class_name": "AspectJMethodSecurityInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept.aspectj",
        "implementz": [],
        "extendz": "org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "org.aspectj.lang.JoinPoint"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "invoke",
                        "target_params": [
                            "newMethodInvocationAdapter"
                        ],
                        "usage": "super.invoke(newMethodInvocationAdapter(jp))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "org.aspectj.lang.JoinPoint"
                    },
                    {
                        "param_name": "advisorProceed",
                        "param_type": "org.springframework.security.access.intercept.aspectj.AspectJCallback"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "beforeInvocation",
                        "target_params": [
                            "newMethodInvocationAdapter"
                        ],
                        "usage": "super.beforeInvocation(newMethodInvocationAdapter(jp))"
                    },
                    {
                        "target_type": "org.springframework.security.access.intercept.aspectj.AspectJCallback",
                        "target_name": "advisorProceed",
                        "target_method_name": "proceedWithObject",
                        "target_params": [],
                        "usage": "advisorProceed.proceedWithObject()"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "finallyInvocation",
                        "target_params": [
                            "token"
                        ],
                        "usage": "super.finallyInvocation(token)"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "afterInvocation",
                        "target_params": [
                            "token",
                            "result"
                        ],
                        "usage": "super.afterInvocation(token,result)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aspectj.lang.JoinPoint",
            "org.springframework.security.access.intercept.InterceptorStatusToken",
            "org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor"
        ]
    },
    "org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter": {
        "type": "class",
        "class_name": "MethodInvocationAdapter",
        "class_type": "class",
        "package": "org.springframework.security.access.intercept.aspectj",
        "implementz": [
            "org.aopalliance.intercept.MethodInvocation"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "jp",
                "field_type": "org.aspectj.lang.ProceedingJoinPoint",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "method",
                "field_type": "java.lang.reflect.Method",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "target",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodInvocationAdapter",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "org.aspectj.lang.JoinPoint"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jp"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getTarget",
                        "target_params": [],
                        "usage": "jp.getTarget()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.target"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getTarget",
                        "target_params": [],
                        "usage": "jp.getTarget()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.target"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getSignature",
                        "target_params": [],
                        "usage": "jp.getSignature().getDeclaringType()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getSignature",
                        "target_params": [],
                        "usage": "jp.getSignature()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart().getSignature().getName()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart().getSignature()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((CodeSignature)jp.getStaticPart().getSignature()).getParameterTypes()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart().getSignature()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart().getSignature().getDeclaringType()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart().getSignature()"
                    },
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getStaticPart",
                        "target_params": [],
                        "usage": "jp.getStaticPart()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "method",
                            ""
                        ],
                        "usage": "Assert.notNull(this.method,()->\"Could not obtain target method from JoinPoint: '\"+jp+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findMethod",
                "return_type": "java.lang.reflect.Method",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "declaringType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "params",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "declaringType",
                        "target_method_name": "getMethod",
                        "target_params": [
                            "name",
                            "params"
                        ],
                        "usage": "declaringType.getMethod(name,params)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "declaringType",
                        "target_method_name": "getDeclaredMethod",
                        "target_params": [
                            "name",
                            "params"
                        ],
                        "usage": "declaringType.getDeclaredMethod(name,params)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMethod",
                "return_type": "java.lang.reflect.Method",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getArguments",
                "return_type": "org.springframework.security.access.intercept.aspectj.Object[]",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "getArgs",
                        "target_params": [],
                        "usage": "this.jp.getArgs()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jp"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getStaticPart",
                "return_type": "java.lang.reflect.AccessibleObject",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getThis",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.target"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proceed",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.aspectj.lang.ProceedingJoinPoint",
                        "target_name": "jp",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "this.jp.proceed()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jp"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Method",
            "org.aopalliance.intercept.MethodInvocation",
            "org.aspectj.lang.JoinPoint",
            "org.aspectj.lang.ProceedingJoinPoint",
            "org.aspectj.lang.reflect.CodeSignature",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource": {
        "type": "class",
        "class_name": "AbstractFallbackMethodSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [],
        "extendz": "org.springframework.security.access.method.AbstractMethodSecurityMetadataSource",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aop.support.AopUtils",
                        "target_name": "AopUtils",
                        "target_method_name": "getMostSpecificMethod",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "AopUtils.getMostSpecificMethod(method,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Collection",
            "java.util.Collections",
            "org.springframework.aop.support.AopUtils",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager"
        ]
    },
    "org.springframework.security.access.method.AbstractMethodSecurityMetadataSource": {
        "type": "class",
        "class_name": "AbstractMethodSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [
            "org.springframework.security.access.method.MethodSecurityMetadataSource"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "mi",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "mi.getThis()"
                    },
                    {
                        "target_type": "org.springframework.aop.framework.AopProxyUtils",
                        "target_name": "AopProxyUtils",
                        "target_method_name": "ultimateTargetClass",
                        "target_params": [
                            "target"
                        ],
                        "usage": "AopProxyUtils.ultimateTargetClass(target)"
                    },
                    {
                        "target_type": null,
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "attrs",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "attrs.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.util.Collection",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.aop.framework.AopProxyUtils",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager"
        ]
    },
    "org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource": {
        "type": "class",
        "class_name": "DelegatingMethodSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [],
        "extendz": "org.springframework.security.access.method.AbstractMethodSecurityMetadataSource",
        "fields": [
            {
                "type": "field",
                "field_name": "NULL_CONFIG_ATTRIBUTE",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "methodSecurityMetadataSources",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "attributeCache",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingMethodSecurityMetadataSource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "methodSecurityMetadataSources",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "methodSecurityMetadataSources",
                            "\"MethodSecurityMetadataSources cannot be null\""
                        ],
                        "usage": "Assert.notNull(methodSecurityMetadataSources,\"MethodSecurityMetadataSources cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodSecurityMetadataSources"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeCache"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "attributeCache",
                        "target_method_name": "get",
                        "target_params": [
                            "cacheKey"
                        ],
                        "usage": "this.attributeCache.get(cacheKey)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeCache"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodSecurityMetadataSources"
                    },
                    {
                        "target_type": null,
                        "target_name": "s",
                        "target_method_name": "getAttributes",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "s.getAttributes(method,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "attributes.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "attributes",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "attributes.isEmpty()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "attributeCache",
                        "target_method_name": "put",
                        "target_params": [
                            "cacheKey",
                            "NULL_CONFIG_ATTRIBUTE"
                        ],
                        "usage": "this.attributeCache.put(cacheKey,NULL_CONFIG_ATTRIBUTE)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeCache"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Caching method [%s] with attributes %s\",cacheKey,attributes))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Caching method [%s] with attributes %s\"",
                            "cacheKey",
                            "attributes"
                        ],
                        "usage": "LogMessage.format(\"Caching method [%s] with attributes %s\",cacheKey,attributes)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "attributeCache",
                        "target_method_name": "put",
                        "target_params": [
                            "cacheKey",
                            "attributes"
                        ],
                        "usage": "this.attributeCache.put(cacheKey,attributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodSecurityMetadataSources"
                    },
                    {
                        "target_type": null,
                        "target_name": "s",
                        "target_method_name": "getAllConfigAttributes",
                        "target_params": [],
                        "usage": "s.getAllConfigAttributes()"
                    },
                    {
                        "target_type": null,
                        "target_name": "set",
                        "target_method_name": "addAll",
                        "target_params": [
                            "attrs"
                        ],
                        "usage": "set.addAll(attrs)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMethodSecurityMetadataSources",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodSecurityMetadataSources"
                    }
                ]
            }
        ],
        "methodCalls": [
            "Collections.emptyList()"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.HashMap",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Map",
            "java.util.Set",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.util.Assert",
            "org.springframework.util.ObjectUtils"
        ]
    },
    "org.springframework.security.access.method.DefaultCacheKey": {
        "type": "class",
        "class_name": "DefaultCacheKey",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "method",
                "field_type": "org.springframework.security.access.method.Method",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "targetClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultCacheKey",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.access.method.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "other",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.method.Method",
                        "target_name": "method",
                        "target_method_name": "equals",
                        "target_params": [
                            "otherKey"
                        ],
                        "usage": "this.method.equals(otherKey.method)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "otherKey.method"
                    },
                    {
                        "target_type": "org.springframework.security.access.method.ObjectUtils",
                        "target_name": "ObjectUtils",
                        "target_method_name": "nullSafeEquals",
                        "target_params": [
                            "targetClass",
                            "otherKey"
                        ],
                        "usage": "ObjectUtils.nullSafeEquals(this.targetClass,otherKey.targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "otherKey.targetClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.method.Method",
                        "target_name": "method",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.method.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.targetClass.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "this.targetClass.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource": {
        "type": "class",
        "class_name": "MapBasedMethodSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [
            "org.springframework.beans.factory.BeanClassLoaderAware"
        ],
        "extendz": "org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource",
        "fields": [
            {
                "type": "field",
                "field_name": "beanClassLoader",
                "field_type": "org.springframework.security.access.method.ClassLoader",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "methodMap",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "nameMap",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MapBasedMethodSecurityMetadataSource",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "MapBasedMethodSecurityMetadataSource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "methodMap",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "methodMap.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findAttributesSpecifiedAgainst",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "registeredMethod"
                        ],
                        "usage": "this.methodMap.containsKey(registeredMethod)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "get",
                        "target_params": [
                            "registeredMethod"
                        ],
                        "usage": "this.methodMap.get(registeredMethod)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "clazz.getSuperclass()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "clazz.getSuperclass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addSecureMethod",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "lastIndexOf",
                        "target_params": [],
                        "usage": "name.lastIndexOf(\".\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "lastDotIndex!=-1",
                            ""
                        ],
                        "usage": "Assert.isTrue(lastDotIndex!=-1,()->\"'\"+name+\"' is not a valid method name: format is FQN.methodName\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "substring",
                        "target_params": [
                            "lastDotIndex+1"
                        ],
                        "usage": "name.substring(lastDotIndex+1)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "methodName",
                            ""
                        ],
                        "usage": "Assert.hasText(methodName,()->\"Method not found for '\"+name+\"'\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "substring",
                        "target_params": [
                            "0",
                            "lastDotIndex"
                        ],
                        "usage": "name.substring(0,lastDotIndex)"
                    },
                    {
                        "target_type": "org.springframework.util.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "resolveClassName",
                        "target_params": [
                            "typeName",
                            "beanClassLoader"
                        ],
                        "usage": "ClassUtils.resolveClassName(typeName,this.beanClassLoader)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanClassLoader"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addSecureMethod",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "javaType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "mappedName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "javaType",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "javaType.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Request to add secure method [%s] with attributes [%s]\",name,attr))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Request to add secure method [%s] with attributes [%s]\"",
                            "name",
                            "attr"
                        ],
                        "usage": "LogMessage.format(\"Request to add secure method [%s] with attributes [%s]\",name,attr)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "javaType",
                        "target_method_name": "getMethods",
                        "target_params": [],
                        "usage": "javaType.getMethods()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName().equals(mappedName)"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "matchingMethods",
                        "target_method_name": "add",
                        "target_params": [
                            "method"
                        ],
                        "usage": "matchingMethods.add(method)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "matchingMethods",
                            ""
                        ],
                        "usage": "Assert.notEmpty(matchingMethods,()->\"Couldn't find method '\"+mappedName+\"' on '\"+javaType+\"'\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerAllMatchingMethods",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "javaType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "java.util.List"
                    },
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "matchingMethods",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "nameMap",
                        "target_method_name": "get",
                        "target_params": [
                            "registeredMethod"
                        ],
                        "usage": "this.nameMap.get(registeredMethod)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.nameMap"
                    },
                    {
                        "target_type": null,
                        "target_name": "regMethodName",
                        "target_method_name": "equals",
                        "target_params": [
                            "name"
                        ],
                        "usage": "regMethodName.equals(name)"
                    },
                    {
                        "target_type": null,
                        "target_name": "regMethodName",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "regMethodName.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "name.length()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Replacing attributes for secure method [%s]: current name [%s] is more specific than [%s]\",method,name,regMethodName))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Replacing attributes for secure method [%s]: current name [%s] is more specific than [%s]\"",
                            "method",
                            "name",
                            "regMethodName"
                        ],
                        "usage": "LogMessage.format(\"Replacing attributes for secure method [%s]: current name [%s] is more specific than [%s]\",method,name,regMethodName)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "nameMap",
                        "target_method_name": "put",
                        "target_params": [
                            "registeredMethod",
                            "name"
                        ],
                        "usage": "this.nameMap.put(registeredMethod,name)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.nameMap"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Keeping attributes for secure method [%s]: current name [%s] is not more specific than [%s]\",method,name,regMethodName))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Keeping attributes for secure method [%s]: current name [%s] is not more specific than [%s]\"",
                            "method",
                            "name",
                            "regMethodName"
                        ],
                        "usage": "LogMessage.format(\"Keeping attributes for secure method [%s]: current name [%s] is not more specific than [%s]\",method,name,regMethodName)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addSecureMethod",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "javaType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "key"
                        ],
                        "usage": "this.methodMap.containsKey(key)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Method [%s] is already registered with attributes [%s]\",method,this.methodMap.get(key)))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Method [%s] is already registered with attributes [%s]\"",
                            "method",
                            "methodMap"
                        ],
                        "usage": "LogMessage.format(\"Method [%s] is already registered with attributes [%s]\",method,this.methodMap.get(key))"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "get",
                        "target_params": [
                            "key"
                        ],
                        "usage": "this.methodMap.get(key)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "put",
                        "target_params": [
                            "key",
                            "attr"
                        ],
                        "usage": "this.methodMap.put(key,attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addSecureMethod",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.access.method.RegisteredMethod"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "method",
                            "\"RegisteredMethod required\""
                        ],
                        "usage": "Assert.notNull(method,\"RegisteredMethod required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attr",
                            "\"Configuration attribute required\""
                        ],
                        "usage": "Assert.notNull(attr,\"Configuration attribute required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "info",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.info(LogMessage.format(\"Adding secure method [%s] with attributes [%s]\",method,attr))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Adding secure method [%s] with attributes [%s]\"",
                            "method",
                            "attr"
                        ],
                        "usage": "LogMessage.format(\"Adding secure method [%s] with attributes [%s]\",method,attr)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "put",
                        "target_params": [
                            "method",
                            "attr"
                        ],
                        "usage": "this.methodMap.put(method,attr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "values",
                        "target_params": [],
                        "usage": "this.methodMap.values().forEach(allAttributes::addAll)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "values",
                        "target_params": [],
                        "usage": "this.methodMap.values()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isMatch",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "methodName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "mappedName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "endsWith",
                        "target_params": [
                            "\"*\""
                        ],
                        "usage": "mappedName.endsWith(\"*\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "methodName",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "mappedName"
                        ],
                        "usage": "methodName.startsWith(mappedName.substring(0,mappedName.length()-1))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "substring",
                        "target_params": [
                            "0",
                            "mappedName"
                        ],
                        "usage": "mappedName.substring(0,mappedName.length()-1)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "mappedName.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "\"*\""
                        ],
                        "usage": "mappedName.startsWith(\"*\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "methodName",
                        "target_method_name": "endsWith",
                        "target_params": [
                            "mappedName"
                        ],
                        "usage": "methodName.endsWith(mappedName.substring(1,mappedName.length()))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "substring",
                        "target_params": [
                            "1",
                            "mappedName"
                        ],
                        "usage": "mappedName.substring(1,mappedName.length())"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "mappedName",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "mappedName.length()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setBeanClassLoader",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "beanClassLoader",
                        "param_type": "org.springframework.security.access.method.ClassLoader"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "beanClassLoader",
                            "\"Bean class loader required\""
                        ],
                        "usage": "Assert.notNull(beanClassLoader,\"Bean class loader required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanClassLoader"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMethodMapSize",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "methodMap",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "this.methodMap.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodMap"
                    }
                ]
            }
        ],
        "methodCalls": [
            "ClassUtils.getDefaultClassLoader()"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.HashMap",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Map",
            "java.util.Set",
            "org.springframework.beans.factory.BeanClassLoaderAware",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.util.Assert",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.access.method.RegisteredMethod": {
        "type": "class",
        "class_name": "RegisteredMethod",
        "class_type": "class",
        "package": "org.springframework.security.access.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "method",
                "field_type": "org.springframework.security.access.method.Method",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "registeredJavaType",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RegisteredMethod",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.access.method.Method"
                    },
                    {
                        "param_name": "registeredJavaType",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.method.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "method",
                            "\"Method required\""
                        ],
                        "usage": "Assert.notNull(method,\"Method required\")"
                    },
                    {
                        "target_type": "org.springframework.security.access.method.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "registeredJavaType",
                            "\"Registered Java Type required\""
                        ],
                        "usage": "Assert.notNull(registeredJavaType,\"Registered Java Type required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registeredJavaType"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.method.Method",
                        "target_name": "method",
                        "target_method_name": "equals",
                        "target_params": [
                            "rhs"
                        ],
                        "usage": "this.method.equals(rhs.method)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "rhs.method"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "registeredJavaType",
                        "target_method_name": "equals",
                        "target_params": [
                            "rhs"
                        ],
                        "usage": "this.registeredJavaType.equals(rhs.registeredJavaType)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registeredJavaType"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "rhs.registeredJavaType"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.method.Method",
                        "target_name": "method",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.method.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "registeredJavaType",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.registeredJavaType.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registeredJavaType"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "registeredJavaType",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "this.registeredJavaType.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registeredJavaType"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.method.MethodSecurityMetadataSource": {
        "type": "interface",
        "class_name": "MethodSecurityMetadataSource",
        "class_type": "interface",
        "package": "org.springframework.security.access.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Collection",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.SecurityMetadataSource",
            "org.springframework.security.authorization.AuthorizationManager"
        ]
    },
    "org.springframework.security.access.prepost.PostInvocationAdviceProvider": {
        "type": "class",
        "class_name": "PostInvocationAdviceProvider",
        "class_type": "class",
        "package": "org.springframework.security.access.prepost",
        "implementz": [
            "org.springframework.security.access.AfterInvocationProvider"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAdvice",
                "field_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostInvocationAdviceProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "postAdvice",
                        "param_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "authentication",
                            ""
                        ],
                        "usage": "this.postAdvice.after(authentication,(MethodInvocation)object,postInvocationAttribute,returnedObject)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPostInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PostInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.util.Collection",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.AfterInvocationProvider",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.prepost.PostInvocationAttribute": {
        "type": "interface",
        "class_name": "PostInvocationAttribute",
        "class_type": "interface",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.access.ConfigAttribute"
        ]
    },
    "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice": {
        "type": "interface",
        "class_name": "PostInvocationAuthorizationAdvice",
        "class_type": "interface",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "after",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "pia",
                        "param_type": "org.springframework.security.access.prepost.PostInvocationAttribute"
                    },
                    {
                        "param_name": "returnedObject",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.prepost.PreInvocationAttribute": {
        "type": "interface",
        "class_name": "PreInvocationAttribute",
        "class_type": "interface",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.access.ConfigAttribute"
        ]
    },
    "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice": {
        "type": "interface",
        "class_name": "PreInvocationAuthorizationAdvice",
        "class_type": "interface",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "before",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "preInvocationAttribute",
                        "param_type": "org.springframework.security.access.prepost.PreInvocationAttribute"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter": {
        "type": "class",
        "class_name": "PreInvocationAuthorizationAdviceVoter",
        "class_type": "class",
        "package": "org.springframework.security.access.prepost",
        "implementz": [
            "org.springframework.security.access.AccessDecisionVoter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "preAdvice",
                "field_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreInvocationAuthorizationAdviceVoter",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "pre",
                        "param_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "vote",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "method",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice",
                        "target_name": "preAdvice",
                        "target_method_name": "before",
                        "target_params": [
                            "authentication",
                            "method",
                            "preAttr"
                        ],
                        "usage": "this.preAdvice.before(authentication,method,preAttr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPreInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PreInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.util.Collection",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor": {
        "type": "class",
        "class_name": "PrePostAdviceReactiveMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.access.prepost",
        "implementz": [
            "org.aopalliance.intercept.MethodInterceptor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "anonymous",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "attributeSource",
                "field_type": "org.springframework.security.access.method.MethodSecurityMetadataSource",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "preInvocationAdvice",
                "field_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAdvice",
                "field_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "COROUTINES_FLOW_CLASS_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "RETURN_TYPE_METHOD_PARAMETER_INDEX",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PrePostAdviceReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "attributeSource",
                        "param_type": "org.springframework.security.access.method.MethodSecurityMetadataSource"
                    },
                    {
                        "param_name": "preInvocationAdvice",
                        "param_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice"
                    },
                    {
                        "param_name": "postInvocationAdvice",
                        "param_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attributeSource",
                            "\"attributeSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(attributeSource,\"attributeSource cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "preInvocationAdvice",
                            "\"preInvocationAdvice cannot be null\""
                        ],
                        "usage": "Assert.notNull(preInvocationAdvice,\"preInvocationAdvice cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "postInvocationAdvice",
                            "\"postInvocationAdvice cannot be null\""
                        ],
                        "usage": "Assert.notNull(postInvocationAdvice,\"postInvocationAdvice cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeSource"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preInvocationAdvice"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    },
                    {
                        "target_type": "org.springframework.core.KotlinDetector",
                        "target_name": "KotlinDetector",
                        "target_method_name": "isSuspendingFunction",
                        "target_params": [
                            "method"
                        ],
                        "usage": "KotlinDetector.isSuspendingFunction(method)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.COROUTINES_FLOW_CLASS_NAME",
                        "target_name": "COROUTINES_FLOW_CLASS_NAME",
                        "target_method_name": "equals",
                        "target_params": [
                            "newMethodParameter"
                        ],
                        "usage": "COROUTINES_FLOW_CLASS_NAME.equals(newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName())"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "hasReactiveReturnType",
                            ""
                        ],
                        "usage": "Assert.state(hasReactiveReturnType,()->\"The returnType \"+returnType+\" on \"+method+\" must return an instance of org.reactivestreams.Publisher \"+\"(i.e. Mono / Flux) or the function must be a Kotlin coroutine \"+\"function in order to support Reactor Context\")"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "invocation.getThis().getClass()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "invocation.getThis()"
                    },
                    {
                        "target_type": "org.springframework.security.access.method.MethodSecurityMetadataSource",
                        "target_name": "attributeSource",
                        "target_method_name": "getAttributes",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "this.attributeSource.getAttributes(method,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeSource"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication).defaultIfEmpty(this.anonymous).filter((auth)->this.preInvocationAdvice.before(auth,invocation,preAttr)).switchIfEmpty(Mono.defer(()->Mono.error(newAccessDeniedException(\"Denied\"))))"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication).defaultIfEmpty(this.anonymous).filter((auth)->this.preInvocationAdvice.before(auth,invocation,preAttr))"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication).defaultIfEmpty(this.anonymous)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.anonymous"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice",
                        "target_name": "preInvocationAdvice",
                        "target_method_name": "before",
                        "target_params": [
                            "auth",
                            "invocation",
                            "preAttr"
                        ],
                        "usage": "this.preInvocationAdvice.before(auth,invocation,preAttr)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preInvocationAdvice"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->Mono.error(newAccessDeniedException(\"Denied\")))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "newAccessDeniedException"
                        ],
                        "usage": "Mono.error(newAccessDeniedException(\"Denied\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMap",
                        "target_params": [],
                        "usage": "toInvoke.flatMap((auth)->PrePostAdviceReactiveMethodInterceptor.<Mono<?>>proceed(invocation).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r))"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "<Mono<?>>proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.<Mono<?>>proceed(invocation).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "<Mono<?>>proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.<Mono<?>>proceed(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "auth",
                            "invocation",
                            "attr",
                            "r"
                        ],
                        "usage": "this.postAdvice.after(auth,invocation,attr,r)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMapMany",
                        "target_params": [],
                        "usage": "toInvoke.flatMapMany((auth)->PrePostAdviceReactiveMethodInterceptor.<Flux<?>>proceed(invocation).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r))"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "<Flux<?>>proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.<Flux<?>>proceed(invocation).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "<Flux<?>>proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.<Flux<?>>proceed(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "auth",
                            "invocation",
                            "attr",
                            "r"
                        ],
                        "usage": "this.postAdvice.after(auth,invocation,attr,r)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMapMany",
                        "target_params": [],
                        "usage": "toInvoke.flatMapMany((auth)->Flux.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation)).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "PrePostAdviceReactiveMethodInterceptor"
                        ],
                        "usage": "Flux.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation)).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "PrePostAdviceReactiveMethodInterceptor"
                        ],
                        "usage": "Flux.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation))"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.proceed(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "auth",
                            "invocation",
                            "attr",
                            "r"
                        ],
                        "usage": "this.postAdvice.after(auth,invocation,attr,r)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance().getAdapter(returnType)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "adapter!=null",
                            ""
                        ],
                        "usage": "Assert.state(adapter!=null,()->\"The returnType \"+returnType+\" on \"+method+\" must have a org.springframework.core.ReactiveAdapter registered\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMapMany",
                        "target_params": [],
                        "usage": "toInvoke.flatMapMany((auth)->Flux.from(adapter.toPublisher(PrePostAdviceReactiveMethodInterceptor.flowProceed(invocation))).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "adapter"
                        ],
                        "usage": "Flux.from(adapter.toPublisher(PrePostAdviceReactiveMethodInterceptor.flowProceed(invocation))).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "adapter"
                        ],
                        "usage": "Flux.from(adapter.toPublisher(PrePostAdviceReactiveMethodInterceptor.flowProceed(invocation)))"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "toPublisher",
                        "target_params": [
                            "PrePostAdviceReactiveMethodInterceptor"
                        ],
                        "usage": "adapter.toPublisher(PrePostAdviceReactiveMethodInterceptor.flowProceed(invocation))"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "flowProceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.flowProceed(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "auth",
                            "invocation",
                            "attr",
                            "r"
                        ],
                        "usage": "this.postAdvice.after(auth,invocation,attr,r)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.KotlinDelegate",
                        "target_name": "KotlinDelegate",
                        "target_method_name": "asFlow",
                        "target_params": [
                            "response"
                        ],
                        "usage": "KotlinDelegate.asFlow(response)"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMap",
                        "target_params": [],
                        "usage": "toInvoke.flatMap((auth)->Mono.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation)).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "PrePostAdviceReactiveMethodInterceptor"
                        ],
                        "usage": "Mono.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation)).map((r)->(attr!=null)?this.postAdvice.after(auth,invocation,attr,r):r)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "PrePostAdviceReactiveMethodInterceptor"
                        ],
                        "usage": "Mono.from(PrePostAdviceReactiveMethodInterceptor.proceed(invocation))"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor",
                        "target_name": "PrePostAdviceReactiveMethodInterceptor",
                        "target_method_name": "proceed",
                        "target_params": [
                            "invocation"
                        ],
                        "usage": "PrePostAdviceReactiveMethodInterceptor.proceed(invocation)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice",
                        "target_name": "postAdvice",
                        "target_method_name": "after",
                        "target_params": [
                            "auth",
                            "invocation",
                            "attr",
                            "r"
                        ],
                        "usage": "this.postAdvice.after(auth,invocation,attr,r)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAdvice"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proceed",
                "return_type": "org.springframework.security.access.prepost.T",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "invocation.proceed()"
                    },
                    {
                        "target_type": "reactor.core.Exceptions",
                        "target_name": "Exceptions",
                        "target_method_name": "propagate",
                        "target_params": [
                            "throwable"
                        ],
                        "usage": "Exceptions.propagate(throwable)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "flowProceed",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "invocation.proceed()"
                    },
                    {
                        "target_type": "reactor.core.Exceptions",
                        "target_name": "Exceptions",
                        "target_method_name": "propagate",
                        "target_params": [
                            "throwable"
                        ],
                        "usage": "Exceptions.propagate(throwable)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPostInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PostInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findPreInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PreInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\")"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Collection",
            "kotlinx.coroutines.reactive.ReactiveFlowKt",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.reactivestreams.Publisher",
            "reactor.core.Exceptions",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.core.KotlinDetector",
            "org.springframework.core.MethodParameter",
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.method.MethodSecurityMetadataSource",
            "org.springframework.security.authentication.AnonymousAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.context.ReactiveSecurityContextHolder",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.prepost.KotlinDelegate": {
        "type": "class",
        "class_name": "KotlinDelegate",
        "class_type": "class",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "asFlow",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "publisher",
                        "param_type": "org.springframework.security.access.prepost.Publisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.prepost.ReactiveFlowKt",
                        "target_name": "ReactiveFlowKt",
                        "target_method_name": "asFlow",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "ReactiveFlowKt.asFlow(publisher)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource": {
        "type": "class",
        "class_name": "PrePostAnnotationSecurityMetadataSource",
        "class_type": "class",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": "org.springframework.security.access.method.AbstractMethodSecurityMetadataSource",
        "fields": [
            {
                "type": "field",
                "field_name": "attributeFactory",
                "field_type": "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PrePostAnnotationSecurityMetadataSource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "attributeFactory",
                        "param_type": "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preFilter",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "preFilter.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preFilter",
                        "target_method_name": "filterTarget",
                        "target_params": [],
                        "usage": "preFilter.filterTarget()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "preAuthorize.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postFilter",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "postFilter.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "postAuthorize.value()"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory",
                        "target_name": "attributeFactory",
                        "target_method_name": "createPreInvocationAttribute",
                        "target_params": [
                            "preFilterAttribute",
                            "filterObject",
                            "preAuthorizeAttribute"
                        ],
                        "usage": "this.attributeFactory.createPreInvocationAttribute(preFilterAttribute,filterObject,preAuthorizeAttribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": "attrs",
                        "target_method_name": "add",
                        "target_params": [
                            "pre"
                        ],
                        "usage": "attrs.add(pre)"
                    },
                    {
                        "target_type": "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory",
                        "target_name": "attributeFactory",
                        "target_method_name": "createPostInvocationAttribute",
                        "target_params": [
                            "postFilterAttribute",
                            "postAuthorizeAttribute"
                        ],
                        "usage": "this.attributeFactory.createPostInvocationAttribute(postFilterAttribute,postAuthorizeAttribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributeFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": "attrs",
                        "target_method_name": "add",
                        "target_params": [
                            "post"
                        ],
                        "usage": "attrs.add(post)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attrs",
                        "target_method_name": "trimToSize",
                        "target_params": [],
                        "usage": "attrs.trimToSize()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllConfigAttributes",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findAnnotation",
                "return_type": "org.springframework.security.access.prepost.A",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "annotationClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "getMostSpecificMethod",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "ClassUtils.getMostSpecificMethod(method,targetClass)"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "specificMethod",
                            "annotationClass"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(specificMethod,annotationClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"%s found on specific method: %s\",annotation,specificMethod))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"%s found on specific method: %s\"",
                            "annotation",
                            "specificMethod"
                        ],
                        "usage": "LogMessage.format(\"%s found on specific method: %s\",annotation,specificMethod)"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "method",
                            "annotationClass"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(method,annotationClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"%s found on: %s\",annotation,method))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"%s found on: %s\"",
                            "annotation",
                            "method"
                        ],
                        "usage": "LogMessage.format(\"%s found on: %s\",annotation,method)"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "specificMethod"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(specificMethod.getDeclaringClass(),annotationClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"%s found on: %s\",annotation,specificMethod.getDeclaringClass().getName()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"%s found on: %s\"",
                            "annotation",
                            "specificMethod"
                        ],
                        "usage": "LogMessage.format(\"%s found on: %s\",annotation,specificMethod.getDeclaringClass().getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass().getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.access.method.AbstractMethodSecurityMetadataSource",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.access.prepost.PrePostInvocationAttributeFactory": {
        "type": "interface",
        "class_name": "PrePostInvocationAttributeFactory",
        "class_type": "interface",
        "package": "org.springframework.security.access.prepost",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "createPreInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PreInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "preFilterAttribute",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "filterObject",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "preAuthorizeAttribute",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createPostInvocationAttribute",
                "return_type": "org.springframework.security.access.prepost.PostInvocationAttribute",
                "formal_params": [
                    {
                        "param_name": "postFilterAttribute",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "postAuthorizeAttribute",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.security.authorization.AuthorizationManager"
        ]
    },
    "org.springframework.security.access.vote.AbstractAccessDecisionManager": {
        "type": "class",
        "class_name": "AbstractAccessDecisionManager",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [
            "org.springframework.security.access.vote.AccessDecisionManager,InitializingBean,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "decisionVoters",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "allowIfAllAbstainDecisions",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractAccessDecisionManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "decisionVoters",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "decisionVoters",
                            "\"A list of AccessDecisionVoters is required\""
                        ],
                        "usage": "Assert.notEmpty(decisionVoters,\"A list of AccessDecisionVoters is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "decisionVoters",
                            "\"A list of AccessDecisionVoters is required\""
                        ],
                        "usage": "Assert.notEmpty(this.decisionVoters,\"A list of AccessDecisionVoters is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messages",
                            "\"A message source must be set\""
                        ],
                        "usage": "Assert.notNull(this.messages,\"A message source must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "checkAllowIfAllAbstainDecisions",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.isAllowIfAllAbstainDecisions()"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDecisionVoters",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAllowIfAllAbstainDecisions",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfAllAbstainDecisions"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAllowIfAllAbstainDecisions",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "allowIfAllAbstainDecisions",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfAllAbstainDecisions"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    },
                    {
                        "target_type": null,
                        "target_name": "voter",
                        "target_method_name": "supports",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "voter.supports(attribute)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    },
                    {
                        "target_type": null,
                        "target_name": "voter",
                        "target_method_name": "supports",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "voter.supports(clazz)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.vote.AbstractAccessDecisionManager",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "this.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.decisionVoters"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfAllAbstainDecisions"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "java.util.List",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.access.AccessDecisionManager",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.vote.AbstractAclVoter": {
        "type": "class",
        "class_name": "AbstractAclVoter",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [
            "org.springframework.security.access.AccessDecisionVoter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "processDomainObjectClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getDomainObjectInstance",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "invocation.getArguments()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod().getParameterTypes()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "params.length"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "processDomainObjectClass",
                        "target_method_name": "isAssignableFrom",
                        "target_params": [
                            "params[i]"
                        ],
                        "usage": "this.processDomainObjectClass.isAssignableFrom(params[i])"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.processDomainObjectClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.processDomainObjectClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getProcessDomainObjectClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.processDomainObjectClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setProcessDomainObjectClass",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "processDomainObjectClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "processDomainObjectClass",
                            "\"processDomainObjectClass cannot be set to null\""
                        ],
                        "usage": "Assert.notNull(processDomainObjectClass,\"processDomainObjectClass cannot be set to null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.processDomainObjectClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.AuthorizationServiceException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.vote.AffirmativeBased": {
        "type": "class",
        "class_name": "AffirmativeBased",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [],
        "extendz": "org.springframework.security.access.vote.AbstractAccessDecisionManager",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AffirmativeBased",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "decisionVoters",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "configAttributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "voter",
                        "target_method_name": "vote",
                        "target_params": [
                            "authentication",
                            "object",
                            "configAttributes"
                        ],
                        "usage": "voter.vote(authentication,object,configAttributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.List",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.vote.AuthenticatedVoter": {
        "type": "class",
        "class_name": "AuthenticatedVoter",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [
            "org.springframework.security.access.AccessDecisionVoter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "IS_AUTHENTICATED_FULLY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "IS_AUTHENTICATED_REMEMBERED",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "IS_AUTHENTICATED_ANONYMOUSLY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationTrustResolver",
                "field_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "isFullyAuthenticated",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "authenticationTrustResolver",
                        "target_method_name": "isFullyAuthenticated",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationTrustResolver.isFullyAuthenticated(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationTrustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationTrustResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationTrustResolver",
                        "param_type": "org.springframework.security.authentication.AuthenticationTrustResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationTrustResolver",
                            "\"AuthenticationTrustResolver cannot be set to null\""
                        ],
                        "usage": "Assert.notNull(authenticationTrustResolver,\"AuthenticationTrustResolver cannot be set to null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationTrustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_FULLY",
                        "target_name": "IS_AUTHENTICATED_FULLY",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_FULLY.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_REMEMBERED",
                        "target_name": "IS_AUTHENTICATED_REMEMBERED",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_REMEMBERED.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_ANONYMOUSLY",
                        "target_name": "IS_AUTHENTICATED_ANONYMOUSLY",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_ANONYMOUSLY.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "vote",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.supports(attribute)"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_FULLY",
                        "target_name": "IS_AUTHENTICATED_FULLY",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_FULLY.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_REMEMBERED",
                        "target_name": "IS_AUTHENTICATED_REMEMBERED",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_REMEMBERED.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "authenticationTrustResolver",
                        "target_method_name": "isRememberMe",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationTrustResolver.isRememberMe(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationTrustResolver"
                    },
                    {
                        "target_type": "org.springframework.security.access.vote.IS_AUTHENTICATED_ANONYMOUSLY",
                        "target_name": "IS_AUTHENTICATED_ANONYMOUSLY",
                        "target_method_name": "equals",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "IS_AUTHENTICATED_ANONYMOUSLY.equals(attribute.getAttribute())"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "authenticationTrustResolver",
                        "target_method_name": "isAnonymous",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationTrustResolver.isAnonymous(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationTrustResolver"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "authenticationTrustResolver",
                        "target_method_name": "isRememberMe",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationTrustResolver.isRememberMe(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationTrustResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authentication.AuthenticationTrustResolver",
            "org.springframework.security.authentication.AuthenticationTrustResolverImpl",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.vote.ConsensusBased": {
        "type": "class",
        "class_name": "ConsensusBased",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [],
        "extendz": "org.springframework.security.access.vote.AbstractAccessDecisionManager",
        "fields": [
            {
                "type": "field",
                "field_name": "allowIfEqualGrantedDeniedDecisions",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ConsensusBased",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "decisionVoters",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "configAttributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "voter",
                        "target_method_name": "vote",
                        "target_params": [
                            "authentication",
                            "object",
                            "configAttributes"
                        ],
                        "usage": "voter.vote(authentication,object,configAttributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfEqualGrantedDeniedDecisions"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAllowIfEqualGrantedDeniedDecisions",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfEqualGrantedDeniedDecisions"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAllowIfEqualGrantedDeniedDecisions",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "allowIfEqualGrantedDeniedDecisions",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.allowIfEqualGrantedDeniedDecisions"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.List",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.access.vote.RoleHierarchyVoter": {
        "type": "class",
        "class_name": "RoleHierarchyVoter",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [],
        "extendz": "org.springframework.security.access.vote.RoleVoter",
        "fields": [
            {
                "type": "field",
                "field_name": "roleHierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RoleHierarchyVoter",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "roleHierarchy",
                            "\"RoleHierarchy must not be null\""
                        ],
                        "usage": "Assert.notNull(roleHierarchy,\"RoleHierarchy must not be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "extractAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                        "target_name": "roleHierarchy",
                        "target_method_name": "getReachableGrantedAuthorities",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.roleHierarchy.getReachableGrantedAuthorities(authentication.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.access.vote.RoleVoter": {
        "type": "class",
        "class_name": "RoleVoter",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [
            "org.springframework.security.access.AccessDecisionVoter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "rolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getRolePrefix",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.access.ConfigAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute().startsWith(getRolePrefix())"
                    },
                    {
                        "target_type": "org.springframework.security.access.ConfigAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "vote",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.supports(attribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute().equals(authority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getAttribute",
                        "target_params": [],
                        "usage": "attribute.getAttribute()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "extractAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.access.vote.UnanimousBased": {
        "type": "class",
        "class_name": "UnanimousBased",
        "class_type": "class",
        "package": "org.springframework.security.access.vote",
        "implementz": [],
        "extendz": "org.springframework.security.access.vote.AbstractAccessDecisionManager",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UnanimousBased",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "decisionVoters",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "decide",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "singleAttributeList",
                        "target_method_name": "add",
                        "target_params": [
                            "null"
                        ],
                        "usage": "singleAttributeList.add(null)"
                    },
                    {
                        "target_type": null,
                        "target_name": "singleAttributeList",
                        "target_method_name": "set",
                        "target_params": [
                            "0",
                            "attribute"
                        ],
                        "usage": "singleAttributeList.set(0,attribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": "voter",
                        "target_method_name": "vote",
                        "target_params": [
                            "authentication",
                            "object",
                            "singleAttributeList"
                        ],
                        "usage": "voter.vote(authentication,object,singleAttributeList)"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "org.springframework.security.access.AccessDecisionVoter",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.ConfigAttribute",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.aot.hint.AuthorizeReturnObjectCoreHintsRegistrar": {
        "type": "class",
        "class_name": "AuthorizeReturnObjectCoreHintsRegistrar",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.security.aot.hint.SecurityHintsRegistrar"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "proxyFactory",
                "field_type": "org.springframework.security.authorization.AuthorizationProxyFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "visitedClasses",
                "field_type": "java.util.Set",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizeReturnObjectCoreHintsRegistrar",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.AuthorizationProxyFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "proxyFactory",
                            "\"proxyFactory cannot be null\""
                        ],
                        "usage": "Assert.notNull(proxyFactory,\"proxyFactory cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.proxyFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBeanDefinitionNames",
                        "target_params": [],
                        "usage": "beanFactory.getBeanDefinitionNames()"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getType",
                        "target_params": [
                            "name",
                            "false"
                        ],
                        "usage": "beanFactory.getType(name,false)"
                    },
                    {
                        "target_type": null,
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredMethods",
                        "target_params": [],
                        "usage": "clazz.getDeclaredMethods()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "clazz"
                        ],
                        "usage": "this.scanner.scan(method,clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    },
                    {
                        "target_type": null,
                        "target_name": "toProxy",
                        "target_method_name": "add",
                        "target_params": [
                            "method"
                        ],
                        "usage": "toProxy.add(method.getReturnType())"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    },
                    {
                        "target_type": "org.springframework.security.aot.hint.AuthorizeReturnObjectCoreHintsRegistrar",
                        "target_name": "this",
                        "target_method_name": "newAuthorizeReturnObjectHintsRegistrar",
                        "target_params": [
                            "proxyFactory",
                            "toProxy.registerHints"
                        ],
                        "usage": "newAuthorizeReturnObjectHintsRegistrar(this.proxyFactory,toProxy).registerHints(hints,beanFactory)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.proxyFactory"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(AuthorizeReturnObject.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.security.authorization.AuthorizationProxyFactory",
            "org.springframework.security.authorization.method.AuthorizeReturnObject",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.aot.hint.AuthorizeReturnObjectHintsRegistrar": {
        "type": "class",
        "class_name": "AuthorizeReturnObjectHintsRegistrar",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.security.aot.hint.SecurityHintsRegistrar"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "proxyFactory",
                "field_type": "org.springframework.security.authorization.AuthorizationProxyFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "visitedClasses",
                "field_type": "java.util.Set",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "classesToProxy",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizeReturnObjectHintsRegistrar",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.AuthorizationProxyFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "proxyFactory",
                            "\"proxyFactory cannot be null\""
                        ],
                        "usage": "Assert.notNull(proxyFactory,\"proxyFactory cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "classes",
                            "\"classes cannot contain null elements\""
                        ],
                        "usage": "Assert.noNullElements(classes,\"classes cannot contain null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.proxyFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.classesToProxy"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "classes"
                        ],
                        "usage": "List.of(classes)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizeReturnObjectHintsRegistrar",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "classes",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.proxyFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.classesToProxy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.classesToProxy"
                    },
                    {
                        "target_type": null,
                        "target_name": "toProxy",
                        "target_method_name": "add",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "toProxy.add(clazz)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerProxy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationProxyFactory",
                        "target_name": "proxyFactory",
                        "target_method_name": "proxy",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "this.proxyFactory.proxy(clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.proxyFactory"
                    },
                    {
                        "target_type": "java.lang.reflect.Proxy",
                        "target_name": "Proxy",
                        "target_method_name": "isProxyClass",
                        "target_params": [
                            "proxied"
                        ],
                        "usage": "Proxy.isProxyClass(proxied)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "proxies",
                        "target_params": [],
                        "usage": "hints.proxies().registerJdkProxy(proxied.getInterfaces())"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "proxies",
                        "target_params": [],
                        "usage": "hints.proxies()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxied",
                        "target_method_name": "getInterfaces",
                        "target_params": [],
                        "usage": "proxied.getInterfaces()"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(clazz,MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,MemberCategory.INVOKE_DECLARED_METHODS).registerType(proxied,MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,MemberCategory.INVOKE_DECLARED_METHODS,MemberCategory.DECLARED_FIELDS)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(clazz,MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,MemberCategory.INVOKE_DECLARED_METHODS)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "traverseType",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "toProxy",
                        "param_type": "java.util.List"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "visitedClasses",
                        "target_method_name": "contains",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "this.visitedClasses.contains(clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitedClasses"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "visitedClasses",
                        "target_method_name": "add",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "this.visitedClasses.add(clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitedClasses"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredMethods",
                        "target_params": [],
                        "usage": "clazz.getDeclaredMethods()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "m",
                            "clazz"
                        ],
                        "usage": "this.scanner.scan(m,clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    },
                    {
                        "target_type": null,
                        "target_name": "m",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "m.getReturnType()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "toProxy",
                        "target_method_name": "add",
                        "target_params": [
                            "returnType"
                        ],
                        "usage": "toProxy.add(returnType)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(AuthorizeReturnObject.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.lang.reflect.Proxy",
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.aop.SpringProxy",
            "org.springframework.aot.hint.MemberCategory",
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.security.authorization.AuthorizationProxyFactory",
            "org.springframework.security.authorization.method.AuthorizeReturnObject",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.aot.hint.CoreSecurityRuntimeHints": {
        "type": "class",
        "class_name": "CoreSecurityRuntimeHints",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.aot.hint.RuntimeHintsRegistrar"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "classLoader",
                        "param_type": "org.springframework.security.aot.hint.ClassLoader"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources().registerResourceBundle(\"org.springframework.security.messages\")"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerMethodSecurityHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(TypeReference.of(\"org.springframework.security.access.expression.method.MethodSecurityExpressionRoot\"),(builder)->builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.TypeReference",
                        "target_name": "TypeReference",
                        "target_method_name": "of",
                        "target_params": [
                            "\"org"
                        ],
                        "usage": "TypeReference.of(\"org.springframework.security.access.expression.method.MethodSecurityExpressionRoot\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "withMembers",
                        "target_params": [
                            "MemberCategory"
                        ],
                        "usage": "builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(AbstractAuthenticationToken.class,(builder)->builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "withMembers",
                        "target_params": [
                            "MemberCategory"
                        ],
                        "usage": "builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerExpressionEvaluationHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerTypes(List.of(TypeReference.of(SecurityExpressionOperations.class),TypeReference.of(SecurityExpressionRoot.class)),(builder)->builder.withMembers(MemberCategory.DECLARED_FIELDS,MemberCategory.INVOKE_DECLARED_METHODS))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "TypeReference"
                        ],
                        "usage": "List.of(TypeReference.of(SecurityExpressionOperations.class),TypeReference.of(SecurityExpressionRoot.class))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.TypeReference",
                        "target_name": "TypeReference",
                        "target_method_name": "of",
                        "target_params": [
                            "SecurityExpressionOperations"
                        ],
                        "usage": "TypeReference.of(SecurityExpressionOperations.class)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.TypeReference",
                        "target_name": "TypeReference",
                        "target_method_name": "of",
                        "target_params": [
                            "SecurityExpressionRoot"
                        ],
                        "usage": "TypeReference.of(SecurityExpressionRoot.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "withMembers",
                        "target_params": [
                            "MemberCategory"
                        ],
                        "usage": "builder.withMembers(MemberCategory.DECLARED_FIELDS,MemberCategory.INVOKE_DECLARED_METHODS)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerExceptionEventsHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerTypes(getDefaultAuthenticationExceptionEventPublisherTypes(),(builder)->builder.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "withMembers",
                        "target_params": [
                            "MemberCategory"
                        ],
                        "usage": "builder.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDefaultAuthenticationExceptionEventPublisherTypes",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.stream.Stream",
                        "target_name": "Stream",
                        "target_method_name": "of",
                        "target_params": [
                            "AuthenticationFailureBadCredentialsEvent"
                        ],
                        "usage": "Stream.of(AuthenticationFailureBadCredentialsEvent.class,AuthenticationFailureCredentialsExpiredEvent.class,AuthenticationFailureDisabledEvent.class,AuthenticationFailureExpiredEvent.class,AuthenticationFailureLockedEvent.class,AuthenticationFailureProviderNotFoundEvent.class,AuthenticationFailureProxyUntrustedEvent.class,AuthenticationFailureServiceExceptionEvent.class,AuthenticationServiceException.class,AccountExpiredException.class,BadCredentialsException.class,CredentialsExpiredException.class,DisabledException.class,LockedException.class,UsernameNotFoundException.class,ProviderNotFoundException.class).map(TypeReference::of).toList()"
                    },
                    {
                        "target_type": "java.util.stream.Stream",
                        "target_name": "Stream",
                        "target_method_name": "of",
                        "target_params": [
                            "AuthenticationFailureBadCredentialsEvent"
                        ],
                        "usage": "Stream.of(AuthenticationFailureBadCredentialsEvent.class,AuthenticationFailureCredentialsExpiredEvent.class,AuthenticationFailureDisabledEvent.class,AuthenticationFailureExpiredEvent.class,AuthenticationFailureLockedEvent.class,AuthenticationFailureProviderNotFoundEvent.class,AuthenticationFailureProxyUntrustedEvent.class,AuthenticationFailureServiceExceptionEvent.class,AuthenticationServiceException.class,AccountExpiredException.class,BadCredentialsException.class,CredentialsExpiredException.class,DisabledException.class,LockedException.class,UsernameNotFoundException.class,ProviderNotFoundException.class).map(TypeReference::of)"
                    },
                    {
                        "target_type": "java.util.stream.Stream",
                        "target_name": "Stream",
                        "target_method_name": "of",
                        "target_params": [
                            "AuthenticationFailureBadCredentialsEvent"
                        ],
                        "usage": "Stream.of(AuthenticationFailureBadCredentialsEvent.class,AuthenticationFailureCredentialsExpiredEvent.class,AuthenticationFailureDisabledEvent.class,AuthenticationFailureExpiredEvent.class,AuthenticationFailureLockedEvent.class,AuthenticationFailureProviderNotFoundEvent.class,AuthenticationFailureProxyUntrustedEvent.class,AuthenticationFailureServiceExceptionEvent.class,AuthenticationServiceException.class,AccountExpiredException.class,BadCredentialsException.class,CredentialsExpiredException.class,DisabledException.class,LockedException.class,UsernameNotFoundException.class,ProviderNotFoundException.class)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerDefaultJdbcSchemaFileHint",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources().registerPattern(JdbcDaoImpl.DEFAULT_USER_SCHEMA_DDL_LOCATION)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerSecurityContextHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(SecurityContextImpl.class,(builder)->builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS))"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "withMembers",
                        "target_params": [
                            "MemberCategory"
                        ],
                        "usage": "builder.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List",
            "java.util.stream.Stream",
            "org.springframework.aot.hint.MemberCategory",
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.aot.hint.RuntimeHintsRegistrar",
            "org.springframework.aot.hint.TypeReference",
            "org.springframework.security.access.expression.SecurityExpressionOperations",
            "org.springframework.security.access.expression.SecurityExpressionRoot",
            "org.springframework.security.authentication.AbstractAuthenticationToken",
            "org.springframework.security.authentication.AccountExpiredException",
            "org.springframework.security.authentication.AuthenticationServiceException",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.authentication.CredentialsExpiredException",
            "org.springframework.security.authentication.DisabledException",
            "org.springframework.security.authentication.LockedException",
            "org.springframework.security.authentication.ProviderNotFoundException",
            "org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureLockedEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent",
            "org.springframework.security.core.context.SecurityContextImpl",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl"
        ]
    },
    "org.springframework.security.aot.hint.OneTimeTokenRuntimeHints": {
        "type": "class",
        "class_name": "OneTimeTokenRuntimeHints",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.aot.hint.RuntimeHintsRegistrar"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "classLoader",
                        "param_type": "org.springframework.security.aot.hint.ClassLoader"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources().registerPattern(\"org/springframework/security/core/ott/jdbc/one-time-tokens-schema.sql\")"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "resources",
                        "target_params": [],
                        "usage": "hints.resources()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.aot.hint.RuntimeHintsRegistrar",
            "org.springframework.jdbc.core.JdbcOperations",
            "org.springframework.security.authentication.ott.OneTimeToken",
            "org.springframework.security.authentication.ott.OneTimeTokenService"
        ]
    },
    "org.springframework.security.aot.hint.PrePostAuthorizeExpressionBeanHintsRegistrar": {
        "type": "class",
        "class_name": "PrePostAuthorizeExpressionBeanHintsRegistrar",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.security.aot.hint.SecurityHintsRegistrar"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "preAuthorizeScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAuthorizeScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizeReturnObjectScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expressionParser",
                "field_type": "org.springframework.expression.spel.standard.SpelExpressionParser",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "visitedClasses",
                "field_type": "java.util.Set",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "toVisit",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PrePostAuthorizeExpressionBeanHintsRegistrar",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "toVisit"
                        ],
                        "usage": "Arrays.asList(toVisit)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "PrePostAuthorizeExpressionBeanHintsRegistrar",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "toVisit",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "toVisit",
                            "\"toVisit cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(toVisit,\"toVisit cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "toVisit",
                            "\"toVisit cannot contain null elements\""
                        ],
                        "usage": "Assert.noNullElements(toVisit,\"toVisit cannot contain null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.toVisit"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.toVisit"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressions",
                        "target_method_name": "addAll",
                        "target_params": [
                            "extractSecurityExpressions"
                        ],
                        "usage": "expressions.addAll(extractSecurityExpressions(bean))"
                    },
                    {
                        "target_type": null,
                        "target_name": "beanNamesToRegister",
                        "target_method_name": "addAll",
                        "target_params": [
                            "extractBeanNames"
                        ],
                        "usage": "beanNamesToRegister.addAll(extractBeanNames(expression))"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getType",
                        "target_params": [
                            "toRegister",
                            "false"
                        ],
                        "usage": "beanFactory.getType(toRegister,false)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection().registerType(TypeReference.of(type),MemberCategory.INVOKE_DECLARED_METHODS)"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.RuntimeHints",
                        "target_name": "hints",
                        "target_method_name": "reflection",
                        "target_params": [],
                        "usage": "hints.reflection()"
                    },
                    {
                        "target_type": "org.springframework.aot.hint.TypeReference",
                        "target_name": "TypeReference",
                        "target_method_name": "of",
                        "target_params": [
                            "type"
                        ],
                        "usage": "TypeReference.of(type)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "extractSecurityExpressions",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "visitedClasses",
                        "target_method_name": "contains",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "this.visitedClasses.contains(clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitedClasses"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptySet",
                        "target_params": [],
                        "usage": "Collections.emptySet()"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "visitedClasses",
                        "target_method_name": "add",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "this.visitedClasses.add(clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitedClasses"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredMethods",
                        "target_params": [],
                        "usage": "clazz.getDeclaredMethods()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "preAuthorizeScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "clazz"
                        ],
                        "usage": "this.preAuthorizeScanner.scan(method,clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthorizeScanner"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "postAuthorizeScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "clazz"
                        ],
                        "usage": "this.postAuthorizeScanner.scan(method,clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthorizeScanner"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressions",
                        "target_method_name": "add",
                        "target_params": [
                            "preAuthorize"
                        ],
                        "usage": "expressions.add(preAuthorize.value())"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "preAuthorize.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressions",
                        "target_method_name": "add",
                        "target_params": [
                            "postAuthorize"
                        ],
                        "usage": "expressions.add(postAuthorize.value())"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "postAuthorize.value()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "authorizeReturnObjectScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "clazz"
                        ],
                        "usage": "this.authorizeReturnObjectScanner.scan(method,clazz)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizeReturnObjectScanner"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressions",
                        "target_method_name": "addAll",
                        "target_params": [
                            "extractSecurityExpressions"
                        ],
                        "usage": "expressions.addAll(extractSecurityExpressions(method.getReturnType()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "extractBeanNames",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "rawExpression",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.spel.standard.SpelExpressionParser",
                        "target_name": "expressionParser",
                        "target_method_name": "parseRaw",
                        "target_params": [
                            "rawExpression"
                        ],
                        "usage": "this.expressionParser.parseRaw(rawExpression)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionParser"
                    },
                    {
                        "target_type": null,
                        "target_name": "expression",
                        "target_method_name": "getAST",
                        "target_params": [],
                        "usage": "expression.getAST()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveBeanNames",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "beanNames",
                        "param_type": "java.util.Set"
                    },
                    {
                        "param_name": "node",
                        "param_type": "org.springframework.expression.spel.SpelNode"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "beanNames",
                        "target_method_name": "add",
                        "target_params": [
                            "br"
                        ],
                        "usage": "beanNames.add(br.getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": "br",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "br.getName()"
                    },
                    {
                        "target_type": "org.springframework.expression.spel.SpelNode",
                        "target_name": "node",
                        "target_method_name": "getChildCount",
                        "target_params": [],
                        "usage": "node.getChildCount()"
                    },
                    {
                        "target_type": "org.springframework.expression.spel.SpelNode",
                        "target_name": "node",
                        "target_method_name": "getChild",
                        "target_params": [
                            "i"
                        ],
                        "usage": "node.getChild(i)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(PreAuthorize.class)",
            "SecurityAnnotationScanners.requireUnique(PostAuthorize.class)",
            "SecurityAnnotationScanners.requireUnique(AuthorizeReturnObject.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Arrays",
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.aot.hint.MemberCategory",
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.aot.hint.TypeReference",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.expression.spel.SpelNode",
            "org.springframework.expression.spel.ast.BeanReference",
            "org.springframework.expression.spel.standard.SpelExpression",
            "org.springframework.expression.spel.standard.SpelExpressionParser",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.authorization.method.AuthorizeReturnObject",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.aot.hint.PrePostAuthorizeHintsRegistrar": {
        "type": "class",
        "class_name": "PrePostAuthorizeHintsRegistrar",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.security.aot.hint.SecurityHintsRegistrar"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "stream",
                        "target_params": [
                            "beanFactory"
                        ],
                        "usage": "Arrays.stream(beanFactory.getBeanDefinitionNames()).map((beanName)->RegisteredBean.of(beanFactory,beanName).getBeanClass()).collect(Collectors.toList())"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "stream",
                        "target_params": [
                            "beanFactory"
                        ],
                        "usage": "Arrays.stream(beanFactory.getBeanDefinitionNames()).map((beanName)->RegisteredBean.of(beanFactory,beanName).getBeanClass())"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "stream",
                        "target_params": [
                            "beanFactory"
                        ],
                        "usage": "Arrays.stream(beanFactory.getBeanDefinitionNames())"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBeanDefinitionNames",
                        "target_params": [],
                        "usage": "beanFactory.getBeanDefinitionNames()"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.support.RegisteredBean",
                        "target_name": "RegisteredBean",
                        "target_method_name": "of",
                        "target_params": [
                            "beanFactory",
                            "beanName"
                        ],
                        "usage": "RegisteredBean.of(beanFactory,beanName).getBeanClass()"
                    },
                    {
                        "target_type": "org.springframework.beans.factory.support.RegisteredBean",
                        "target_name": "RegisteredBean",
                        "target_method_name": "of",
                        "target_params": [
                            "beanFactory",
                            "beanName"
                        ],
                        "usage": "RegisteredBean.of(beanFactory,beanName)"
                    },
                    {
                        "target_type": "java.util.stream.Collectors",
                        "target_name": "Collectors",
                        "target_method_name": "toList",
                        "target_params": [],
                        "usage": "Collectors.toList()"
                    },
                    {
                        "target_type": "org.springframework.security.aot.hint.PrePostAuthorizeHintsRegistrar",
                        "target_name": "this",
                        "target_method_name": "newPrePostAuthorizeExpressionBeanHintsRegistrar",
                        "target_params": [
                            "beans.registerHints"
                        ],
                        "usage": "newPrePostAuthorizeExpressionBeanHintsRegistrar(beans).registerHints(hints,beanFactory)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.stream.Collectors",
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.beans.factory.support.RegisteredBean",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.access.prepost.PreAuthorize"
        ]
    },
    "org.springframework.security.aot.hint.SecurityHintsAotProcessor": {
        "type": "class",
        "class_name": "SecurityHintsAotProcessor",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "processAheadOfTime",
                "return_type": "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution",
                "formal_params": [
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.aot.generate.GenerationContext",
            "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution",
            "org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor",
            "org.springframework.beans.factory.aot.BeanFactoryInitializationCode",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
        ]
    },
    "org.springframework.security.aot.hint.AuthorizationProxyFactoryAotContribution": {
        "type": "class",
        "class_name": "AuthorizationProxyFactoryAotContribution",
        "class_type": "class",
        "package": "org.springframework.security.aot.hint",
        "implementz": [
            "org.springframework.security.aot.hint.BeanFactoryInitializationAotContribution"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "beanFactory",
                "field_type": "org.springframework.security.aot.hint.ConfigurableListableBeanFactory",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationProxyFactoryAotContribution",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.security.aot.hint.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "applyTo",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.aot.hint.GenerationContext"
                    },
                    {
                        "param_name": "code",
                        "param_type": "org.springframework.security.aot.hint.BeanFactoryInitializationCode"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.aot.hint.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBeanProvider",
                        "target_params": [
                            "SecurityHintsRegistrar"
                        ],
                        "usage": "this.beanFactory.getBeanProvider(SecurityHintsRegistrar.class).forEach((provider)->provider.registerHints(context.getRuntimeHints(),this.beanFactory))"
                    },
                    {
                        "target_type": "org.springframework.security.aot.hint.ConfigurableListableBeanFactory",
                        "target_name": "beanFactory",
                        "target_method_name": "getBeanProvider",
                        "target_params": [
                            "SecurityHintsRegistrar"
                        ],
                        "usage": "this.beanFactory.getBeanProvider(SecurityHintsRegistrar.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "registerHints",
                        "target_params": [
                            "context"
                        ],
                        "usage": "provider.registerHints(context.getRuntimeHints(),this.beanFactory)"
                    },
                    {
                        "target_type": "org.springframework.security.aot.hint.GenerationContext",
                        "target_name": "context",
                        "target_method_name": "getRuntimeHints",
                        "target_params": [],
                        "usage": "context.getRuntimeHints()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.beanFactory"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.aot.hint.SecurityHintsRegistrar": {
        "type": "interface",
        "class_name": "SecurityHintsRegistrar",
        "class_type": "interface",
        "package": "org.springframework.security.aot.hint",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "registerHints",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hints",
                        "param_type": "org.springframework.aot.hint.RuntimeHints"
                    },
                    {
                        "param_name": "beanFactory",
                        "param_type": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.aot.hint.RuntimeHints",
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
        ]
    },
    "org.springframework.security.authentication.AbstractAuthenticationToken": {
        "type": "class",
        "class_name": "AbstractAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.Authentication,CredentialsContainer"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.Collection",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "details",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticated",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "a",
                            "\"Authorities collection cannot contain any null elements\""
                        ],
                        "usage": "Assert.notNull(a,\"Authorities collection cannot contain any null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableList",
                        "target_params": [
                            "newArrayList<>"
                        ],
                        "usage": "Collections.unmodifiableList(newArrayList<>(authorities))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getName",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "userDetails",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "userDetails.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticatedPrincipal",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authenticatedPrincipal.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "principal",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "principal.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getPrincipal",
                        "target_params": [
                            ".toString"
                        ],
                        "usage": "this.getPrincipal().toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticated"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticated",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticated",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticated"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDetails",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDetails",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "details",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "eraseCredentials",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "eraseSecret",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "secret",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "container",
                        "target_method_name": "eraseCredentials",
                        "target_params": [],
                        "usage": "container.eraseCredentials()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "authorities",
                        "target_method_name": "equals",
                        "target_params": [
                            "test"
                        ],
                        "usage": "this.authorities.equals(test.authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "test.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "test.getDetails()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "test.getDetails()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "details",
                        "target_method_name": "equals",
                        "target_params": [
                            "test"
                        ],
                        "usage": "this.details.equals(test.getDetails())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.details"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "test.getDetails()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "test.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getCredentials",
                        "target_params": [
                            ".equals"
                        ],
                        "usage": "this.getCredentials().equals(test.getCredentials())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "test.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "test.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getPrincipal",
                        "target_params": [
                            ".equals"
                        ],
                        "usage": "this.getPrincipal().equals(test.getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "test.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.isAuthenticated()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "isAuthenticated",
                        "target_params": [],
                        "usage": "test.isAuthenticated()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "authority.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getPrincipal",
                        "target_params": [
                            ".hashCode"
                        ],
                        "usage": "this.getPrincipal().hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getCredentials",
                        "target_params": [
                            ".hashCode"
                        ],
                        "usage": "this.getCredentials().hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getDetails()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getDetails",
                        "target_params": [
                            ".hashCode"
                        ],
                        "usage": "this.getDetails().hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getDetails()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.isAuthenticated()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getSimpleName()).append(\" [\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getSimpleName())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractAuthenticationToken",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Principal=\""
                        ],
                        "usage": "sb.append(\"Principal=\").append(getPrincipal()).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Principal=\""
                        ],
                        "usage": "sb.append(\"Principal=\").append(getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Principal=\""
                        ],
                        "usage": "sb.append(\"Principal=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Credentials=[PROTECTED]",
                            " \""
                        ],
                        "usage": "sb.append(\"Credentials=[PROTECTED], \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authenticated=\""
                        ],
                        "usage": "sb.append(\"Authenticated=\").append(isAuthenticated()).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authenticated=\""
                        ],
                        "usage": "sb.append(\"Authenticated=\").append(isAuthenticated())"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authenticated=\""
                        ],
                        "usage": "sb.append(\"Authenticated=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Details=\""
                        ],
                        "usage": "sb.append(\"Details=\").append(getDetails()).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Details=\""
                        ],
                        "usage": "sb.append(\"Details=\").append(getDetails())"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Details=\""
                        ],
                        "usage": "sb.append(\"Details=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Granted Authorities=\""
                        ],
                        "usage": "sb.append(\"Granted Authorities=\").append(this.authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Granted Authorities=\""
                        ],
                        "usage": "sb.append(\"Granted Authorities=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"]\""
                        ],
                        "usage": "sb.append(\"]\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.security.Principal",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "org.springframework.security.core.AuthenticatedPrincipal",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.CredentialsContainer",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager": {
        "type": "class",
        "class_name": "AbstractUserDetailsReactiveAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.ReactiveAuthenticationManager,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "passwordEncoder",
                "field_type": "org.springframework.security.crypto.password.PasswordEncoder",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsPasswordService",
                "field_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "scheduler",
                "field_type": "reactor.core.scheduler.Scheduler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "preAuthenticationChecks",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAuthenticationChecks",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "compromisedPasswordChecker",
                "field_type": "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "defaultPreAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"User account is locked\""
                        ],
                        "usage": "this.logger.debug(\"User account is locked\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.locked\",\"User account is locked\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"User account is disabled\""
                        ],
                        "usage": "this.logger.debug(\"User account is disabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.disabled\",\"User is disabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"User account is expired\""
                        ],
                        "usage": "this.logger.debug(\"User account is expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.expired\",\"User account has expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "defaultPostAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"User account credentials have expired\""
                        ],
                        "usage": "this.logger.debug(\"User account credentials have expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.credentialsExpired\",\"User credentials have expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())).switchIfEmpty(Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\")))).flatMap((userDetails)->checkCompromisedPassword(presentedPassword).thenReturn(userDetails)).flatMap((userDetails)->upgradeEncodingIfNecessary(userDetails,presentedPassword)).doOnNext(this.postAuthenticationChecks::check).map(this::createUsernamePasswordAuthenticationToken)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())).switchIfEmpty(Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\")))).flatMap((userDetails)->checkCompromisedPassword(presentedPassword).thenReturn(userDetails)).flatMap((userDetails)->upgradeEncodingIfNecessary(userDetails,presentedPassword)).doOnNext(this.postAuthenticationChecks::check)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())).switchIfEmpty(Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\")))).flatMap((userDetails)->checkCompromisedPassword(presentedPassword).thenReturn(userDetails)).flatMap((userDetails)->upgradeEncodingIfNecessary(userDetails,presentedPassword))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())).switchIfEmpty(Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\")))).flatMap((userDetails)->checkCompromisedPassword(presentedPassword).thenReturn(userDetails))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())).switchIfEmpty(Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\"))))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler).filter((userDetails)->this.passwordEncoder.matches(presentedPassword,userDetails.getPassword()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check).publishOn(this.scheduler)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "retrieveUser",
                        "target_params": [
                            "username.doOnNext"
                        ],
                        "usage": "retrieveUser(username).doOnNext(this.preAuthenticationChecks::check)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthenticationChecks"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scheduler"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.password.PasswordEncoder",
                        "target_name": "passwordEncoder",
                        "target_method_name": "matches",
                        "target_params": [
                            "presentedPassword",
                            "userDetails"
                        ],
                        "usage": "this.passwordEncoder.matches(presentedPassword,userDetails.getPassword())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": null,
                        "target_name": "userDetails",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userDetails.getPassword()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->Mono.error(newBadCredentialsException(\"Invalid Credentials\")))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "newBadCredentialsException"
                        ],
                        "usage": "Mono.error(newBadCredentialsException(\"Invalid Credentials\"))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
                        "target_name": "this",
                        "target_method_name": "checkCompromisedPassword",
                        "target_params": [
                            "presentedPassword.thenReturn"
                        ],
                        "usage": "checkCompromisedPassword(presentedPassword).thenReturn(userDetails)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "checkCompromisedPassword",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker",
                        "target_name": "compromisedPasswordChecker",
                        "target_method_name": "check",
                        "target_params": [
                            "password"
                        ],
                        "usage": "this.compromisedPasswordChecker.check(password).filter(CompromisedPasswordDecision::isCompromised).flatMap((compromised)->Mono.error(newCompromisedPasswordException(\"The provided password is compromised, please change your password\")))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker",
                        "target_name": "compromisedPasswordChecker",
                        "target_method_name": "check",
                        "target_params": [
                            "password"
                        ],
                        "usage": "this.compromisedPasswordChecker.check(password).filter(CompromisedPasswordDecision::isCompromised)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker",
                        "target_name": "compromisedPasswordChecker",
                        "target_method_name": "check",
                        "target_params": [
                            "password"
                        ],
                        "usage": "this.compromisedPasswordChecker.check(password)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "newCompromisedPasswordException"
                        ],
                        "usage": "Mono.error(newCompromisedPasswordException(\"The provided password is compromised, please change your password\"))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "upgradeEncodingIfNecessary",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "presentedPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.password.PasswordEncoder",
                        "target_name": "passwordEncoder",
                        "target_method_name": "upgradeEncoding",
                        "target_params": [
                            "userDetails"
                        ],
                        "usage": "this.passwordEncoder.upgradeEncoding(userDetails.getPassword())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userDetails.getPassword()"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.password.PasswordEncoder",
                        "target_name": "passwordEncoder",
                        "target_method_name": "encode",
                        "target_params": [
                            "presentedPassword"
                        ],
                        "usage": "this.passwordEncoder.encode(presentedPassword)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService",
                        "target_name": "userDetailsPasswordService",
                        "target_method_name": "updatePassword",
                        "target_params": [
                            "userDetails",
                            "newPassword"
                        ],
                        "usage": "this.userDetailsPasswordService.updatePassword(userDetails,newPassword)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "userDetails"
                        ],
                        "usage": "Mono.just(userDetails)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUsernamePasswordAuthenticationToken",
                "return_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "userDetails",
                            "userDetails"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.authenticated(userDetails,userDetails.getPassword(),userDetails.getAuthorities())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userDetails.getPassword()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "userDetails.getAuthorities()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPasswordEncoder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "passwordEncoder",
                        "param_type": "org.springframework.security.crypto.password.PasswordEncoder"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "passwordEncoder",
                            "\"passwordEncoder cannot be null\""
                        ],
                        "usage": "Assert.notNull(passwordEncoder,\"passwordEncoder cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setScheduler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "scheduler",
                        "param_type": "reactor.core.scheduler.Scheduler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "scheduler",
                            "\"scheduler cannot be null\""
                        ],
                        "usage": "Assert.notNull(scheduler,\"scheduler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserDetailsPasswordService",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userDetailsPasswordService",
                        "param_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPostAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "postAuthenticationChecks",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsChecker"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "postAuthenticationChecks",
                            "\"postAuthenticationChecks cannot be null\""
                        ],
                        "usage": "Assert.notNull(this.postAuthenticationChecks,\"postAuthenticationChecks cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messageSource",
                            "\"messageSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(messageSource,\"messageSource cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCompromisedPasswordChecker",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "compromisedPasswordChecker",
                        "param_type": "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "retrieveUser",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SpringSecurityMessageSource.getAccessor()",
            "PasswordEncoderFactories.createDelegatingPasswordEncoder()",
            "Schedulers.boundedElastic()"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "reactor.core.publisher.Mono",
            "reactor.core.scheduler.Scheduler",
            "reactor.core.scheduler.Schedulers",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.authentication.password.CompromisedPasswordChecker",
            "org.springframework.security.authentication.password.CompromisedPasswordDecision",
            "org.springframework.security.authentication.password.CompromisedPasswordException",
            "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsChecker",
            "org.springframework.security.crypto.factory.PasswordEncoderFactories",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AccountExpiredException": {
        "type": "class",
        "class_name": "AccountExpiredException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AccountStatusException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AccountExpiredException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AccountExpiredException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authentication.AccountStatusException": {
        "type": "class",
        "class_name": "AccountStatusException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AccountStatusException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AccountStatusException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AccountStatusUserDetailsChecker": {
        "type": "class",
        "class_name": "AccountStatusUserDetailsChecker",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.UserDetailsChecker,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since user account is locked\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since user account is locked\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AccountStatusUserDetailsChecker"
                        ],
                        "usage": "this.messages.getMessage(\"AccountStatusUserDetailsChecker.locked\",\"User account is locked\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since user account is disabled\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since user account is disabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AccountStatusUserDetailsChecker"
                        ],
                        "usage": "this.messages.getMessage(\"AccountStatusUserDetailsChecker.disabled\",\"User is disabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since user account is expired\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since user account is expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AccountStatusUserDetailsChecker"
                        ],
                        "usage": "this.messages.getMessage(\"AccountStatusUserDetailsChecker.expired\",\"User account has expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since user account credentials have expired\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since user account credentials have expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AccountStatusUserDetailsChecker"
                        ],
                        "usage": "this.messages.getMessage(\"AccountStatusUserDetailsChecker.credentialsExpired\",\"User credentials have expired\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messageSource",
                            "\"messageSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(messageSource,\"messageSource cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsChecker",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AnonymousAuthenticationProvider": {
        "type": "class",
        "class_name": "AnonymousAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationProvider,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "key",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AnonymousAuthenticationProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "key",
                            "\"A Key is required\""
                        ],
                        "usage": "Assert.hasLength(key,\"A Key is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((AnonymousAuthenticationToken)authentication).getKeyHash()"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AnonymousAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AnonymousAuthenticationProvider.incorrectKey\",\"The presented AnonymousAuthenticationToken does not contain the expected key\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messageSource",
                            "\"messageSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(messageSource,\"messageSource cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AnonymousAuthenticationToken": {
        "type": "class",
        "class_name": "AnonymousAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "java.io.Serializable"
        ],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "keyHash",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AnonymousAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AnonymousAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "keyHash",
                        "param_type": "java.lang.Integer"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "principal!=null&&!\"\""
                        ],
                        "usage": "Assert.isTrue(principal!=null&&!\"\".equals(principal),\"principal cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "\"\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "principal"
                        ],
                        "usage": "\"\".equals(principal)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null or empty\""
                        ],
                        "usage": "Assert.notEmpty(authorities,\"authorities cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "extractKeyHash",
                "return_type": "java.lang.Integer",
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "key",
                            "\"key cannot be empty or null\""
                        ],
                        "usage": "Assert.hasLength(key,\"key cannot be empty or null\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "key.hashCode()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "equals",
                        "target_params": [
                            "obj"
                        ],
                        "usage": "super.equals(obj)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getKeyHash()"
                    },
                    {
                        "target_type": null,
                        "target_name": "test",
                        "target_method_name": "getKeyHash",
                        "target_params": [],
                        "usage": "test.getKeyHash()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "super.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getKeyHash",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException": {
        "type": "class",
        "class_name": "AuthenticationCredentialsNotFoundException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationCredentialsNotFoundException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthenticationCredentialsNotFoundException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AuthenticationDetailsSource": {
        "type": "interface",
        "class_name": "AuthenticationDetailsSource",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "buildDetails",
                "return_type": "org.springframework.security.authentication.T",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.C"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.AuthenticationEventPublisher": {
        "type": "interface",
        "class_name": "AuthenticationEventPublisher",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "publishAuthenticationSuccess",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishAuthenticationFailure",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AuthenticationManager": {
        "type": "interface",
        "class_name": "AuthenticationManager",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AuthenticationManagerResolver": {
        "type": "interface",
        "class_name": "AuthenticationManagerResolver",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "resolve",
                "return_type": "org.springframework.security.authentication.AuthenticationManager",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.C"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.AuthenticationObservationContext": {
        "type": "class",
        "class_name": "AuthenticationObservationContext",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.Observation.Context",
        "fields": [
            {
                "type": "field",
                "field_name": "authenticationRequest",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationManager",
                "field_type": "java.lang.Class",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationResult",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthenticationRequest",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationRequest"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationRequest",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationRequest",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationRequest",
                            "\"authenticationRequest cannot be null\""
                        ],
                        "usage": "Assert.notNull(authenticationRequest,\"authenticationRequest cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationRequest"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationResult",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationResult"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationResult",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationResult",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationResult"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationManagerClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationManagerClass",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationManagerClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationManagerClass",
                            "\"authenticationManagerClass class cannot be null\""
                        ],
                        "usage": "Assert.notNull(authenticationManagerClass,\"authenticationManagerClass class cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.AuthenticationObservationConvention": {
        "type": "class",
        "class_name": "AuthenticationObservationConvention",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "io.micrometer.observation.ObservationConvention"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "OBSERVATION_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getName",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getContextualName",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "endsWith",
                        "target_params": [
                            "\"Token\""
                        ],
                        "usage": "authenticationType.endsWith(\"Token\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "substring",
                        "target_params": [
                            "0",
                            "authenticationType"
                        ],
                        "usage": "authenticationType.substring(0,authenticationType.lastIndexOf(\"Token\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "lastIndexOf",
                        "target_params": [
                            "\"Token\""
                        ],
                        "usage": "authenticationType.lastIndexOf(\"Token\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "endsWith",
                        "target_params": [
                            "\"Authentication\""
                        ],
                        "usage": "authenticationType.endsWith(\"Authentication\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "substring",
                        "target_params": [
                            "0",
                            "authenticationType"
                        ],
                        "usage": "authenticationType.substring(0,authenticationType.lastIndexOf(\"Authentication\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "lastIndexOf",
                        "target_params": [
                            "\"Authentication\""
                        ],
                        "usage": "authenticationType.lastIndexOf(\"Authentication\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticationType",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "authenticationType.toLowerCase(Locale.ENGLISH)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLowCardinalityKeyValues",
                "return_type": "io.micrometer.common.KeyValues",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"authentication"
                        ],
                        "usage": "KeyValues.of(\"authentication.request.type\",getAuthenticationType(context)).and(\"authentication.method\",getAuthenticationMethod(context)).and(\"authentication.result.type\",getAuthenticationResult(context)).and(\"authentication.failure.type\",getAuthenticationFailureType(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"authentication"
                        ],
                        "usage": "KeyValues.of(\"authentication.request.type\",getAuthenticationType(context)).and(\"authentication.method\",getAuthenticationMethod(context)).and(\"authentication.result.type\",getAuthenticationResult(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"authentication"
                        ],
                        "usage": "KeyValues.of(\"authentication.request.type\",getAuthenticationType(context)).and(\"authentication.method\",getAuthenticationMethod(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"authentication"
                        ],
                        "usage": "KeyValues.of(\"authentication.request.type\",getAuthenticationType(context))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationType",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationRequest",
                        "target_params": [],
                        "usage": "context.getAuthenticationRequest()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationMethod",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationManagerClass",
                        "target_params": [],
                        "usage": "context.getAuthenticationManagerClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationManagerClass",
                        "target_params": [],
                        "usage": "context.getAuthenticationManagerClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationManagerClass",
                        "target_params": [],
                        "usage": "context.getAuthenticationManagerClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationResult",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationResult",
                        "target_params": [],
                        "usage": "context.getAuthenticationResult()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationResult",
                        "target_params": [],
                        "usage": "context.getAuthenticationResult().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationResult",
                        "target_params": [],
                        "usage": "context.getAuthenticationResult().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthenticationResult",
                        "target_params": [],
                        "usage": "context.getAuthenticationResult()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthenticationFailureType",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.AuthenticationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getError",
                        "target_params": [],
                        "usage": "context.getError()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getError",
                        "target_params": [],
                        "usage": "context.getError().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getError",
                        "target_params": [],
                        "usage": "context.getError().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getError",
                        "target_params": [],
                        "usage": "context.getError()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supportsContext",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.Observation.Context"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Locale",
            "io.micrometer.common.KeyValues",
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "org.jetbrains.annotations.NotNull",
            "org.springframework.lang.NonNull"
        ]
    },
    "org.springframework.security.authentication.AuthenticationProvider": {
        "type": "interface",
        "class_name": "AuthenticationProvider",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AuthenticationServiceException": {
        "type": "class",
        "class_name": "AuthenticationServiceException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthenticationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.AuthenticationTrustResolver": {
        "type": "interface",
        "class_name": "AuthenticationTrustResolver",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isAnonymous",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isRememberMe",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isFullyAuthenticated",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAuthenticated",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "isAuthenticated",
                        "target_params": [],
                        "usage": "authentication.isAuthenticated()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.AuthenticationTrustResolverImpl": {
        "type": "class",
        "class_name": "AuthenticationTrustResolverImpl",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationTrustResolver"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "anonymousClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rememberMeClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getAnonymousClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.anonymousClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRememberMeClass",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rememberMeClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAnonymous",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.anonymousClass"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "anonymousClass",
                        "target_method_name": "isAssignableFrom",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.anonymousClass.isAssignableFrom(authentication.getClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.anonymousClass"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isRememberMe",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rememberMeClass"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "rememberMeClass",
                        "target_method_name": "isAssignableFrom",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.rememberMeClass.isAssignableFrom(authentication.getClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rememberMeClass"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAnonymousClass",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "anonymousClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.anonymousClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRememberMeClass",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rememberMeClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rememberMeClass"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.BadCredentialsException": {
        "type": "class",
        "class_name": "BadCredentialsException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "BadCredentialsException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "BadCredentialsException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.CachingUserDetailsService": {
        "type": "class",
        "class_name": "CachingUserDetailsService",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.core.userdetails.UserDetailsService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "userCache",
                "field_type": "org.springframework.security.core.userdetails.UserCache",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CachingUserDetailsService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUserCache",
                "return_type": "org.springframework.security.core.userdetails.UserCache",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userCache",
                        "param_type": "org.springframework.security.core.userdetails.UserCache"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUserByUsername",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "getUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.getUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsService",
                        "target_name": "delegate",
                        "target_method_name": "loadUserByUsername",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.delegate.loadUserByUsername(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "user",
                            ""
                        ],
                        "usage": "Assert.notNull(user,()->\"UserDetailsService \"+this.delegate+\" returned null for username \"+username+\". \"+\"This is an interface contract violation\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "putUserInCache",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.userCache.putUserInCache(user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.userdetails.UserCache",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.cache.NullUserCache",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.CredentialsExpiredException": {
        "type": "class",
        "class_name": "CredentialsExpiredException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AccountStatusException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CredentialsExpiredException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "CredentialsExpiredException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authentication.DefaultAuthenticationEventPublisher": {
        "type": "class",
        "class_name": "DefaultAuthenticationEventPublisher",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationEventPublisher,ApplicationEventPublisherAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "applicationEventPublisher",
                "field_type": "org.springframework.context.ApplicationEventPublisher",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "exceptionMappings",
                "field_type": "java.util.HashMap",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultAuthenticationFailureEventConstructor",
                "field_type": "java.lang.reflect.Constructor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultAuthenticationEventPublisher",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DefaultAuthenticationEventPublisher",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "applicationEventPublisher",
                        "param_type": "org.springframework.context.ApplicationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishAuthenticationSuccess",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "applicationEventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "newAuthenticationSuccessEvent"
                        ],
                        "usage": "this.applicationEventPublisher.publishEvent(newAuthenticationSuccessEvent(authentication))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishAuthenticationFailure",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "constructor",
                        "target_method_name": "newInstance",
                        "target_params": [
                            "authentication",
                            "exception"
                        ],
                        "usage": "constructor.newInstance(authentication,exception)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "applicationEventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "event"
                        ],
                        "usage": "this.applicationEventPublisher.publishEvent(event)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"No event was found for the exception \"+exception"
                        ],
                        "usage": "this.logger.debug(\"No event was found for the exception \"+exception.getClass().getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.security.core.AuthenticationException",
                        "target_name": "exception",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "exception.getClass().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.core.AuthenticationException",
                        "target_name": "exception",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "exception.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getEventConstructor",
                "return_type": "java.lang.reflect.Constructor",
                "formal_params": [
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.HashMap",
                        "target_name": "exceptionMappings",
                        "target_method_name": "get",
                        "target_params": [
                            "exception"
                        ],
                        "usage": "this.exceptionMappings.get(exception.getClass().getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exceptionMappings"
                    },
                    {
                        "target_type": "org.springframework.security.core.AuthenticationException",
                        "target_name": "exception",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "exception.getClass().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.core.AuthenticationException",
                        "target_name": "exception",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "exception.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultAuthenticationFailureEventConstructor"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "applicationEventPublisher",
                        "param_type": "org.springframework.context.ApplicationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAdditionalExceptionMappings",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "additionalExceptionMappings",
                        "param_type": "java.util.Properties"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "additionalExceptionMappings",
                            "\"The exceptionMappings object must not be null\""
                        ],
                        "usage": "Assert.notNull(additionalExceptionMappings,\"The exceptionMappings object must not be null\")"
                    },
                    {
                        "target_type": "java.util.Properties",
                        "target_name": "additionalExceptionMappings",
                        "target_method_name": "keySet",
                        "target_params": [],
                        "usage": "additionalExceptionMappings.keySet()"
                    },
                    {
                        "target_type": "java.util.Properties",
                        "target_name": "additionalExceptionMappings",
                        "target_method_name": "get",
                        "target_params": [
                            "exceptionClass"
                        ],
                        "usage": "additionalExceptionMappings.get(exceptionClass)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.DefaultAuthenticationEventPublisher",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getClassLoader"
                        ],
                        "usage": "getClass().getClassLoader().loadClass(eventClass)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.DefaultAuthenticationEventPublisher",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getClassLoader"
                        ],
                        "usage": "getClass().getClassLoader()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isAssignable",
                        "target_params": [
                            "AbstractAuthenticationFailureEvent"
                        ],
                        "usage": "Assert.isAssignable(AbstractAuthenticationFailureEvent.class,clazz)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAdditionalExceptionMappings",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "mappings",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "mappings",
                            "\"The mappings Map must not be empty nor null\""
                        ],
                        "usage": "Assert.notEmpty(mappings,\"The mappings Map must not be empty nor null\")"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "mappings",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "mappings.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "exceptionClass",
                            "\"exceptionClass cannot be null\""
                        ],
                        "usage": "Assert.notNull(exceptionClass,\"exceptionClass cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "eventClass",
                            "\"eventClass cannot be null\""
                        ],
                        "usage": "Assert.notNull(eventClass,\"eventClass cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "exceptionClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "exceptionClass.getName()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDefaultAuthenticationFailureEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaultAuthenticationFailureEventClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "defaultAuthenticationFailureEventClass",
                            "\"defaultAuthenticationFailureEventClass must not be null\""
                        ],
                        "usage": "Assert.notNull(defaultAuthenticationFailureEventClass,\"defaultAuthenticationFailureEventClass must not be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultAuthenticationFailureEventConstructor"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "defaultAuthenticationFailureEventClass",
                        "target_method_name": "getConstructor",
                        "target_params": [
                            "Authentication"
                        ],
                        "usage": "defaultAuthenticationFailureEventClass.getConstructor(Authentication.class,AuthenticationException.class)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "defaultAuthenticationFailureEventClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "defaultAuthenticationFailureEventClass.getName()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addMapping",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "exceptionClass",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "eventClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "eventClass",
                        "target_method_name": "getConstructor",
                        "target_params": [
                            "Authentication"
                        ],
                        "usage": "eventClass.getConstructor(Authentication.class,AuthenticationException.class)"
                    },
                    {
                        "target_type": "java.util.HashMap",
                        "target_name": "exceptionMappings",
                        "target_method_name": "put",
                        "target_params": [
                            "exceptionClass",
                            "constructor"
                        ],
                        "usage": "this.exceptionMappings.put(exceptionClass,constructor)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exceptionMappings"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "eventClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "eventClass.getName()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.lang.reflect.Constructor",
            "java.lang.reflect.InvocationTargetException",
            "java.util.HashMap",
            "java.util.Map",
            "java.util.Properties",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.ApplicationEventPublisher",
            "org.springframework.context.ApplicationEventPublisherAware",
            "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
            "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureLockedEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent",
            "org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent",
            "org.springframework.security.authentication.event.AuthenticationSuccessEvent",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.DelegatingReactiveAuthenticationManager": {
        "type": "class",
        "class_name": "DelegatingReactiveAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.ReactiveAuthenticationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "delegates",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "continueOnError",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingReactiveAuthenticationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "entryPoints"
                        ],
                        "usage": "Arrays.asList(entryPoints)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DelegatingReactiveAuthenticationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "entryPoints",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "entryPoints",
                            "\"entryPoints cannot be null\""
                        ],
                        "usage": "Assert.notEmpty(entryPoints,\"entryPoints cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegates"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "fromIterable",
                        "target_params": [
                            "delegates"
                        ],
                        "usage": "Flux.fromIterable(this.delegates)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegates"
                    },
                    {
                        "target_type": null,
                        "target_name": "m",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "m.authenticate(authentication).doOnError(this.logger::debug)"
                    },
                    {
                        "target_type": null,
                        "target_name": "m",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "m.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((this.continueOnError)?result.concatMapDelayError(logging):result.concatMap(logging)).next()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.continueOnError"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "concatMapDelayError",
                        "target_params": [
                            "logging"
                        ],
                        "usage": "result.concatMapDelayError(logging)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "concatMap",
                        "target_params": [
                            "logging"
                        ],
                        "usage": "result.concatMap(logging)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setContinueOnError",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "continueOnError",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.continueOnError"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.util.Arrays",
            "java.util.List",
            "java.util.function.Function",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.DisabledException": {
        "type": "class",
        "class_name": "DisabledException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AccountStatusException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DisabledException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DisabledException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authentication.InsufficientAuthenticationException": {
        "type": "class",
        "class_name": "InsufficientAuthenticationException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InsufficientAuthenticationException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InsufficientAuthenticationException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.InternalAuthenticationServiceException": {
        "type": "class",
        "class_name": "InternalAuthenticationServiceException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AuthenticationServiceException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InternalAuthenticationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "message",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InternalAuthenticationServiceException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "message",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authentication.LockedException": {
        "type": "class",
        "class_name": "LockedException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AccountStatusException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "LockedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "LockedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authentication.ObservationAuthenticationManager": {
        "type": "class",
        "class_name": "ObservationAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "io.micrometer.observation.ObservationRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convention",
                "field_type": "io.micrometer.observation.ObservationConvention",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ObservationAuthenticationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "registry",
                        "param_type": "io.micrometer.observation.ObservationRegistry"
                    },
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "registry",
                            "\"observationRegistry cannot be null\""
                        ],
                        "usage": "Assert.notNull(registry,\"observationRegistry cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"authenticationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"authenticationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationRequest",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "context.setAuthenticationRequest(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationManagerClass",
                        "target_params": [
                            "delegate"
                        ],
                        "usage": "context.setAuthenticationManagerClass(this.delegate.getClass())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.delegate.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).observe(()->{Authenticationresult=this.delegate.authenticate(authentication);context.setAuthenticationResult(result);returnresult;})"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.delegate.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationResult",
                        "target_params": [
                            "result"
                        ],
                        "usage": "context.setAuthenticationResult(result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setObservationConvention",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convention",
                        "param_type": "io.micrometer.observation.ObservationConvention"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "convention",
                            "\"The observation convention cannot be null\""
                        ],
                        "usage": "Assert.notNull(convention,\"The observation convention cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "io.micrometer.observation.ObservationRegistry",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ObservationReactiveAuthenticationManager": {
        "type": "class",
        "class_name": "ObservationReactiveAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.ReactiveAuthenticationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "io.micrometer.observation.ObservationRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convention",
                "field_type": "io.micrometer.observation.ObservationConvention",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ObservationReactiveAuthenticationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "registry",
                        "param_type": "io.micrometer.observation.ObservationRegistry"
                    },
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.authentication.ReactiveAuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationRequest",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "context.setAuthenticationRequest(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationManagerClass",
                        "target_params": [
                            "delegate"
                        ],
                        "usage": "context.setAuthenticationManagerClass(this.delegate.getClass())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.delegate.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [],
                        "usage": "Mono.deferContextual((contextView)->{Observationobservation=Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)).start();returnthis.delegate.authenticate(authentication).doOnSuccess((result)->{context.setAuthenticationResult(result);observation.stop();}).doOnCancel(observation::stop).doOnError((t)->{observation.error(t);observation.stop();});})"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)).start()"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null))"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "contextView",
                        "target_method_name": "getOrDefault",
                        "target_params": [
                            "ObservationThreadLocalAccessor"
                        ],
                        "usage": "contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.delegate.authenticate(authentication).doOnSuccess((result)->{context.setAuthenticationResult(result);observation.stop();}).doOnCancel(observation::stop).doOnError((t)->{observation.error(t);observation.stop();})"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.delegate.authenticate(authentication).doOnSuccess((result)->{context.setAuthenticationResult(result);observation.stop();}).doOnCancel(observation::stop)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.delegate.authenticate(authentication).doOnSuccess((result)->{context.setAuthenticationResult(result);observation.stop();})"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ReactiveAuthenticationManager",
                        "target_name": "delegate",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.delegate.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthenticationResult",
                        "target_params": [
                            "result"
                        ],
                        "usage": "context.setAuthenticationResult(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "stop",
                        "target_params": [],
                        "usage": "observation.stop()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "error",
                        "target_params": [
                            "t"
                        ],
                        "usage": "observation.error(t)"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "stop",
                        "target_params": [],
                        "usage": "observation.stop()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setObservationConvention",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convention",
                        "param_type": "io.micrometer.observation.ObservationConvention"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "convention",
                            "\"The observation convention cannot be null\""
                        ],
                        "usage": "Assert.notNull(convention,\"The observation convention cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "io.micrometer.observation.ObservationRegistry",
            "io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor",
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ProviderManager": {
        "type": "class",
        "class_name": "ProviderManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationManager,MessageSourceAware,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "eventPublisher",
                "field_type": "org.springframework.security.authentication.AuthenticationEventPublisher",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "providers",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "parent",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "eraseCredentialsAfterAuthentication",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ProviderManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "providers"
                        ],
                        "usage": "Arrays.asList(providers)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ProviderManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "providers",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "ProviderManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "providers",
                        "param_type": "java.util.List"
                    },
                    {
                        "param_name": "parent",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "providers",
                            "\"providers list cannot be null\""
                        ],
                        "usage": "Assert.notNull(providers,\"providers list cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parent"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "checkState",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "parent!=null||!providers"
                        ],
                        "usage": "Assert.isTrue(this.parent!=null||!this.providers.isEmpty(),\"A parent AuthenticationManager or a list of AuthenticationProviders is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parent"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "providers",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "this.providers.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!CollectionUtils"
                        ],
                        "usage": "Assert.isTrue(!CollectionUtils.contains(this.providers.iterator(),null),\"providers list cannot contain null values\")"
                    },
                    {
                        "target_type": "org.springframework.util.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "contains",
                        "target_params": [
                            "providers"
                        ],
                        "usage": "CollectionUtils.contains(this.providers.iterator(),null)"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "providers",
                        "target_method_name": "iterator",
                        "target_params": [],
                        "usage": "this.providers.iterator()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "providers",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "this.providers.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "supports",
                        "target_params": [
                            "toTest"
                        ],
                        "usage": "provider.supports(toTest)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isTraceEnabled",
                        "target_params": [],
                        "usage": "logger.isTraceEnabled()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.trace(LogMessage.format(\"Authenticating request with %s (%d/%d)\",provider.getClass().getSimpleName(),++currentPosition,size))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authenticating request with %s"
                        ],
                        "usage": "LogMessage.format(\"Authenticating request with %s (%d/%d)\",provider.getClass().getSimpleName(),++currentPosition,size)"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "provider.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "provider.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "provider.authenticate(authentication)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Authentication failed for user '%s' since their account status is %s\",authentication.getName(),ex.getMessage()),ex)"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authentication failed for user '%s' since their account status is %s\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Authentication failed for user '%s' since their account status is %s\",authentication.getName(),ex.getMessage())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "ex.getMessage()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Authentication service failed internally for user '%s'\",authentication.getName()),ex)"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authentication service failed internally for user '%s'\"",
                            "authentication"
                        ],
                        "usage": "LogMessage.format(\"Authentication service failed internally for user '%s'\",authentication.getName())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Authentication failed with provider %s since %s\",provider.getClass().getSimpleName(),ex.getMessage()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Authentication failed with provider %s since %s\"",
                            "provider"
                        ],
                        "usage": "LogMessage.format(\"Authentication failed with provider %s since %s\",provider.getClass().getSimpleName(),ex.getMessage())"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "provider.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "provider",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "provider.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "ex.getMessage()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parent"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "parent",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.parent.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parent"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eraseCredentialsAfterAuthentication"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((CredentialsContainer)result).eraseCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishAuthenticationSuccess",
                        "target_params": [
                            "result"
                        ],
                        "usage": "this.eventPublisher.publishAuthenticationSuccess(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"ProviderManager"
                        ],
                        "usage": "this.messages.getMessage(\"ProviderManager.providerNotFound\",newObject[]{toTest.getName()},\"No AuthenticationProvider found for {0}\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": null,
                        "target_name": "toTest",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "toTest.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parent"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Denying authentication since all attempted providers failed\""
                        ],
                        "usage": "logger.debug(\"Denying authentication since all attempted providers failed\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "prepareException",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "ex",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    },
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishAuthenticationFailure",
                        "target_params": [
                            "ex",
                            "auth"
                        ],
                        "usage": "this.eventPublisher.publishAuthenticationFailure(ex,auth)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "copyDetails",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "dest",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "dest",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "dest.getDetails()"
                    },
                    {
                        "target_type": null,
                        "target_name": "token",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "source"
                        ],
                        "usage": "token.setDetails(source.getDetails())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "source",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "source.getDetails()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getProviders",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.providers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "eventPublisher",
                        "param_type": "org.springframework.security.authentication.AuthenticationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "eventPublisher",
                            "\"AuthenticationEventPublisher cannot be null\""
                        ],
                        "usage": "Assert.notNull(eventPublisher,\"AuthenticationEventPublisher cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setEraseCredentialsAfterAuthentication",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "eraseSecretData",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eraseCredentialsAfterAuthentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isEraseCredentialsAfterAuthentication",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eraseCredentialsAfterAuthentication"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(ProviderManager.class)",
            "Collections.emptyList()",
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "java.util.Arrays",
            "java.util.Collections",
            "java.util.List",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.CredentialsContainer",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils"
        ]
    },
    "org.springframework.security.authentication.NullEventPublisher": {
        "type": "class",
        "class_name": "NullEventPublisher",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationEventPublisher"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "publishAuthenticationFailure",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.authentication.AuthenticationException"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishAuthenticationSuccess",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.ProviderNotFoundException": {
        "type": "class",
        "class_name": "ProviderNotFoundException",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ProviderNotFoundException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.ReactiveAuthenticationManager": {
        "type": "interface",
        "class_name": "ReactiveAuthenticationManager",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter": {
        "type": "class",
        "class_name": "ReactiveAuthenticationManagerAdapter",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.ReactiveAuthenticationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authenticationManager",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "scheduler",
                "field_type": "reactor.core.scheduler.Scheduler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ReactiveAuthenticationManagerAdapter",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authenticationManager",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationManager",
                            "\"authenticationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authenticationManager,\"authenticationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "token"
                        ],
                        "usage": "Mono.just(token).publishOn(this.scheduler).flatMap(this::doAuthenticate).filter(Authentication::isAuthenticated)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "token"
                        ],
                        "usage": "Mono.just(token).publishOn(this.scheduler).flatMap(this::doAuthenticate)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "token"
                        ],
                        "usage": "Mono.just(token).publishOn(this.scheduler)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "token"
                        ],
                        "usage": "Mono.just(token)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "doAuthenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "authenticationManager"
                        ],
                        "usage": "Mono.just(this.authenticationManager.authenticate(authentication))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "authenticationManager",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authenticationManager.authenticate(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "Mono.error(ex)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setScheduler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "scheduler",
                        "param_type": "reactor.core.scheduler.Scheduler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "scheduler",
                            "\"scheduler cannot be null\""
                        ],
                        "usage": "Assert.notNull(scheduler,\"scheduler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scheduler"
                    }
                ]
            }
        ],
        "methodCalls": [
            "Schedulers.boundedElastic()"
        ],
        "imports": [
            "reactor.core.publisher.Mono",
            "reactor.core.scheduler.Scheduler",
            "reactor.core.scheduler.Schedulers",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ReactiveAuthenticationManagerResolver": {
        "type": "interface",
        "class_name": "ReactiveAuthenticationManagerResolver",
        "class_type": "interface",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "resolve",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authentication.C"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.authentication.RememberMeAuthenticationProvider": {
        "type": "class",
        "class_name": "RememberMeAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationProvider,InitializingBean,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "key",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RememberMeAuthenticationProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "key",
                            "\"key must have a length\""
                        ],
                        "usage": "Assert.hasLength(key,\"key must have a length\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messages",
                            "\"A message source must be set\""
                        ],
                        "usage": "Assert.notNull(this.messages,\"A message source must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "authentication.getClass()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((RememberMeAuthenticationToken)authentication).getKeyHash()"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"RememberMeAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"RememberMeAuthenticationProvider.incorrectKey\",\"The presented RememberMeAuthenticationToken does not contain the expected key\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.RememberMeAuthenticationToken": {
        "type": "class",
        "class_name": "RememberMeAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "keyHash",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RememberMeAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "\"\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "key"
                        ],
                        "usage": "\"\".equals(key)"
                    },
                    {
                        "target_type": null,
                        "target_name": "\"\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "principal"
                        ],
                        "usage": "\"\".equals(principal)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "RememberMeAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "keyHash",
                        "param_type": "java.lang.Integer"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getKeyHash",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "equals",
                        "target_params": [
                            "obj"
                        ],
                        "usage": "super.equals(obj)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getKeyHash()"
                    },
                    {
                        "target_type": null,
                        "target_name": "other",
                        "target_method_name": "getKeyHash",
                        "target_params": [],
                        "usage": "other.getKeyHash()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "super.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyHash"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion"
        ]
    },
    "org.springframework.security.authentication.TestingAuthenticationProvider": {
        "type": "class",
        "class_name": "TestingAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationProvider"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.TestingAuthenticationToken": {
        "type": "class",
        "class_name": "TestingAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "credentials",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "TestingAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "TestingAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.authority.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "createAuthorityList",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "AuthorityUtils.createAuthorityList(authorities)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "TestingAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "TestingAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.List",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils"
        ]
    },
    "org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager": {
        "type": "class",
        "class_name": "UserDetailsRepositoryReactiveAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager",
        "fields": [
            {
                "type": "field",
                "field_name": "userDetailsService",
                "field_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UserDetailsRepositoryReactiveAuthenticationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"userDetailsService cannot be null\""
                        ],
                        "usage": "Assert.notNull(userDetailsService,\"userDetailsService cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "retrieveUser",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
                        "target_name": "userDetailsService",
                        "target_method_name": "findByUsername",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userDetailsService.findByUsername(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.UsernamePasswordAuthenticationToken": {
        "type": "class",
        "class_name": "UsernamePasswordAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "credentials",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UsernamePasswordAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "UsernamePasswordAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "setAuthenticated",
                        "target_params": [
                            "true"
                        ],
                        "usage": "super.setAuthenticated(true)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "unauthenticated",
                "return_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "authenticated",
                "return_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticated",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "isAuthenticated",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!isAuthenticated",
                            "\"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead\""
                        ],
                        "usage": "Assert.isTrue(!isAuthenticated,\"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "setAuthenticated",
                        "target_params": [
                            "false"
                        ],
                        "usage": "super.setAuthenticated(false)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "eraseCredentials",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "eraseCredentials",
                        "target_params": [],
                        "usage": "super.eraseCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentials"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider": {
        "type": "class",
        "class_name": "AbstractUserDetailsAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.dao",
        "implementz": [
            "org.springframework.security.authentication.dao.AuthenticationProvider,InitializingBean,MessageSourceAware"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userCache",
                "field_type": "org.springframework.security.core.userdetails.UserCache",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "forcePrincipalAsString",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "hideUserNotFoundExceptions",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "preAuthenticationChecks",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAuthenticationChecks",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authoritiesMapper",
                "field_type": "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "additionalAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userCache",
                            "\"A user cache must be set\""
                        ],
                        "usage": "Assert.notNull(this.userCache,\"A user cache must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messages",
                            "\"A message source must be set\""
                        ],
                        "usage": "Assert.notNull(this.messages,\"A message source must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isInstanceOf",
                        "target_params": [
                            "UsernamePasswordAuthenticationToken"
                        ],
                        "usage": "Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class,authentication,()->this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.onlySupports\",\"Only UsernamePasswordAuthenticationToken is supported\"))"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.onlySupports\",\"Only UsernamePasswordAuthenticationToken is supported\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "getUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.getUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Failed to find user '%s'\",username))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Failed to find user '%s'\"",
                            "username"
                        ],
                        "usage": "LogMessage.format(\"Failed to find user '%s'\",username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hideUserNotFoundExceptions"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\",\"Bad credentials\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "user",
                            "\"retrieveUser returned null - a violation of the interface contract\""
                        ],
                        "usage": "Assert.notNull(user,\"retrieveUser returned null - a violation of the interface contract\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                        "target_name": "preAuthenticationChecks",
                        "target_method_name": "check",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.preAuthenticationChecks.check(user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthenticationChecks"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                        "target_name": "preAuthenticationChecks",
                        "target_method_name": "check",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.preAuthenticationChecks.check(user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthenticationChecks"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                        "target_name": "postAuthenticationChecks",
                        "target_method_name": "check",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.postAuthenticationChecks.check(user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "putUserInCache",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.userCache.putUserInCache(user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.forcePrincipalAsString"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "determineUsername",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "authentication.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createSuccessAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "principal",
                            "authentication"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.authenticated(principal,authentication.getCredentials(),this.authoritiesMapper.mapAuthorities(user.getAuthorities()))"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper",
                        "target_name": "authoritiesMapper",
                        "target_method_name": "mapAuthorities",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.authoritiesMapper.mapAuthorities(user.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesMapper"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "result.setDetails(authentication.getDetails())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "authentication.getDetails()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Authenticated user\""
                        ],
                        "usage": "this.logger.debug(\"Authenticated user\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "doAfterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getUserCache",
                "return_type": "org.springframework.security.core.userdetails.UserCache",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isForcePrincipalAsString",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.forcePrincipalAsString"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isHideUserNotFoundExceptions",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hideUserNotFoundExceptions"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "retrieveUser",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setForcePrincipalAsString",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "forcePrincipalAsString",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.forcePrincipalAsString"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setHideUserNotFoundExceptions",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "hideUserNotFoundExceptions",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.hideUserNotFoundExceptions"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userCache",
                        "param_type": "org.springframework.security.core.userdetails.UserCache"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getPreAuthenticationChecks",
                "return_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPreAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "preAuthenticationChecks",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsChecker"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPostAuthenticationChecks",
                "return_type": "org.springframework.security.core.userdetails.UserDetailsChecker",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPostAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "postAuthenticationChecks",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsChecker"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthenticationChecks"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthoritiesMapper",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authoritiesMapper",
                        "param_type": "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesMapper"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.authentication.AccountExpiredException",
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.authentication.CredentialsExpiredException",
            "org.springframework.security.authentication.DisabledException",
            "org.springframework.security.authentication.LockedException",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper",
            "org.springframework.security.core.authority.mapping.NullAuthoritiesMapper",
            "org.springframework.security.core.userdetails.UserCache",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsChecker",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.security.core.userdetails.cache.NullUserCache",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.dao.DefaultPreAuthenticationChecks": {
        "type": "class",
        "class_name": "DefaultPreAuthenticationChecks",
        "class_type": "class",
        "package": "org.springframework.security.authentication.dao",
        "implementz": [
            "org.springframework.security.authentication.dao.UserDetailsChecker"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.authentication.dao.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.dao.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.dao.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.dao.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.dao.DefaultPostAuthenticationChecks": {
        "type": "class",
        "class_name": "DefaultPostAuthenticationChecks",
        "class_type": "class",
        "package": "org.springframework.security.authentication.dao",
        "implementz": [
            "org.springframework.security.authentication.dao.UserDetailsChecker"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.authentication.dao.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.dao.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.dao.DaoAuthenticationProvider": {
        "type": "class",
        "class_name": "DaoAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.dao",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider",
        "fields": [
            {
                "type": "field",
                "field_name": "USER_NOT_FOUND_PASSWORD",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "passwordEncoder",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userNotFoundEncodedPassword",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsService",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsPasswordService",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsPasswordService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "compromisedPasswordChecker",
                "field_type": "org.springframework.security.authentication.password.CompromisedPasswordChecker",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DaoAuthenticationProvider",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DaoAuthenticationProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DaoAuthenticationProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "passwordEncoder",
                        "param_type": "org.springframework.security.crypto.password.PasswordEncoder"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "additionalAuthenticationChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since no credentials provided\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since no credentials provided\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\",\"Bad credentials\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials().toString()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get().matches(presentedPassword,userDetails.getPassword())"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userDetails.getPassword()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Failed to authenticate since password does not match stored value\""
                        ],
                        "usage": "this.logger.debug(\"Failed to authenticate since password does not match stored value\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": null,
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractUserDetailsAuthenticationProvider"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractUserDetailsAuthenticationProvider.badCredentials\",\"Bad credentials\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "doAfterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"A UserDetailsService must be set\""
                        ],
                        "usage": "Assert.notNull(this.userDetailsService,\"A UserDetailsService must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "retrieveUser",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
                        "target_name": "this",
                        "target_method_name": "getUserDetailsService",
                        "target_params": [
                            ".loadUserByUsername"
                        ],
                        "usage": "this.getUserDetailsService().loadUserByUsername(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getUserDetailsService()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "ex.getMessage()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createSuccessAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials().toString()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.password.CompromisedPasswordChecker",
                        "target_name": "compromisedPasswordChecker",
                        "target_method_name": "check",
                        "target_params": [
                            "presentedPassword"
                        ],
                        "usage": "this.compromisedPasswordChecker.check(presentedPassword).isCompromised()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.password.CompromisedPasswordChecker",
                        "target_name": "compromisedPasswordChecker",
                        "target_method_name": "check",
                        "target_params": [
                            "presentedPassword"
                        ],
                        "usage": "this.compromisedPasswordChecker.check(presentedPassword)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get().upgradeEncoding(user.getPassword())"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "user.getPassword()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get().encode(presentedPassword)"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsPasswordService",
                        "target_name": "userDetailsPasswordService",
                        "target_method_name": "updatePassword",
                        "target_params": [
                            "user",
                            "newPassword"
                        ],
                        "usage": "this.userDetailsPasswordService.updatePassword(user,newPassword)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "createSuccessAuthentication",
                        "target_params": [
                            "principal",
                            "authentication",
                            "user"
                        ],
                        "usage": "super.createSuccessAuthentication(principal,authentication,user)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "prepareTimingAttackProtection",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userNotFoundEncodedPassword"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userNotFoundEncodedPassword"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get().encode(USER_NOT_FOUND_PASSWORD)"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mitigateAgainstTimingAttack",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials().toString()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "authentication",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "authentication.getCredentials()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get().matches(presentedPassword,this.userNotFoundEncodedPassword)"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userNotFoundEncodedPassword"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPasswordEncoder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "passwordEncoder",
                        "param_type": "org.springframework.security.crypto.password.PasswordEncoder"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "passwordEncoder",
                            "\"passwordEncoder cannot be null\""
                        ],
                        "usage": "Assert.notNull(passwordEncoder,\"passwordEncoder cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userNotFoundEncodedPassword"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPasswordEncoder",
                "return_type": "org.springframework.security.crypto.password.PasswordEncoder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "passwordEncoder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.passwordEncoder.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserDetailsService",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUserDetailsService",
                "return_type": "org.springframework.security.core.userdetails.UserDetailsService",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserDetailsPasswordService",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userDetailsPasswordService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsPasswordService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsPasswordService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCompromisedPasswordChecker",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "compromisedPasswordChecker",
                        "param_type": "org.springframework.security.authentication.password.CompromisedPasswordChecker"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromisedPasswordChecker"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SingletonSupplier.of(PasswordEncoderFactories::createDelegatingPasswordEncoder)"
        ],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.authentication.InternalAuthenticationServiceException",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.authentication.password.CompromisedPasswordChecker",
            "org.springframework.security.authentication.password.CompromisedPasswordException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsPasswordService",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.security.crypto.factory.PasswordEncoderFactories",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.util.Assert",
            "org.springframework.util.function.SingletonSupplier"
        ]
    },
    "org.springframework.security.authentication.event.AbstractAuthenticationEvent": {
        "type": "class",
        "class_name": "AbstractAuthenticationEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractAuthenticationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "super.getSource()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.context.ApplicationEvent",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent": {
        "type": "class",
        "class_name": "AbstractAuthenticationFailureEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "exception",
                "field_type": "org.springframework.security.core.AuthenticationException",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractAuthenticationFailureEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "exception",
                            "\"AuthenticationException is required\""
                        ],
                        "usage": "Assert.notNull(exception,\"AuthenticationException is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exception"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getException",
                "return_type": "org.springframework.security.core.AuthenticationException",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exception"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureBadCredentialsEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureBadCredentialsEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureCredentialsExpiredEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureCredentialsExpiredEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureDisabledEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureDisabledEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureExpiredEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureExpiredEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureLockedEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureLockedEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureLockedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureProviderNotFoundEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureProviderNotFoundEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureProxyUntrustedEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureProxyUntrustedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent": {
        "type": "class",
        "class_name": "AuthenticationFailureServiceExceptionEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationFailureServiceExceptionEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.event.AuthenticationSuccessEvent": {
        "type": "class",
        "class_name": "AuthenticationSuccessEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationSuccessEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent": {
        "type": "class",
        "class_name": "InteractiveAuthenticationSuccessEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "generatedBy",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InteractiveAuthenticationSuccessEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "generatedBy",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "generatedBy",
                            "\"generatedBy cannot be null\""
                        ],
                        "usage": "Assert.notNull(generatedBy,\"generatedBy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.generatedBy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGeneratedBy",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.generatedBy"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.event.LoggerListener": {
        "type": "class",
        "class_name": "LoggerListener",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [
            "org.springframework.context.ApplicationListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logInteractiveAuthenticationSuccessEvents",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "onApplicationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logInteractiveAuthenticationSuccessEvents"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.warn(LogMessage.of(()->getLogMessage(event)))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->getLogMessage(event))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLogMessage",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authentication event \""
                        ],
                        "usage": "builder.append(\"Authentication event \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "ClassUtils"
                        ],
                        "usage": "builder.append(ClassUtils.getShortName(event.getClass()))"
                    },
                    {
                        "target_type": "org.springframework.util.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "getShortName",
                        "target_params": [
                            "event"
                        ],
                        "usage": "ClassUtils.getShortName(event.getClass())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
                        "target_name": "event",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "event.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "\": \""
                        ],
                        "usage": "builder.append(\": \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "event"
                        ],
                        "usage": "builder.append(event.getAuthentication().getName())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
                        "target_name": "event",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "event.getAuthentication().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
                        "target_name": "event",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "event.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "\"; details: \""
                        ],
                        "usage": "builder.append(\"; details: \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "event"
                        ],
                        "usage": "builder.append(event.getAuthentication().getDetails())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
                        "target_name": "event",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "event.getAuthentication().getDetails()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
                        "target_name": "event",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "event.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [
                            "\"; exception: \""
                        ],
                        "usage": "builder.append(\"; exception: \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "append",
                        "target_params": [],
                        "usage": "builder.append(((AbstractAuthenticationFailureEvent)event).getException().getMessage())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((AbstractAuthenticationFailureEvent)event).getException().getMessage()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((AbstractAuthenticationFailureEvent)event).getException()"
                    },
                    {
                        "target_type": null,
                        "target_name": "builder",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "builder.toString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isLogInteractiveAuthenticationSuccessEvents",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logInteractiveAuthenticationSuccessEvents"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setLogInteractiveAuthenticationSuccessEvents",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "logInteractiveAuthenticationSuccessEvents",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logInteractiveAuthenticationSuccessEvents"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(LoggerListener.class)"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.ApplicationListener",
            "org.springframework.core.log.LogMessage",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.authentication.event.LogoutSuccessEvent": {
        "type": "class",
        "class_name": "LogoutSuccessEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "LogoutSuccessEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider": {
        "type": "class",
        "class_name": "AbstractJaasAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.authentication.jaas.AuthenticationProvider,ApplicationEventPublisherAware,InitializingBean,ApplicationListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "applicationEventPublisher",
                "field_type": "org.springframework.context.ApplicationEventPublisher",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorityGranters",
                "field_type": "org.springframework.security.authentication.jaas.AuthorityGranter[]",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "callbackHandlers",
                "field_type": "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler[]",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "log",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "loginExceptionResolver",
                "field_type": "org.springframework.security.authentication.jaas.LoginExceptionResolver",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "loginContextName",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "loginContextName",
                            "\"loginContextName cannot be null or empty\""
                        ],
                        "usage": "Assert.hasLength(this.loginContextName,\"loginContextName cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContextName"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "authorityGranters",
                            "\"authorityGranters cannot be null or empty\""
                        ],
                        "usage": "Assert.notEmpty(this.authorityGranters,\"authorityGranters cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorityGranters"
                    },
                    {
                        "target_type": "org.springframework.util.ObjectUtils",
                        "target_name": "ObjectUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "callbackHandlers"
                        ],
                        "usage": "ObjectUtils.isEmpty(this.callbackHandlers)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.callbackHandlers"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "loginExceptionResolver",
                            "\"loginExceptionResolver cannot be null\""
                        ],
                        "usage": "Assert.notNull(this.loginExceptionResolver,\"loginExceptionResolver cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginExceptionResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "loginContext",
                        "target_method_name": "login",
                        "target_params": [],
                        "usage": "loginContext.login()"
                    },
                    {
                        "target_type": null,
                        "target_name": "loginContext",
                        "target_method_name": "getSubject",
                        "target_params": [],
                        "usage": "loginContext.getSubject().getPrincipals()"
                    },
                    {
                        "target_type": null,
                        "target_name": "loginContext",
                        "target_method_name": "getSubject",
                        "target_params": [],
                        "usage": "loginContext.getSubject()"
                    },
                    {
                        "target_type": null,
                        "target_name": "request",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "request.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "request",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "request.getCredentials()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.jaas.LoginExceptionResolver",
                        "target_name": "loginExceptionResolver",
                        "target_method_name": "resolveException",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "this.loginExceptionResolver.resolveException(ex)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginExceptionResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "principals",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorityGranters"
                    },
                    {
                        "target_type": null,
                        "target_name": "granter",
                        "target_method_name": "grant",
                        "target_params": [
                            "principal"
                        ],
                        "usage": "granter.grant(principal)"
                    },
                    {
                        "target_type": "org.springframework.util.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "roles"
                        ],
                        "usage": "CollectionUtils.isEmpty(roles)"
                    },
                    {
                        "target_type": null,
                        "target_name": "authorities",
                        "target_method_name": "add",
                        "target_params": [
                            "newJaasGrantedAuthority"
                        ],
                        "usage": "authorities.add(newJaasGrantedAuthority(role,principal))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createLoginContext",
                "return_type": "javax.security.auth.login.LoginContext",
                "formal_params": [
                    {
                        "param_name": "handler",
                        "param_type": "javax.security.auth.callback.CallbackHandler"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "handleLogout",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.session.SessionDestroyedEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.session.SessionDestroyedEvent",
                        "target_name": "event",
                        "target_method_name": "getSecurityContexts",
                        "target_params": [],
                        "usage": "event.getSecurityContexts()"
                    },
                    {
                        "target_type": null,
                        "target_name": "contexts",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "contexts.isEmpty()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"The destroyed session has no SecurityContexts\""
                        ],
                        "usage": "this.log.debug(\"The destroyed session has no SecurityContexts\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.log"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "token",
                        "target_method_name": "getLoginContext",
                        "target_params": [],
                        "usage": "token.getLoginContext()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "warn",
                        "target_params": [
                            "\"Error error logging out of LoginContext\"",
                            "ex"
                        ],
                        "usage": "this.log.warn(\"Error error logging out of LoginContext\",ex)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.log"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "logout",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.authentication.jaas.JaasAuthenticationToken"
                    },
                    {
                        "param_name": "loginContext",
                        "param_type": "javax.security.auth.login.LoginContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.log.debug(LogMessage.of(()->\"Logging principal: [\"+token.getPrincipal()+\"] out of LoginContext\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.log"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Logging principal: [\"+token.getPrincipal()+\"] out of LoginContext\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.jaas.JaasAuthenticationToken",
                        "target_name": "token",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "token.getPrincipal()"
                    },
                    {
                        "target_type": "javax.security.auth.login.LoginContext",
                        "target_name": "loginContext",
                        "target_method_name": "logout",
                        "target_params": [],
                        "usage": "loginContext.logout()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.log.debug(LogMessage.of(()->\"Cannot logout principal: [\"+token.getPrincipal()+\"] from LoginContext. The LoginContext is unavailable\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.log"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Cannot logout principal: [\"+token.getPrincipal()+\"] from LoginContext. The LoginContext is unavailable\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.jaas.JaasAuthenticationToken",
                        "target_name": "token",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "token.getPrincipal()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onApplicationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.session.SessionDestroyedEvent"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishFailureEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    },
                    {
                        "param_name": "ase",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "applicationEventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "newJaasAuthenticationFailedEvent"
                        ],
                        "usage": "this.applicationEventPublisher.publishEvent(newJaasAuthenticationFailedEvent(token,ase))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishSuccessEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "applicationEventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "newJaasAuthenticationSuccessEvent"
                        ],
                        "usage": "this.applicationEventPublisher.publishEvent(newJaasAuthenticationSuccessEvent(token))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorityGranters",
                "return_type": "org.springframework.security.authentication.jaas.AuthorityGranter[]",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorityGranters"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthorityGranters",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authorityGranters",
                        "param_type": "org.springframework.security.authentication.jaas.AuthorityGranter[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorityGranters"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCallbackHandlers",
                "return_type": "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler[]",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.callbackHandlers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCallbackHandlers",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "callbackHandlers",
                        "param_type": "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.callbackHandlers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLoginContextName",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContextName"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setLoginContextName",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "loginContextName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContextName"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLoginExceptionResolver",
                "return_type": "org.springframework.security.authentication.jaas.LoginExceptionResolver",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginExceptionResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setLoginExceptionResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "loginExceptionResolver",
                        "param_type": "org.springframework.security.authentication.jaas.LoginExceptionResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginExceptionResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "aClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setApplicationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "applicationEventPublisher",
                        "param_type": "org.springframework.context.ApplicationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getApplicationEventPublisher",
                "return_type": "org.springframework.context.ApplicationEventPublisher",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.applicationEventPublisher"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "java.io.IOException",
            "java.security.Principal",
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "javax.security.auth.callback.Callback",
            "javax.security.auth.callback.CallbackHandler",
            "javax.security.auth.callback.UnsupportedCallbackException",
            "javax.security.auth.login.LoginContext",
            "javax.security.auth.login.LoginException",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.context.ApplicationEventPublisher",
            "org.springframework.context.ApplicationEventPublisherAware",
            "org.springframework.context.ApplicationListener",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent",
            "org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.session.SessionDestroyedEvent",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils",
            "org.springframework.util.ObjectUtils"
        ]
    },
    "org.springframework.security.authentication.jaas.InternalCallbackHandler": {
        "type": "class",
        "class_name": "InternalCallbackHandler",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.authentication.jaas.CallbackHandler"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "org.springframework.security.authentication.jaas.Authentication",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InternalCallbackHandler",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authentication.jaas.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "callbacks",
                        "param_type": "org.springframework.security.authentication.jaas.Callback[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handle",
                        "target_params": [
                            "callback",
                            "authentication"
                        ],
                        "usage": "handler.handle(callback,this.authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.jaas.AuthorityGranter": {
        "type": "interface",
        "class_name": "AuthorityGranter",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "grant",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.security.Principal"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.security.Principal",
            "java.util.Set"
        ]
    },
    "org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider": {
        "type": "class",
        "class_name": "DefaultJaasAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider",
        "fields": [
            {
                "type": "field",
                "field_name": "configuration",
                "field_type": "javax.security.auth.login.Configuration",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "afterPropertiesSet",
                        "target_params": [],
                        "usage": "super.afterPropertiesSet()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "configuration",
                            "\"configuration cannot be null"
                        ],
                        "usage": "Assert.notNull(this.configuration,\"configuration cannot be null.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configuration"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createLoginContext",
                "return_type": "javax.security.auth.login.LoginContext",
                "formal_params": [
                    {
                        "param_name": "handler",
                        "param_type": "javax.security.auth.callback.CallbackHandler"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getConfiguration",
                "return_type": "javax.security.auth.login.Configuration",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configuration"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setConfiguration",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "configuration",
                        "param_type": "javax.security.auth.login.Configuration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.configuration"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "javax.security.auth.callback.CallbackHandler",
            "javax.security.auth.login.Configuration",
            "javax.security.auth.login.LoginContext",
            "javax.security.auth.login.LoginException",
            "org.springframework.security.authentication.jaas.memory.InMemoryConfiguration",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.jaas.DefaultLoginExceptionResolver": {
        "type": "class",
        "class_name": "DefaultLoginExceptionResolver",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.authentication.jaas.LoginExceptionResolver"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "resolveException",
                "return_type": "org.springframework.security.core.AuthenticationException",
                "formal_params": [
                    {
                        "param_name": "ex",
                        "param_type": "javax.security.auth.login.LoginException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "javax.security.auth.login.LoginException",
                        "target_name": "ex",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "ex.getMessage()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "javax.security.auth.login.LoginException",
            "org.springframework.security.authentication.AuthenticationServiceException",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler": {
        "type": "interface",
        "class_name": "JaasAuthenticationCallbackHandler",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "callback",
                        "param_type": "javax.security.auth.callback.Callback"
                    },
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "javax.security.auth.callback.Callback",
            "javax.security.auth.callback.UnsupportedCallbackException",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasAuthenticationProvider": {
        "type": "class",
        "class_name": "JaasAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider",
        "fields": [
            {
                "type": "field",
                "field_name": "log",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "loginConfig",
                "field_type": "org.springframework.core.io.Resource",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "refreshConfigurationOnStartup",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasLength",
                        "target_params": [
                            "getLoginContextName"
                        ],
                        "usage": "Assert.hasLength(getLoginContextName(),()->\"loginContextName must be set on \"+getClass())"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "loginConfig",
                            ""
                        ],
                        "usage": "Assert.notNull(this.loginConfig,()->\"loginConfig must be set on \"+getClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "Configuration"
                        ],
                        "usage": "Assert.notNull(Configuration.getConfiguration(),\"As per https://java.sun.com/j2se/1.5.0/docs/api/javax/security/auth/login/Configuration.html \"+\"\\\"If a Configuration object was set via the Configuration.setConfiguration method, then that object is \"+\"returned. Otherwise, a default Configuration object is returned\\\". Your JRE returned null to \"+\"Configuration.getConfiguration().\")"
                    },
                    {
                        "target_type": "javax.security.auth.login.Configuration",
                        "target_name": "Configuration",
                        "target_method_name": "getConfiguration",
                        "target_params": [],
                        "usage": "Configuration.getConfiguration()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createLoginContext",
                "return_type": "javax.security.auth.login.LoginContext",
                "formal_params": [
                    {
                        "param_name": "handler",
                        "param_type": "javax.security.auth.callback.CallbackHandler"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "configureJaas",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "loginConfig",
                        "param_type": "org.springframework.core.io.Resource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.refreshConfigurationOnStartup"
                    },
                    {
                        "target_type": "javax.security.auth.login.Configuration",
                        "target_name": "Configuration",
                        "target_method_name": "getConfiguration",
                        "target_params": [],
                        "usage": "Configuration.getConfiguration().refresh()"
                    },
                    {
                        "target_type": "javax.security.auth.login.Configuration",
                        "target_name": "Configuration",
                        "target_method_name": "getConfiguration",
                        "target_params": [],
                        "usage": "Configuration.getConfiguration()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "configureJaasUsingLoop",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.Security",
                        "target_name": "Security",
                        "target_method_name": "getProperty",
                        "target_params": [
                            "prefix+n"
                        ],
                        "usage": "Security.getProperty(prefix+n)"
                    },
                    {
                        "target_type": null,
                        "target_name": "existing",
                        "target_method_name": "equals",
                        "target_params": [
                            "loginConfigUrl"
                        ],
                        "usage": "existing.equals(loginConfigUrl)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "log.debug(LogMessage.format(\"Setting security property [%s] to: %s\",key,loginConfigUrl))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Setting security property [%s] to: %s\"",
                            "key",
                            "loginConfigUrl"
                        ],
                        "usage": "LogMessage.format(\"Setting security property [%s] to: %s\",key,loginConfigUrl)"
                    },
                    {
                        "target_type": "java.security.Security",
                        "target_name": "Security",
                        "target_method_name": "setProperty",
                        "target_params": [
                            "key",
                            "loginConfigUrl"
                        ],
                        "usage": "Security.setProperty(key,loginConfigUrl)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "convertLoginConfigToUrl",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "loginConfig",
                        "target_method_name": "getFile",
                        "target_params": [],
                        "usage": "this.loginConfig.getFile().getAbsolutePath().replace(File.separatorChar,'/')"
                    },
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "loginConfig",
                        "target_method_name": "getFile",
                        "target_params": [],
                        "usage": "this.loginConfig.getFile().getAbsolutePath()"
                    },
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "loginConfig",
                        "target_method_name": "getFile",
                        "target_params": [],
                        "usage": "this.loginConfig.getFile()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    },
                    {
                        "target_type": null,
                        "target_name": "loginConfigPath",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "\"/\""
                        ],
                        "usage": "loginConfigPath.startsWith(\"/\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.jaas.JaasAuthenticationProvider",
                        "target_name": "this",
                        "target_method_name": "newURL",
                        "target_params": [
                            "\"file\"",
                            "\"\"",
                            "loginConfigPath.toString"
                        ],
                        "usage": "newURL(\"file\",\"\",loginConfigPath).toString()"
                    },
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "loginConfig",
                        "target_method_name": "getURL",
                        "target_params": [],
                        "usage": "this.loginConfig.getURL().toString()"
                    },
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "loginConfig",
                        "target_method_name": "getURL",
                        "target_params": [],
                        "usage": "this.loginConfig.getURL()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishFailureEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken"
                    },
                    {
                        "param_name": "ase",
                        "param_type": "org.springframework.security.core.AuthenticationException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.jaas.JaasAuthenticationProvider",
                        "target_name": "this",
                        "target_method_name": "getApplicationEventPublisher",
                        "target_params": [
                            ".publishEvent"
                        ],
                        "usage": "getApplicationEventPublisher().publishEvent(newJaasAuthenticationFailedEvent(token,ase))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLoginConfig",
                "return_type": "org.springframework.core.io.Resource",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setLoginConfig",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "loginConfig",
                        "param_type": "org.springframework.core.io.Resource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginConfig"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRefreshConfigurationOnStartup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "refresh",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.refreshConfigurationOnStartup"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(JaasAuthenticationProvider.class)"
        ],
        "imports": [
            "java.io.File",
            "java.io.IOException",
            "java.net.URL",
            "java.security.Security",
            "javax.security.auth.callback.CallbackHandler",
            "javax.security.auth.login.Configuration",
            "javax.security.auth.login.LoginContext",
            "javax.security.auth.login.LoginException",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.io.Resource",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasAuthenticationToken": {
        "type": "class",
        "class_name": "JaasAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "loginContext",
                "field_type": "javax.security.auth.login.LoginContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JaasAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "loginContext",
                        "param_type": "javax.security.auth.login.LoginContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContext"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "JaasAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "credentials",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    },
                    {
                        "param_name": "loginContext",
                        "param_type": "javax.security.auth.login.LoginContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLoginContext",
                "return_type": "javax.security.auth.login.LoginContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.loginContext"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.util.List",
            "javax.security.auth.login.LoginContext",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasGrantedAuthority": {
        "type": "class",
        "class_name": "JaasGrantedAuthority",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.core.GrantedAuthority"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "role",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.security.Principal",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JaasGrantedAuthority",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.security.Principal"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "role",
                            "\"role cannot be null\""
                        ],
                        "usage": "Assert.notNull(role,\"role cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "principal",
                            "\"principal cannot be null\""
                        ],
                        "usage": "Assert.notNull(principal,\"principal cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.security.Principal",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthority",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "equals",
                        "target_params": [
                            "jga"
                        ],
                        "usage": "this.role.equals(jga.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    },
                    {
                        "target_type": null,
                        "target_name": "jga",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "jga.getAuthority()"
                    },
                    {
                        "target_type": "java.security.Principal",
                        "target_name": "principal",
                        "target_method_name": "equals",
                        "target_params": [
                            "jga"
                        ],
                        "usage": "this.principal.equals(jga.getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": "jga",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "jga.getPrincipal()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.Principal",
                        "target_name": "principal",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.principal.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.role.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.security.Principal",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasNameCallbackHandler": {
        "type": "class",
        "class_name": "JaasNameCallbackHandler",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "callback",
                        "param_type": "javax.security.auth.callback.Callback"
                    },
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((NameCallback)callback).setName(getUserName(authentication))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUserName",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "authentication.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((UserDetails)principal).getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "principal",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "principal.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "javax.security.auth.callback.Callback",
            "javax.security.auth.callback.NameCallback",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.userdetails.UserDetails"
        ]
    },
    "org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler": {
        "type": "class",
        "class_name": "JaasPasswordCallbackHandler",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "callback",
                        "param_type": "javax.security.auth.callback.Callback"
                    },
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((PasswordCallback)callback).setPassword(auth.getCredentials().toString().toCharArray())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "auth",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "auth.getCredentials().toString().toCharArray()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "auth",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "auth.getCredentials().toString()"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "auth",
                        "target_method_name": "getCredentials",
                        "target_params": [],
                        "usage": "auth.getCredentials()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "javax.security.auth.callback.Callback",
            "javax.security.auth.callback.PasswordCallback",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.LoginExceptionResolver": {
        "type": "interface",
        "class_name": "LoginExceptionResolver",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "resolveException",
                "return_type": "org.springframework.security.core.AuthenticationException",
                "formal_params": [
                    {
                        "param_name": "ex",
                        "param_type": "javax.security.auth.login.LoginException"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "javax.security.auth.login.LoginException",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.jaas.SecurityContextLoginModule": {
        "type": "class",
        "class_name": "SecurityContextLoginModule",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas",
        "implementz": [
            "javax.security.auth.spi.LoginModule"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "log",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authen",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "subject",
                "field_type": "javax.security.auth.Subject",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "ignoreMissingAuthentication",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "abort",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "commit",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": "javax.security.auth.Subject",
                        "target_name": "subject",
                        "target_method_name": "getPrincipals",
                        "target_params": [],
                        "usage": "this.subject.getPrincipals().add(this.authen)"
                    },
                    {
                        "target_type": "javax.security.auth.Subject",
                        "target_name": "subject",
                        "target_method_name": "getPrincipals",
                        "target_params": [],
                        "usage": "this.subject.getPrincipals()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.subject"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSubject",
                "return_type": "javax.security.auth.Subject",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.subject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "initialize",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "subject",
                        "param_type": "javax.security.auth.Subject"
                    },
                    {
                        "param_name": "callbackHandler",
                        "param_type": "javax.security.auth.callback.CallbackHandler"
                    },
                    {
                        "param_name": "sharedState",
                        "param_type": "java.util.Map"
                    },
                    {
                        "param_name": "options",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.subject"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreMissingAuthentication"
                    },
                    {
                        "target_type": null,
                        "target_name": "\"true\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "options"
                        ],
                        "usage": "\"true\".equals(options.get(\"ignoreMissingAuthentication\"))"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "options",
                        "target_method_name": "get",
                        "target_params": [
                            "\"ignoreMissingAuthentication\""
                        ],
                        "usage": "options.get(\"ignoreMissingAuthentication\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "login",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreMissingAuthentication"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "log",
                        "target_method_name": "warn",
                        "target_params": [
                            "msg"
                        ],
                        "usage": "log.warn(msg)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "logout",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": "javax.security.auth.Subject",
                        "target_name": "subject",
                        "target_method_name": "getPrincipals",
                        "target_params": [],
                        "usage": "this.subject.getPrincipals().remove(this.authen)"
                    },
                    {
                        "target_type": "javax.security.auth.Subject",
                        "target_name": "subject",
                        "target_method_name": "getPrincipals",
                        "target_params": [],
                        "usage": "this.subject.getPrincipals()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.subject"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authen"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(SecurityContextLoginModule.class)",
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.util.Map",
            "javax.security.auth.Subject",
            "javax.security.auth.callback.CallbackHandler",
            "javax.security.auth.login.LoginException",
            "javax.security.auth.spi.LoginModule",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent": {
        "type": "class",
        "class_name": "JaasAuthenticationEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas.event",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JaasAuthenticationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.source"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.context.ApplicationEvent",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent": {
        "type": "class",
        "class_name": "JaasAuthenticationFailedEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "exception",
                "field_type": "java.lang.Exception",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JaasAuthenticationFailedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "exception",
                        "param_type": "java.lang.Exception"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exception"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getException",
                "return_type": "java.lang.Exception",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.exception"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent": {
        "type": "class",
        "class_name": "JaasAuthenticationSuccessEvent",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas.event",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JaasAuthenticationSuccessEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "auth",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authentication.jaas.memory.InMemoryConfiguration": {
        "type": "class",
        "class_name": "InMemoryConfiguration",
        "class_type": "class",
        "package": "org.springframework.security.authentication.jaas.memory",
        "implementz": [],
        "extendz": "javax.security.auth.login.Configuration",
        "fields": [
            {
                "type": "field",
                "field_name": "defaultConfiguration",
                "field_type": "org.springframework.security.authentication.jaas.memory.AppConfigurationEntry[]",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "mappedConfigurations",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InMemoryConfiguration",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "defaultConfiguration",
                        "param_type": "org.springframework.security.authentication.jaas.memory.AppConfigurationEntry[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyMap",
                        "target_params": [],
                        "usage": "Collections.emptyMap()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "InMemoryConfiguration",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "mappedConfigurations",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InMemoryConfiguration",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "mappedConfigurations",
                        "param_type": "java.util.Map"
                    },
                    {
                        "param_name": "defaultConfiguration",
                        "param_type": "org.springframework.security.authentication.jaas.memory.AppConfigurationEntry[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "mappedConfigurations",
                            "\"mappedConfigurations cannot be null"
                        ],
                        "usage": "Assert.notNull(mappedConfigurations,\"mappedConfigurations cannot be null.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappedConfigurations"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultConfiguration"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAppConfigurationEntry",
                "return_type": "org.springframework.security.authentication.jaas.memory.AppConfigurationEntry[]",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "mappedConfigurations",
                        "target_method_name": "get",
                        "target_params": [
                            "name"
                        ],
                        "usage": "this.mappedConfigurations.get(name)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappedConfigurations"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultConfiguration"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "refresh",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collections",
            "java.util.Map",
            "javax.security.auth.login.AppConfigurationEntry",
            "javax.security.auth.login.Configuration",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.DefaultOneTimeToken": {
        "type": "class",
        "class_name": "DefaultOneTimeToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.ott.OneTimeToken"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "token",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "username",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expireAt",
                "field_type": "java.time.Instant",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultOneTimeToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "expireAt",
                        "param_type": "java.time.Instant"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "token",
                            "\"token cannot be empty\""
                        ],
                        "usage": "Assert.hasText(token,\"token cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "username",
                            "\"username cannot be empty\""
                        ],
                        "usage": "Assert.hasText(username,\"username cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expireAt",
                            "\"expireAt cannot be null\""
                        ],
                        "usage": "Assert.notNull(expireAt,\"expireAt cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.token"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expireAt"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getTokenValue",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.token"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpiresAt",
                "return_type": "java.time.Instant",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expireAt"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.time.Instant",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest": {
        "type": "class",
        "class_name": "GenerateOneTimeTokenRequest",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "DEFAULT_EXPIRES_IN",
                "field_type": "java.time.Duration",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "username",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expiresIn",
                "field_type": "java.time.Duration",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "GenerateOneTimeTokenRequest",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "GenerateOneTimeTokenRequest",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "expiresIn",
                        "param_type": "java.time.Duration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "username",
                            "\"username cannot be empty\""
                        ],
                        "usage": "Assert.hasText(username,\"username cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expiresIn",
                            "\"expiresIn cannot be null\""
                        ],
                        "usage": "Assert.notNull(expiresIn,\"expiresIn cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expiresIn"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpiresIn",
                "return_type": "java.time.Duration",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expiresIn"
                    }
                ]
            }
        ],
        "methodCalls": [
            "Duration.ofMinutes(5)"
        ],
        "imports": [
            "java.time.Duration",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.InMemoryOneTimeTokenService": {
        "type": "class",
        "class_name": "InMemoryOneTimeTokenService",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.ott.OneTimeTokenService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "oneTimeTokenByToken",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "clock",
                "field_type": "java.time.Clock",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "generate",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "request",
                        "param_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.UUID",
                        "target_name": "UUID",
                        "target_method_name": "randomUUID",
                        "target_params": [],
                        "usage": "UUID.randomUUID().toString()"
                    },
                    {
                        "target_type": "java.util.UUID",
                        "target_name": "UUID",
                        "target_method_name": "randomUUID",
                        "target_params": [],
                        "usage": "UUID.randomUUID()"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant().plus(request.getExpiresIn())"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
                        "target_name": "request",
                        "target_method_name": "getExpiresIn",
                        "target_params": [],
                        "usage": "request.getExpiresIn()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
                        "target_name": "request",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "request.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "oneTimeTokenByToken",
                        "target_method_name": "put",
                        "target_params": [
                            "token",
                            "ott"
                        ],
                        "usage": "this.oneTimeTokenByToken.put(token,ott)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenByToken"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "consume",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "oneTimeTokenByToken",
                        "target_method_name": "remove",
                        "target_params": [
                            "authenticationToken"
                        ],
                        "usage": "this.oneTimeTokenByToken.remove(authenticationToken.getTokenValue())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenByToken"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                        "target_name": "authenticationToken",
                        "target_method_name": "getTokenValue",
                        "target_params": [],
                        "usage": "authenticationToken.getTokenValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "cleanExpiredTokensIfNeeded",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "oneTimeTokenByToken",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "this.oneTimeTokenByToken.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenByToken"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "oneTimeTokenByToken",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "this.oneTimeTokenByToken.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenByToken"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "oneTimeTokenByToken",
                        "target_method_name": "remove",
                        "target_params": [
                            "entry"
                        ],
                        "usage": "this.oneTimeTokenByToken.remove(entry.getKey())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenByToken"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isExpired",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "ott",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant().isAfter(ott.getExpiresAt())"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "ott",
                        "target_method_name": "getExpiresAt",
                        "target_params": [],
                        "usage": "ott.getExpiresAt()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setClock",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "clock",
                        "param_type": "java.time.Clock"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "clock",
                            "\"clock cannot be null\""
                        ],
                        "usage": "Assert.notNull(clock,\"clock cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    }
                ]
            }
        ],
        "methodCalls": [
            "Clock.systemUTC()"
        ],
        "imports": [
            "java.time.Clock",
            "java.time.Instant",
            "java.util.Map",
            "java.util.UUID",
            "java.util.concurrent.ConcurrentHashMap",
            "org.springframework.lang.NonNull",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.InvalidOneTimeTokenException": {
        "type": "class",
        "class_name": "InvalidOneTimeTokenException",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InvalidOneTimeTokenException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.ott.JdbcOneTimeTokenService": {
        "type": "class",
        "class_name": "JdbcOneTimeTokenService",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.ott.OneTimeTokenService,DisposableBean,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "jdbcOperations",
                "field_type": "org.springframework.jdbc.core.JdbcOperations",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "oneTimeTokenParametersMapper",
                "field_type": "java.util.function.Function",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "oneTimeTokenRowMapper",
                "field_type": "org.springframework.jdbc.core.RowMapper",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "clock",
                "field_type": "java.time.Clock",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "taskScheduler",
                "field_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEFAULT_CLEANUP_CRON",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "TABLE_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "COLUMN_NAMES",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SAVE_ONE_TIME_TOKEN_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "FILTER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DELETE_ONE_TIME_TOKEN_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SELECT_ONE_TIME_TOKEN_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DELETE_ONE_TIME_TOKENS_BY_EXPIRY_TIME_QUERY",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JdbcOneTimeTokenService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "jdbcOperations",
                        "param_type": "org.springframework.jdbc.core.JdbcOperations"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "jdbcOperations",
                            "\"jdbcOperations cannot be null\""
                        ],
                        "usage": "Assert.notNull(jdbcOperations,\"jdbcOperations cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jdbcOperations"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.taskScheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCleanupCron",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "cleanupCron",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.taskScheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "generate",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "request",
                        "param_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "request",
                            "\"generateOneTimeTokenRequest cannot be null\""
                        ],
                        "usage": "Assert.notNull(request,\"generateOneTimeTokenRequest cannot be null\")"
                    },
                    {
                        "target_type": "java.util.UUID",
                        "target_name": "UUID",
                        "target_method_name": "randomUUID",
                        "target_params": [],
                        "usage": "UUID.randomUUID().toString()"
                    },
                    {
                        "target_type": "java.util.UUID",
                        "target_name": "UUID",
                        "target_method_name": "randomUUID",
                        "target_params": [],
                        "usage": "UUID.randomUUID()"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant().plus(request.getExpiresIn())"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
                        "target_name": "request",
                        "target_method_name": "getExpiresIn",
                        "target_params": [],
                        "usage": "request.getExpiresIn()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
                        "target_name": "request",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "request.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "insertOneTimeToken",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oneTimeToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Function",
                        "target_name": "oneTimeTokenParametersMapper",
                        "target_method_name": "apply",
                        "target_params": [
                            "oneTimeToken"
                        ],
                        "usage": "this.oneTimeTokenParametersMapper.apply(oneTimeToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenParametersMapper"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "toArray",
                        "target_params": [],
                        "usage": "parameters.toArray()"
                    },
                    {
                        "target_type": "org.springframework.jdbc.core.JdbcOperations",
                        "target_name": "jdbcOperations",
                        "target_method_name": "update",
                        "target_params": [
                            "SAVE_ONE_TIME_TOKEN_SQL",
                            "pss"
                        ],
                        "usage": "this.jdbcOperations.update(SAVE_ONE_TIME_TOKEN_SQL,pss)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jdbcOperations"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "consume",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authenticationToken",
                            "\"authenticationToken cannot be null\""
                        ],
                        "usage": "Assert.notNull(authenticationToken,\"authenticationToken cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.CollectionUtils",
                        "target_name": "CollectionUtils",
                        "target_method_name": "isEmpty",
                        "target_params": [
                            "tokens"
                        ],
                        "usage": "CollectionUtils.isEmpty(tokens)"
                    },
                    {
                        "target_type": null,
                        "target_name": "tokens",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "tokens.get(0)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isExpired",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "ott",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant().isAfter(ott.getExpiresAt())"
                    },
                    {
                        "target_type": "java.time.Clock",
                        "target_name": "clock",
                        "target_method_name": "instant",
                        "target_params": [],
                        "usage": "this.clock.instant()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "ott",
                        "target_method_name": "getExpiresAt",
                        "target_params": [],
                        "usage": "ott.getExpiresAt()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "selectOneTimeToken",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "List.of(newSqlParameterValue(Types.VARCHAR,authenticationToken.getTokenValue()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                        "target_name": "authenticationToken",
                        "target_method_name": "getTokenValue",
                        "target_params": [],
                        "usage": "authenticationToken.getTokenValue()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "toArray",
                        "target_params": [],
                        "usage": "parameters.toArray()"
                    },
                    {
                        "target_type": "org.springframework.jdbc.core.JdbcOperations",
                        "target_name": "jdbcOperations",
                        "target_method_name": "query",
                        "target_params": [
                            "SELECT_ONE_TIME_TOKEN_SQL",
                            "pss",
                            "oneTimeTokenRowMapper"
                        ],
                        "usage": "this.jdbcOperations.query(SELECT_ONE_TIME_TOKEN_SQL,pss,this.oneTimeTokenRowMapper)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jdbcOperations"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenRowMapper"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "deleteOneTimeToken",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oneTimeToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "List.of(newSqlParameterValue(Types.VARCHAR,oneTimeToken.getTokenValue()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "oneTimeToken",
                        "target_method_name": "getTokenValue",
                        "target_params": [],
                        "usage": "oneTimeToken.getTokenValue()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "toArray",
                        "target_params": [],
                        "usage": "parameters.toArray()"
                    },
                    {
                        "target_type": "org.springframework.jdbc.core.JdbcOperations",
                        "target_name": "jdbcOperations",
                        "target_method_name": "update",
                        "target_params": [
                            "DELETE_ONE_TIME_TOKEN_SQL",
                            "pss"
                        ],
                        "usage": "this.jdbcOperations.update(DELETE_ONE_TIME_TOKEN_SQL,pss)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jdbcOperations"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createTaskScheduler",
                "return_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                "formal_params": [
                    {
                        "param_name": "cleanupCron",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                        "target_name": "taskScheduler",
                        "target_method_name": "setThreadNamePrefix",
                        "target_params": [
                            "\"spring-one-time-tokens-\""
                        ],
                        "usage": "taskScheduler.setThreadNamePrefix(\"spring-one-time-tokens-\")"
                    },
                    {
                        "target_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                        "target_name": "taskScheduler",
                        "target_method_name": "initialize",
                        "target_params": [],
                        "usage": "taskScheduler.initialize()"
                    },
                    {
                        "target_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                        "target_name": "taskScheduler",
                        "target_method_name": "schedule",
                        "target_params": [
                            "this::cleanupExpiredTokens",
                            "newCronTrigger"
                        ],
                        "usage": "taskScheduler.schedule(this::cleanupExpiredTokens,newCronTrigger(cleanupCron))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "cleanupExpiredTokens",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "List.of(newSqlParameterValue(Types.TIMESTAMP,Timestamp.from(Instant.now())))"
                    },
                    {
                        "target_type": "java.sql.Timestamp",
                        "target_name": "Timestamp",
                        "target_method_name": "from",
                        "target_params": [
                            "Instant"
                        ],
                        "usage": "Timestamp.from(Instant.now())"
                    },
                    {
                        "target_type": "java.time.Instant",
                        "target_name": "Instant",
                        "target_method_name": "now",
                        "target_params": [],
                        "usage": "Instant.now()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "toArray",
                        "target_params": [],
                        "usage": "parameters.toArray()"
                    },
                    {
                        "target_type": "org.springframework.jdbc.core.JdbcOperations",
                        "target_name": "jdbcOperations",
                        "target_method_name": "update",
                        "target_params": [
                            "DELETE_ONE_TIME_TOKENS_BY_EXPIRY_TIME_QUERY",
                            "pss"
                        ],
                        "usage": "this.jdbcOperations.update(DELETE_ONE_TIME_TOKENS_BY_EXPIRY_TIME_QUERY,pss)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.jdbcOperations"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Cleaned up \"+deletedCount+\" expired tokens\""
                        ],
                        "usage": "this.logger.debug(\"Cleaned up \"+deletedCount+\" expired tokens\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                        "target_name": "taskScheduler",
                        "target_method_name": "afterPropertiesSet",
                        "target_params": [],
                        "usage": "this.taskScheduler.afterPropertiesSet()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.taskScheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "destroy",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.taskScheduler"
                    },
                    {
                        "target_type": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
                        "target_name": "taskScheduler",
                        "target_method_name": "shutdown",
                        "target_params": [],
                        "usage": "this.taskScheduler.shutdown()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.taskScheduler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setClock",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "clock",
                        "param_type": "java.time.Clock"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "clock",
                            "\"clock cannot be null\""
                        ],
                        "usage": "Assert.notNull(clock,\"clock cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.clock"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "Clock.systemUTC()"
        ],
        "imports": [
            "java.sql.ResultSet",
            "java.sql.SQLException",
            "java.sql.Timestamp",
            "java.sql.Types",
            "java.time.Clock",
            "java.time.Instant",
            "java.util.ArrayList",
            "java.util.List",
            "java.util.UUID",
            "java.util.function.Function",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.beans.factory.DisposableBean",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.jdbc.core.ArgumentPreparedStatementSetter",
            "org.springframework.jdbc.core.JdbcOperations",
            "org.springframework.jdbc.core.PreparedStatementSetter",
            "org.springframework.jdbc.core.RowMapper",
            "org.springframework.jdbc.core.SqlParameterValue",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
            "org.springframework.scheduling.support.CronTrigger",
            "org.springframework.util.Assert",
            "org.springframework.util.CollectionUtils"
        ]
    },
    "org.springframework.security.authentication.ott.OneTimeTokenParametersMapper": {
        "type": "class",
        "class_name": "OneTimeTokenParametersMapper",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.ott.Function"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "apply",
                "return_type": "org.springframework.security.authentication.ott.List",
                "formal_params": [
                    {
                        "param_name": "oneTimeToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "add",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "parameters.add(newSqlParameterValue(Types.VARCHAR,oneTimeToken.getTokenValue()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "oneTimeToken",
                        "target_method_name": "getTokenValue",
                        "target_params": [],
                        "usage": "oneTimeToken.getTokenValue()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "add",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "parameters.add(newSqlParameterValue(Types.VARCHAR,oneTimeToken.getUsername()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "oneTimeToken",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "oneTimeToken.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameters",
                        "target_method_name": "add",
                        "target_params": [
                            "newSqlParameterValue"
                        ],
                        "usage": "parameters.add(newSqlParameterValue(Types.TIMESTAMP,Timestamp.from(oneTimeToken.getExpiresAt())))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.Timestamp",
                        "target_name": "Timestamp",
                        "target_method_name": "from",
                        "target_params": [
                            "oneTimeToken"
                        ],
                        "usage": "Timestamp.from(oneTimeToken.getExpiresAt())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeToken",
                        "target_name": "oneTimeToken",
                        "target_method_name": "getExpiresAt",
                        "target_params": [],
                        "usage": "oneTimeToken.getExpiresAt()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.ott.OneTimeTokenRowMapper": {
        "type": "class",
        "class_name": "OneTimeTokenRowMapper",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.ott.RowMapper"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "mapRow",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "rs",
                        "param_type": "org.springframework.security.authentication.ott.ResultSet"
                    },
                    {
                        "param_name": "rowNum",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.ott.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "\"token_value\""
                        ],
                        "usage": "rs.getString(\"token_value\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "\"username\""
                        ],
                        "usage": "rs.getString(\"username\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getTimestamp",
                        "target_params": [
                            "\"expires_at\""
                        ],
                        "usage": "rs.getTimestamp(\"expires_at\").toInstant()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getTimestamp",
                        "target_params": [
                            "\"expires_at\""
                        ],
                        "usage": "rs.getTimestamp(\"expires_at\")"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.ott.OneTimeToken": {
        "type": "interface",
        "class_name": "OneTimeToken",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getTokenValue",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getExpiresAt",
                "return_type": "java.time.Instant",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.time.Instant"
        ]
    },
    "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationProvider": {
        "type": "class",
        "class_name": "OneTimeTokenAuthenticationProvider",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [
            "org.springframework.security.authentication.AuthenticationProvider"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "oneTimeTokenService",
                "field_type": "org.springframework.security.authentication.ott.OneTimeTokenService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsService",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "OneTimeTokenAuthenticationProvider",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "oneTimeTokenService",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenService"
                    },
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "oneTimeTokenService",
                            "\"oneTimeTokenService cannot be null\""
                        ],
                        "usage": "Assert.notNull(oneTimeTokenService,\"oneTimeTokenService cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"userDetailsService cannot be null\""
                        ],
                        "usage": "Assert.notNull(userDetailsService,\"userDetailsService cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "consume",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "this.oneTimeTokenService.consume(otpAuthenticationToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsService",
                        "target_name": "userDetailsService",
                        "target_method_name": "loadUserByUsername",
                        "target_params": [
                            "consumed"
                        ],
                        "usage": "this.userDetailsService.loadUserByUsername(consumed.getUsername())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    },
                    {
                        "target_type": null,
                        "target_name": "consumed",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "consumed.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                        "target_name": "OneTimeTokenAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "user",
                            "user"
                        ],
                        "usage": "OneTimeTokenAuthenticationToken.authenticated(user,user.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticated",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "authenticated.setDetails(otpAuthenticationToken.getDetails())"
                    },
                    {
                        "target_type": null,
                        "target_name": "otpAuthenticationToken",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "otpAuthenticationToken.getDetails()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supports",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.authentication.AuthenticationProvider",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken": {
        "type": "class",
        "class_name": "OneTimeTokenAuthenticationToken",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [],
        "extendz": "org.springframework.security.authentication.AbstractAuthenticationToken",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "tokenValue",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "OneTimeTokenAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "tokenValue",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.tokenValue"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "OneTimeTokenAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "tokenValue",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "OneTimeTokenAuthenticationToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "unauthenticated",
                "return_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "tokenValue",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "unauthenticated",
                "return_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "tokenValue",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "authenticated",
                "return_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getTokenValue",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.tokenValue"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.tokenValue"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.util.Collection",
            "java.util.Collections",
            "org.springframework.security.authentication.AbstractAuthenticationToken",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.authentication.ott.OneTimeTokenService": {
        "type": "interface",
        "class_name": "OneTimeTokenService",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.ott",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "generate",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "request",
                        "param_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "consume",
                "return_type": "org.springframework.security.authentication.ott.OneTimeToken",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.lang.NonNull",
            "org.springframework.lang.Nullable"
        ]
    },
    "org.springframework.security.authentication.ott.reactive.InMemoryReactiveOneTimeTokenService": {
        "type": "class",
        "class_name": "InMemoryReactiveOneTimeTokenService",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott.reactive",
        "implementz": [
            "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "oneTimeTokenService",
                "field_type": "org.springframework.security.authentication.ott.InMemoryOneTimeTokenService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "generate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "request",
                        "param_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "request"
                        ],
                        "usage": "Mono.just(request).map(this.oneTimeTokenService::generate)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "request"
                        ],
                        "usage": "Mono.just(request)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "consume",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "authenticationToken"
                        ],
                        "usage": "Mono.just(authenticationToken).mapNotNull(this.oneTimeTokenService::consume)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "authenticationToken"
                        ],
                        "usage": "Mono.just(authenticationToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setClock",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "clock",
                        "param_type": "java.time.Clock"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "clock",
                            "\"clock cannot be null\""
                        ],
                        "usage": "Assert.notNull(clock,\"clock cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.InMemoryOneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "setClock",
                        "target_params": [
                            "clock"
                        ],
                        "usage": "this.oneTimeTokenService.setClock(clock)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.time.Clock",
            "reactor.core.publisher.Mono",
            "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
            "org.springframework.security.authentication.ott.InMemoryOneTimeTokenService",
            "org.springframework.security.authentication.ott.OneTimeToken",
            "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.reactive.OneTimeTokenReactiveAuthenticationManager": {
        "type": "class",
        "class_name": "OneTimeTokenReactiveAuthenticationManager",
        "class_type": "class",
        "package": "org.springframework.security.authentication.ott.reactive",
        "implementz": [
            "org.springframework.security.authentication.ReactiveAuthenticationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "oneTimeTokenService",
                "field_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsService",
                "field_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "OneTimeTokenReactiveAuthenticationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "oneTimeTokenService",
                        "param_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService"
                    },
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "oneTimeTokenService",
                            "\"oneTimeTokenService cannot be null\""
                        ],
                        "usage": "Assert.notNull(oneTimeTokenService,\"oneTimeTokenService cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"userDetailsService cannot be null\""
                        ],
                        "usage": "Assert.notNull(userDetailsService,\"userDetailsService cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "consume",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "this.oneTimeTokenService.consume(otpAuthenticationToken).switchIfEmpty(Mono.defer(()->Mono.error(newInvalidOneTimeTokenException(\"Invalid token\")))).flatMap((consumed)->this.userDetailsService.findByUsername(consumed.getUsername())).map(onSuccess(otpAuthenticationToken))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "consume",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "this.oneTimeTokenService.consume(otpAuthenticationToken).switchIfEmpty(Mono.defer(()->Mono.error(newInvalidOneTimeTokenException(\"Invalid token\")))).flatMap((consumed)->this.userDetailsService.findByUsername(consumed.getUsername()))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "consume",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "this.oneTimeTokenService.consume(otpAuthenticationToken).switchIfEmpty(Mono.defer(()->Mono.error(newInvalidOneTimeTokenException(\"Invalid token\"))))"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService",
                        "target_name": "oneTimeTokenService",
                        "target_method_name": "consume",
                        "target_params": [
                            "otpAuthenticationToken"
                        ],
                        "usage": "this.oneTimeTokenService.consume(otpAuthenticationToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oneTimeTokenService"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->Mono.error(newInvalidOneTimeTokenException(\"Invalid token\")))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "newInvalidOneTimeTokenException"
                        ],
                        "usage": "Mono.error(newInvalidOneTimeTokenException(\"Invalid token\"))"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
                        "target_name": "userDetailsService",
                        "target_method_name": "findByUsername",
                        "target_params": [
                            "consumed"
                        ],
                        "usage": "this.userDetailsService.findByUsername(consumed.getUsername())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    },
                    {
                        "target_type": null,
                        "target_name": "consumed",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "consumed.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onSuccess",
                "return_type": "java.util.function.Function",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                        "target_name": "OneTimeTokenAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "user",
                            "user"
                        ],
                        "usage": "OneTimeTokenAuthenticationToken.authenticated(user,user.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": "authenticated",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "token"
                        ],
                        "usage": "authenticated.setDetails(token.getDetails())"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
                        "target_name": "token",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "token.getDetails()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Function",
            "reactor.core.publisher.Mono",
            "org.springframework.security.authentication.ReactiveAuthenticationManager",
            "org.springframework.security.authentication.ott.InvalidOneTimeTokenException",
            "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService": {
        "type": "interface",
        "class_name": "ReactiveOneTimeTokenService",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.ott.reactive",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "generate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "request",
                        "param_type": "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "consume",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authenticationToken",
                        "param_type": "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.authentication.ott.GenerateOneTimeTokenRequest",
            "org.springframework.security.authentication.ott.OneTimeToken",
            "org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken"
        ]
    },
    "org.springframework.security.authentication.password.CompromisedPasswordChecker": {
        "type": "interface",
        "class_name": "CompromisedPasswordChecker",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.password",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authentication.password.CompromisedPasswordDecision",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.lang.NonNull"
        ]
    },
    "org.springframework.security.authentication.password.CompromisedPasswordDecision": {
        "type": "class",
        "class_name": "CompromisedPasswordDecision",
        "class_type": "class",
        "package": "org.springframework.security.authentication.password",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "compromised",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CompromisedPasswordDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "compromised",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromised"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isCompromised",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.compromised"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authentication.password.CompromisedPasswordException": {
        "type": "class",
        "class_name": "CompromisedPasswordException",
        "class_type": "class",
        "package": "org.springframework.security.authentication.password",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CompromisedPasswordException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "message",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "CompromisedPasswordException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "message",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.authentication.password.ReactiveCompromisedPasswordChecker": {
        "type": "interface",
        "class_name": "ReactiveCompromisedPasswordChecker",
        "class_type": "interface",
        "package": "org.springframework.security.authentication.password",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.authorization.AuthenticatedAuthorizationManager": {
        "type": "class",
        "class_name": "AuthenticatedAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorizationStrategy",
                "field_type": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticatedAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthenticatedAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authorizationStrategy",
                        "param_type": "org.springframework.security.authorization.AbstractAuthorizationStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTrustResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "trustResolver",
                        "param_type": "org.springframework.security.authentication.AuthenticationTrustResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
                        "target_name": "authorizationStrategy",
                        "target_method_name": "setTrustResolver",
                        "target_params": [
                            "trustResolver"
                        ],
                        "usage": "this.authorizationStrategy.setTrustResolver(trustResolver)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticated",
                "return_type": "org.springframework.security.authorization.AuthenticatedAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "fullyAuthenticated",
                "return_type": "org.springframework.security.authorization.AuthenticatedAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "rememberMe",
                "return_type": "org.springframework.security.authorization.AuthenticatedAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "anonymous",
                "return_type": "org.springframework.security.authorization.AuthenticatedAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
                        "target_name": "authorizationStrategy",
                        "target_method_name": "isGranted",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authorizationStrategy.isGranted(authentication.get())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationStrategy"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "authentication.get()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.authentication.AuthenticationTrustResolver",
            "org.springframework.security.authentication.AuthenticationTrustResolverImpl",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AbstractAuthorizationStrategy": {
        "type": "class",
        "class_name": "AbstractAuthorizationStrategy",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "trustResolver",
                "field_type": "org.springframework.security.authorization.AuthenticationTrustResolver",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setTrustResolver",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "trustResolver",
                        "param_type": "org.springframework.security.authorization.AuthenticationTrustResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "trustResolver",
                            "\"trustResolver cannot be null\""
                        ],
                        "usage": "Assert.notNull(trustResolver,\"trustResolver cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AuthenticatedAuthorizationStrategy": {
        "type": "class",
        "class_name": "AuthenticatedAuthorizationStrategy",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "trustResolver",
                        "target_method_name": "isAuthenticated",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.trustResolver.isAuthenticated(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.FullyAuthenticatedAuthorizationStrategy": {
        "type": "class",
        "class_name": "FullyAuthenticatedAuthorizationStrategy",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthenticatedAuthorizationStrategy",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "trustResolver",
                        "target_method_name": "isFullyAuthenticated",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.trustResolver.isFullyAuthenticated(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AnonymousAuthorizationStrategy": {
        "type": "class",
        "class_name": "AnonymousAuthorizationStrategy",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "trustResolver",
                        "target_method_name": "isAnonymous",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.trustResolver.isAnonymous(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.RememberMeAuthorizationStrategy": {
        "type": "class",
        "class_name": "RememberMeAuthorizationStrategy",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AbstractAuthorizationStrategy",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "trustResolver",
                        "target_method_name": "isRememberMe",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.trustResolver.isRememberMe(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.trustResolver"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AuthenticatedReactiveAuthorizationManager": {
        "type": "class",
        "class_name": "AuthenticatedReactiveAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.ReactiveAuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authTrustResolver",
                "field_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticatedReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "this::isNotAnonymous"
                        ],
                        "usage": "authentication.filter(this::isNotAnonymous).map(this::getAuthorizationDecision).defaultIfEmpty(newAuthorizationDecision(false))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "this::isNotAnonymous"
                        ],
                        "usage": "authentication.filter(this::isNotAnonymous).map(this::getAuthorizationDecision)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "this::isNotAnonymous"
                        ],
                        "usage": "authentication.filter(this::isNotAnonymous)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorizationDecision",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "isAuthenticated",
                        "target_params": [],
                        "usage": "authentication.isAuthenticated()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isNotAnonymous",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationTrustResolver",
                        "target_name": "authTrustResolver",
                        "target_method_name": "isAnonymous",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.authTrustResolver.isAnonymous(authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authTrustResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authenticated",
                "return_type": "org.springframework.security.authorization.AuthenticatedReactiveAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.authentication.AuthenticationTrustResolver",
            "org.springframework.security.authentication.AuthenticationTrustResolverImpl",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.AuthoritiesAuthorizationManager": {
        "type": "class",
        "class_name": "AuthoritiesAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "roleHierarchy",
                "field_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setRoleHierarchy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "roleHierarchy",
                            "\"roleHierarchy cannot be null\""
                        ],
                        "usage": "Assert.notNull(roleHierarchy,\"roleHierarchy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "authentication.get()"
                    },
                    {
                        "target_type": "org.springframework.security.core.authority.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "createAuthorityList",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "AuthorityUtils.createAuthorityList(authorities)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAuthorized",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "authorities",
                        "target_method_name": "contains",
                        "target_params": [
                            "grantedAuthority"
                        ],
                        "usage": "authorities.contains(grantedAuthority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "grantedAuthority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "grantedAuthority.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
                        "target_name": "roleHierarchy",
                        "target_method_name": "getReachableGrantedAuthorities",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.roleHierarchy.getReachableGrantedAuthorities(authentication.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.roleHierarchy"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "authentication",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "authentication.getAuthorities()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.function.Supplier",
            "org.springframework.security.access.hierarchicalroles.NullRoleHierarchy",
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AuthorityAuthorizationDecision": {
        "type": "class",
        "class_name": "AuthorityAuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthorizationDecision",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.Collection",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorityAuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "granted",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorityAuthorizationDecision",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.authorization.AuthorityAuthorizationManager": {
        "type": "class",
        "class_name": "AuthorityAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "ROLE_PREFIX",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.authorization.AuthoritiesAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.Set",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorityAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "Set",
                        "target_method_name": "of",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "Set.of(authorities)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRoleHierarchy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "roleHierarchy",
                        "param_type": "org.springframework.security.access.hierarchicalroles.RoleHierarchy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthoritiesAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "setRoleHierarchy",
                        "target_params": [
                            "roleHierarchy"
                        ],
                        "usage": "this.delegate.setRoleHierarchy(roleHierarchy)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasRole",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "role",
                            "\"role cannot be null\""
                        ],
                        "usage": "Assert.notNull(role,\"role cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!role"
                        ],
                        "usage": "Assert.isTrue(!role.startsWith(ROLE_PREFIX),()->role+\" should not start with \"+ROLE_PREFIX+\" since \"+ROLE_PREFIX+\" is automatically prepended when using hasRole. Consider using hasAuthority instead.\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "ROLE_PREFIX"
                        ],
                        "usage": "role.startsWith(ROLE_PREFIX)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAuthority",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "authority",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"authority cannot be null\""
                        ],
                        "usage": "Assert.notNull(authority,\"authority cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAnyRole",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasAnyRole",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "roles",
                        "param_type": "org.springframework.security.authorization.String[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "rolePrefix",
                            "\"rolePrefix cannot be null\""
                        ],
                        "usage": "Assert.notNull(rolePrefix,\"rolePrefix cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "roles",
                            "\"roles cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(roles,\"roles cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "roles",
                            "\"roles cannot contain null values\""
                        ],
                        "usage": "Assert.noNullElements(roles,\"roles cannot contain null values\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAnyAuthority",
                "return_type": "org.springframework.security.authorization.AuthorityAuthorizationManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(authorities,\"authorities cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot contain null values\""
                        ],
                        "usage": "Assert.noNullElements(authorities,\"authorities cannot contain null values\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toNamedRolesArray",
                "return_type": "org.springframework.security.authorization.String[]",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "roles",
                        "param_type": "org.springframework.security.authorization.String[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "rolePrefix"
                        ],
                        "usage": "Assert.isTrue(rolePrefix.isEmpty()||!role.startsWith(rolePrefix),()->role+\" should not start with \"+rolePrefix+\" since \"+rolePrefix+\" is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.\")"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "rolePrefix",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "rolePrefix.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "role",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "rolePrefix"
                        ],
                        "usage": "role.startsWith(rolePrefix)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthoritiesAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "authorities"
                        ],
                        "usage": "this.delegate.check(authentication,this.authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Set",
            "java.util.function.Supplier",
            "org.springframework.security.access.hierarchicalroles.NullRoleHierarchy",
            "org.springframework.security.access.hierarchicalroles.RoleHierarchy",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AuthorityReactiveAuthorizationManager": {
        "type": "class",
        "class_name": "AuthorityReactiveAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.ReactiveAuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorityReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": "org.springframework.security.core.authority.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "createAuthorityList",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "AuthorityUtils.createAuthorityList(authorities)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority).any((grantedAuthority)->this.authorities.stream().anyMatch((authority)->authority.getAuthority().equals(grantedAuthority))).map((granted)->((AuthorizationDecision)newAuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(newAuthorityAuthorizationDecision(false,this.authorities))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority).any((grantedAuthority)->this.authorities.stream().anyMatch((authority)->authority.getAuthority().equals(grantedAuthority))).map((granted)->((AuthorizationDecision)newAuthorityAuthorizationDecision(granted,this.authorities)))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority).any((grantedAuthority)->this.authorities.stream().anyMatch((authority)->authority.getAuthority().equals(grantedAuthority)))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "filter",
                        "target_params": [
                            "Authentication::isAuthenticated"
                        ],
                        "usage": "authentication.filter(Authentication::isAuthenticated)"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "authorities",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "this.authorities.stream().anyMatch((authority)->authority.getAuthority().equals(grantedAuthority))"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "authorities",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "this.authorities.stream()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority().equals(grantedAuthority)"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAuthority",
                "return_type": "org.springframework.security.authorization.AuthorityReactiveAuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "authority",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"authority cannot be null\""
                        ],
                        "usage": "Assert.notNull(authority,\"authority cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAnyAuthority",
                "return_type": "org.springframework.security.authorization.AuthorityReactiveAuthorizationManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"authorities cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"authority cannot be null\""
                        ],
                        "usage": "Assert.notNull(authority,\"authority cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasRole",
                "return_type": "org.springframework.security.authorization.AuthorityReactiveAuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "role",
                            "\"role cannot be null\""
                        ],
                        "usage": "Assert.notNull(role,\"role cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasAnyRole",
                "return_type": "org.springframework.security.authorization.AuthorityReactiveAuthorizationManager",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "roles",
                            "\"roles cannot be null\""
                        ],
                        "usage": "Assert.notNull(roles,\"roles cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "role",
                            "\"role cannot be null\""
                        ],
                        "usage": "Assert.notNull(role,\"role cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toNamedRolesArray",
                "return_type": "org.springframework.security.authorization.String[]",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List",
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AuthorizationDecision": {
        "type": "class",
        "class_name": "AuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationResult"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "granted",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "granted",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.granted"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.granted"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationDecision",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.granted"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.authorization.AuthorizationDeniedException": {
        "type": "class",
        "class_name": "AuthorizationDeniedException",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationResult"
        ],
        "extendz": "org.springframework.security.access.AccessDeniedException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "result",
                "field_type": "org.springframework.security.authorization.AuthorizationResult",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationDeniedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationResult",
                            "\"authorizationResult cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationResult,\"authorizationResult cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!authorizationResult"
                        ],
                        "usage": "Assert.isTrue(!authorizationResult.isGranted(),\"Granted authorization results are not supported\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationResult",
                        "target_name": "authorizationResult",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "authorizationResult.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationDeniedException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAuthorizationResult",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AuthorizationEventPublisher": {
        "type": "interface",
        "class_name": "AuthorizationEventPublisher",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    },
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.authorization.event.AuthorizationDeniedEvent",
            "org.springframework.security.authorization.event.AuthorizationGrantedEvent",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.AuthorizationManager": {
        "type": "interface",
        "class_name": "AuthorizationManager",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "verify",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "authorize",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.lang.Nullable",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.AuthorizationManagers": {
        "type": "class",
        "class_name": "AuthorizationManagers",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "anyOf",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "anyOf",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "allAbstainDefaultDecision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "manager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "object"
                        ],
                        "usage": "manager.authorize(authentication,object)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "result.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": "results",
                        "target_method_name": "add",
                        "target_params": [
                            "result"
                        ],
                        "usage": "results.add(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": "results",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "results.isEmpty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "allOf",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "allOf",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "allAbstainDefaultDecision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "manager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "object"
                        ],
                        "usage": "manager.authorize(authentication,object)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "result.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": "results",
                        "target_method_name": "add",
                        "target_params": [
                            "result"
                        ],
                        "usage": "results.add(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": "results",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "results.isEmpty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "not",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "manager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationManager",
                        "target_name": "manager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "object"
                        ],
                        "usage": "manager.authorize(authentication,object)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationManagers",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.List",
            "java.util.function.Supplier",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.CompositeAuthorizationDecision": {
        "type": "class",
        "class_name": "CompositeAuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthorizationDecision",
        "fields": [
            {
                "type": "field",
                "field_name": "results",
                "field_type": "org.springframework.security.authorization.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CompositeAuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "granted",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "results",
                        "param_type": "org.springframework.security.authorization.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.results"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.results"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.NotAuthorizationDecision": {
        "type": "class",
        "class_name": "NotAuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthorizationDecision",
        "fields": [
            {
                "type": "field",
                "field_name": "result",
                "field_type": "org.springframework.security.authorization.AuthorizationResult",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "NotAuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationResult",
                        "target_name": "result",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "result.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AuthorizationManagerCheckAdapter": {
        "type": "interface",
        "class_name": "AuthorizationManagerCheckAdapter",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "authorize",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AuthorizationObservationContext": {
        "type": "class",
        "class_name": "AuthorizationObservationContext",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.Observation.Context",
        "fields": [
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "object",
                "field_type": "org.springframework.security.authorization.T",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationResult",
                "field_type": "org.springframework.security.authorization.AuthorizationResult",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationObservationContext",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "object",
                            "\"object cannot be null\""
                        ],
                        "usage": "Assert.notNull(object,\"object cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.object"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthentication",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getObject",
                "return_type": "org.springframework.security.authorization.T",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.object"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDecision",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationResult"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationResult"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDecision",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationResult"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorizationResult",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationResult"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthorizationResult",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationResult"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.AuthorizationObservationConvention": {
        "type": "class",
        "class_name": "AuthorizationObservationConvention",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "io.micrometer.observation.ObservationConvention"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "OBSERVATION_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getName",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getContextualName",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getLowCardinalityKeyValues",
                "return_type": "io.micrometer.common.KeyValues",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"spring"
                        ],
                        "usage": "KeyValues.of(\"spring.security.authentication.type\",getAuthenticationType(context)).and(\"spring.security.object\",getObjectType(context)).and(\"spring.security.authorization.decision\",getAuthorizationDecision(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"spring"
                        ],
                        "usage": "KeyValues.of(\"spring.security.authentication.type\",getAuthenticationType(context)).and(\"spring.security.object\",getObjectType(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"spring"
                        ],
                        "usage": "KeyValues.of(\"spring.security.authentication.type\",getAuthenticationType(context))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getHighCardinalityKeyValues",
                "return_type": "io.micrometer.common.KeyValues",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"spring"
                        ],
                        "usage": "KeyValues.of(\"spring.security.authentication.authorities\",getAuthorities(context)).and(\"spring.security.authorization.decision.details\",getDecisionDetails(context))"
                    },
                    {
                        "target_type": "io.micrometer.common.KeyValues",
                        "target_name": "KeyValues",
                        "target_method_name": "of",
                        "target_params": [
                            "\"spring"
                        ],
                        "usage": "KeyValues.of(\"spring.security.authentication.authorities\",getAuthorities(context))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "supportsContext",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.Observation.Context"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAuthenticationType",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getObjectType",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getObject",
                        "target_params": [],
                        "usage": "context.getObject()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getObject",
                        "target_params": [],
                        "usage": "context.getObject()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getObject",
                        "target_params": [],
                        "usage": "context.getObject().getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getObject",
                        "target_params": [],
                        "usage": "context.getObject().getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getObject",
                        "target_params": [],
                        "usage": "context.getObject()"
                    },
                    {
                        "target_type": null,
                        "target_name": "className",
                        "target_method_name": "contains",
                        "target_params": [
                            "\"Method\""
                        ],
                        "usage": "className.contains(\"Method\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "className",
                        "target_method_name": "contains",
                        "target_params": [
                            "\"Request\""
                        ],
                        "usage": "className.contains(\"Request\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "className",
                        "target_method_name": "contains",
                        "target_params": [
                            "\"Message\""
                        ],
                        "usage": "className.contains(\"Message\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "className",
                        "target_method_name": "contains",
                        "target_params": [
                            "\"Exchange\""
                        ],
                        "usage": "className.contains(\"Exchange\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorizationDecision",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthorizationResult",
                        "target_params": [],
                        "usage": "context.getAuthorizationResult()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "context"
                        ],
                        "usage": "String.valueOf(context.getAuthorizationResult().isGranted())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthorizationResult",
                        "target_params": [],
                        "usage": "context.getAuthorizationResult().isGranted()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthorizationResult",
                        "target_params": [],
                        "usage": "context.getAuthorizationResult()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "context"
                        ],
                        "usage": "String.valueOf(context.getAuthentication().getAuthorities())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication().getAuthorities()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDecisionDetails",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.authorization.AuthorizationObservationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthorizationResult",
                        "target_params": [],
                        "usage": "context.getAuthorizationResult()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationObservationContext",
                        "target_name": "context",
                        "target_method_name": "getAuthorizationResult",
                        "target_params": [],
                        "usage": "context.getAuthorizationResult()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "decision"
                        ],
                        "usage": "String.valueOf(decision)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.common.KeyValues",
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "org.aopalliance.intercept.MethodInvocation"
        ]
    },
    "org.springframework.security.authorization.AuthorizationProxyFactory": {
        "type": "interface",
        "class_name": "AuthorizationProxyFactory",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "proxy",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.AuthorizationResult": {
        "type": "interface",
        "class_name": "AuthorizationResult",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGranted",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable"
        ]
    },
    "org.springframework.security.authorization.ExpressionAuthorizationDecision": {
        "type": "class",
        "class_name": "ExpressionAuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthorizationDecision",
        "fields": [
            {
                "type": "field",
                "field_name": "expression",
                "field_type": "org.springframework.expression.Expression",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionAuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "granted",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "expressionAttribute",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpression",
                "return_type": "org.springframework.expression.Expression",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.ExpressionAuthorizationDecision",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expression",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "this.expression.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression"
        ]
    },
    "org.springframework.security.authorization.ObservationAuthorizationManager": {
        "type": "class",
        "class_name": "ObservationAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "io.micrometer.observation.ObservationRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convention",
                "field_type": "io.micrometer.observation.ObservationConvention",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ObservationAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "registry",
                        "param_type": "io.micrometer.observation.ObservationRegistry"
                    },
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthentication",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "context.setAuthentication(authentication.get())"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "authentication",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "authentication.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).start()"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "openScope",
                        "target_params": [],
                        "usage": "observation.openScope()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "wrapped",
                            "object"
                        ],
                        "usage": "this.delegate.check(wrapped,object)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthorizationResult",
                        "target_params": [
                            "decision"
                        ],
                        "usage": "context.setAuthorizationResult(decision)"
                    },
                    {
                        "target_type": null,
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "error",
                        "target_params": [
                            "newAccessDeniedException"
                        ],
                        "usage": "observation.error(newAccessDeniedException(this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access Denied\")))"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"AbstractAccessDecisionManager"
                        ],
                        "usage": "this.messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access Denied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "error",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "observation.error(ex)"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "stop",
                        "target_params": [],
                        "usage": "observation.stop()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setObservationConvention",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convention",
                        "param_type": "io.micrometer.observation.ObservationConvention"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "convention",
                            "\"The observation convention cannot be null\""
                        ],
                        "usage": "Assert.notNull(convention,\"The observation convention cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "methodInvocation",
                            "authorizationResult"
                        ],
                        "usage": "this.handler.handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "methodInvocationResult",
                            "authorizationResult"
                        ],
                        "usage": "this.handler.handleDeniedInvocationResult(methodInvocationResult,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "java.util.function.Supplier",
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "io.micrometer.observation.ObservationRegistry",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
            "org.springframework.security.authorization.method.MethodInvocationResult",
            "org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.ObservationReactiveAuthorizationManager": {
        "type": "class",
        "class_name": "ObservationReactiveAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.ReactiveAuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "io.micrometer.observation.ObservationRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convention",
                "field_type": "io.micrometer.observation.ObservationConvention",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ObservationReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "registry",
                        "param_type": "io.micrometer.observation.ObservationRegistry"
                    },
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.authorization.ReactiveAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->{context.setAuthentication(auth);returncontext.getAuthentication();})"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthentication",
                        "target_params": [
                            "auth"
                        ],
                        "usage": "context.setAuthentication(auth)"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [],
                        "usage": "Mono.deferContextual((contextView)->{Observationobservation=Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)).start();returnthis.delegate.check(wrapped,object).doOnSuccess((decision)->{context.setAuthorizationResult(decision);if(decision==null||!decision.isGranted()){observation.error(newAccessDeniedException(\"Access Denied\"));}observation.stop();}).doOnCancel(observation::stop).doOnError((t)->{observation.error(t);observation.stop();});})"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)).start()"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry).parentObservation(contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null))"
                    },
                    {
                        "target_type": "io.micrometer.observation.Observation",
                        "target_name": "Observation",
                        "target_method_name": "createNotStarted",
                        "target_params": [
                            "convention",
                            ""
                        ],
                        "usage": "Observation.createNotStarted(this.convention,()->context,this.registry)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "contextView",
                        "target_method_name": "getOrDefault",
                        "target_params": [
                            "ObservationThreadLocalAccessor"
                        ],
                        "usage": "contextView.getOrDefault(ObservationThreadLocalAccessor.KEY,null)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "wrapped",
                            "object"
                        ],
                        "usage": "this.delegate.check(wrapped,object).doOnSuccess((decision)->{context.setAuthorizationResult(decision);if(decision==null||!decision.isGranted()){observation.error(newAccessDeniedException(\"Access Denied\"));}observation.stop();}).doOnCancel(observation::stop).doOnError((t)->{observation.error(t);observation.stop();})"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "wrapped",
                            "object"
                        ],
                        "usage": "this.delegate.check(wrapped,object).doOnSuccess((decision)->{context.setAuthorizationResult(decision);if(decision==null||!decision.isGranted()){observation.error(newAccessDeniedException(\"Access Denied\"));}observation.stop();}).doOnCancel(observation::stop)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "wrapped",
                            "object"
                        ],
                        "usage": "this.delegate.check(wrapped,object).doOnSuccess((decision)->{context.setAuthorizationResult(decision);if(decision==null||!decision.isGranted()){observation.error(newAccessDeniedException(\"Access Denied\"));}observation.stop();})"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "wrapped",
                            "object"
                        ],
                        "usage": "this.delegate.check(wrapped,object)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthorizationResult",
                        "target_params": [
                            "decision"
                        ],
                        "usage": "context.setAuthorizationResult(decision)"
                    },
                    {
                        "target_type": null,
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "error",
                        "target_params": [
                            "newAccessDeniedException"
                        ],
                        "usage": "observation.error(newAccessDeniedException(\"Access Denied\"))"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "stop",
                        "target_params": [],
                        "usage": "observation.stop()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "error",
                        "target_params": [
                            "t"
                        ],
                        "usage": "observation.error(t)"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "stop",
                        "target_params": [],
                        "usage": "observation.stop()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setObservationConvention",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convention",
                        "param_type": "io.micrometer.observation.ObservationConvention"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "convention",
                            "\"The observation convention cannot be null\""
                        ],
                        "usage": "Assert.notNull(convention,\"The observation convention cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convention"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "methodInvocation",
                            "authorizationResult"
                        ],
                        "usage": "this.handler.handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "methodInvocationResult",
                            "authorizationResult"
                        ],
                        "usage": "this.handler.handleDeniedInvocationResult(methodInvocationResult,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationConvention",
            "io.micrometer.observation.ObservationRegistry",
            "io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor",
            "org.aopalliance.intercept.MethodInvocation",
            "reactor.core.publisher.Mono",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
            "org.springframework.security.authorization.method.MethodInvocationResult",
            "org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.ReactiveAuthorizationManager": {
        "type": "interface",
        "class_name": "ReactiveAuthorizationManager",
        "class_type": "interface",
        "package": "org.springframework.security.authorization",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "verify",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "this",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "object.filter"
                        ],
                        "usage": "check(authentication,object).filter(AuthorizationDecision::isGranted).switchIfEmpty(Mono.defer(()->Mono.error(newAccessDeniedException(\"Access Denied\")))).flatMap((decision)->Mono.empty())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "this",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "object.filter"
                        ],
                        "usage": "check(authentication,object).filter(AuthorizationDecision::isGranted).switchIfEmpty(Mono.defer(()->Mono.error(newAccessDeniedException(\"Access Denied\"))))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "this",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "object.filter"
                        ],
                        "usage": "check(authentication,object).filter(AuthorizationDecision::isGranted)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->Mono.error(newAccessDeniedException(\"Access Denied\")))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "newAccessDeniedException"
                        ],
                        "usage": "Mono.error(newAccessDeniedException(\"Access Denied\"))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorize",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "this",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "object.cast"
                        ],
                        "usage": "check(authentication,object).cast(AuthorizationResult.class)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.SingleResultAuthorizationManager": {
        "type": "class",
        "class_name": "SingleResultAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "DENY_MANAGER",
                "field_type": "org.springframework.security.authorization.SingleResultAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "PERMIT_MANAGER",
                "field_type": "org.springframework.security.authorization.SingleResultAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "result",
                "field_type": "org.springframework.security.authorization.AuthorizationResult",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SingleResultAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "result",
                            "\"result cannot be null\""
                        ],
                        "usage": "Assert.notNull(result,\"result cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.C"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorize",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.C"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "denyAll",
                "return_type": "org.springframework.security.authorization.SingleResultAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "permitAll",
                "return_type": "org.springframework.security.authorization.SingleResultAuthorizationManager",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.SpringAuthorizationEventPublisher": {
        "type": "class",
        "class_name": "SpringAuthorizationEventPublisher",
        "class_type": "class",
        "package": "org.springframework.security.authorization",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationEventPublisher"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "eventPublisher",
                "field_type": "org.springframework.context.ApplicationEventPublisher",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SpringAuthorizationEventPublisher",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "eventPublisher",
                        "param_type": "org.springframework.context.ApplicationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "eventPublisher",
                            "\"eventPublisher cannot be null\""
                        ],
                        "usage": "Assert.notNull(eventPublisher,\"eventPublisher cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    },
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.T"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationResult",
                        "target_name": "result",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "result.isGranted()"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishEvent",
                        "target_params": [
                            "failure"
                        ],
                        "usage": "this.eventPublisher.publishEvent(failure)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.context.ApplicationEventPublisher",
            "org.springframework.security.authorization.event.AuthorizationDeniedEvent",
            "org.springframework.security.authorization.event.AuthorizationGrantedEvent",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.event.AuthorizationDeniedEvent": {
        "type": "class",
        "class_name": "AuthorizationDeniedEvent",
        "class_type": "class",
        "package": "org.springframework.security.authorization.event",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.event.AuthorizationEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationDeniedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.event.T"
                    },
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationDeniedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.event.T"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getObject",
                "return_type": "org.springframework.security.authorization.event.T",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.context.ApplicationEvent",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.event.AuthorizationEvent": {
        "type": "class",
        "class_name": "AuthorizationEvent",
        "class_type": "class",
        "package": "org.springframework.security.authorization.event",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "result",
                "field_type": "org.springframework.security.authorization.AuthorizationResult",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authentication",
                            "\"authentication supplier cannot be null\""
                        ],
                        "usage": "Assert.notNull(authentication,\"authentication supplier cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authentication",
                            "\"authentication supplier cannot be null\""
                        ],
                        "usage": "Assert.notNull(authentication,\"authentication supplier cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getObject",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAuthorizationDecision",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorizationResult",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.util.function.Supplier",
            "org.springframework.context.ApplicationEvent",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.event.AuthorizationGrantedEvent": {
        "type": "class",
        "class_name": "AuthorizationGrantedEvent",
        "class_type": "class",
        "package": "org.springframework.security.authorization.event",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.event.AuthorizationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationGrantedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.event.T"
                    },
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationGrantedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.event.T"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getObject",
                "return_type": "org.springframework.security.authorization.event.T",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "java.util.function.Supplier",
            "org.springframework.context.ApplicationEvent",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry": {
        "type": "class",
        "class_name": "AbstractAuthorizationManagerRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "NULL_MANAGER",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "cachedManagers",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getManager",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "methodInvocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "methodInvocation.getMethod()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "methodInvocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "methodInvocation.getThis()"
                    },
                    {
                        "target_type": null,
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "cachedManagers",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "cacheKey",
                            ""
                        ],
                        "usage": "this.cachedManagers.computeIfAbsent(cacheKey,(k)->resolveManager(method,targetClass))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cachedManagers"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveManager",
                "return_type": "org.springframework.security.authorization.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Map",
            "java.util.concurrent.ConcurrentHashMap",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.core.MethodClassKey",
            "org.springframework.lang.NonNull",
            "org.springframework.security.authorization.AuthorizationManager"
        ]
    },
    "org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry": {
        "type": "class",
        "class_name": "AbstractExpressionAttributeRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "cachedAttributes",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expressionHandler",
                "field_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getAttribute",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "mi.getThis()"
                    },
                    {
                        "target_type": null,
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttribute",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "cachedAttributes",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "cacheKey",
                            ""
                        ],
                        "usage": "this.cachedAttributes.computeIfAbsent(cacheKey,(k)->resolveAttribute(method,targetClass))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cachedAttributes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpressionHandler",
                "return_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "setIgnoreUnknown",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "adapter.setIgnoreUnknown(defaults.isIgnoreUnknown())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults",
                        "target_name": "defaults",
                        "target_method_name": "isIgnoreUnknown",
                        "target_params": [],
                        "usage": "defaults.isIgnoreUnknown()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "adapter",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "resolveAttribute",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "targetClass",
                "return_type": "java.lang.Class",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Map",
            "java.util.concurrent.ConcurrentHashMap",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.core.MethodClassKey",
            "org.springframework.lang.NonNull",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationAdvisor": {
        "type": "interface",
        "class_name": "AuthorizationAdvisor",
        "class_type": "interface",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInterceptor",
            "org.springframework.aop.PointcutAdvisor",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.core.Ordered"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory": {
        "type": "class",
        "class_name": "AuthorizationAdvisorProxyFactory",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationProxyFactory,Iterable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "isReactivePresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEFAULT_VISITOR",
                "field_type": "org.springframework.security.authorization.method.TargetVisitor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEFAULT_VISITOR_SKIP_VALUE_TYPES",
                "field_type": "org.springframework.security.authorization.method.TargetVisitor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationProxy",
                "field_type": "org.springframework.security.authorization.method.AuthorizationProxyMethodInterceptor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "advisors",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "visitor",
                "field_type": "org.springframework.security.authorization.method.TargetVisitor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationAdvisorProxyFactory",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "advisors",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
                        "target_name": "AnnotationAwareOrderComparator",
                        "target_method_name": "sort",
                        "target_params": [
                            "advisors"
                        ],
                        "usage": "AnnotationAwareOrderComparator.sort(this.advisors)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withDefaults",
                "return_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "AuthorizationManagerBeforeMethodInterceptor"
                        ],
                        "usage": "advisors.add(AuthorizationManagerBeforeMethodInterceptor.preAuthorize())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                        "target_name": "AuthorizationManagerBeforeMethodInterceptor",
                        "target_method_name": "preAuthorize",
                        "target_params": [],
                        "usage": "AuthorizationManagerBeforeMethodInterceptor.preAuthorize()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "AuthorizationManagerAfterMethodInterceptor"
                        ],
                        "usage": "advisors.add(AuthorizationManagerAfterMethodInterceptor.postAuthorize())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
                        "target_name": "AuthorizationManagerAfterMethodInterceptor",
                        "target_method_name": "postAuthorize",
                        "target_params": [],
                        "usage": "AuthorizationManagerAfterMethodInterceptor.postAuthorize()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "newPreFilterAuthorizationMethodInterceptor"
                        ],
                        "usage": "advisors.add(newPreFilterAuthorizationMethodInterceptor())"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "newPostFilterAuthorizationMethodInterceptor"
                        ],
                        "usage": "advisors.add(newPostFilterAuthorizationMethodInterceptor())"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxyFactory",
                        "target_method_name": "addAdvisor",
                        "target_params": [
                            "newAuthorizeReturnObjectMethodInterceptor"
                        ],
                        "usage": "proxyFactory.addAdvisor(newAuthorizeReturnObjectMethodInterceptor(proxyFactory))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withReactiveDefaults",
                "return_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "AuthorizationManagerBeforeReactiveMethodInterceptor"
                        ],
                        "usage": "advisors.add(AuthorizationManagerBeforeReactiveMethodInterceptor.preAuthorize())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor",
                        "target_name": "AuthorizationManagerBeforeReactiveMethodInterceptor",
                        "target_method_name": "preAuthorize",
                        "target_params": [],
                        "usage": "AuthorizationManagerBeforeReactiveMethodInterceptor.preAuthorize()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "AuthorizationManagerAfterReactiveMethodInterceptor"
                        ],
                        "usage": "advisors.add(AuthorizationManagerAfterReactiveMethodInterceptor.postAuthorize())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor",
                        "target_name": "AuthorizationManagerAfterReactiveMethodInterceptor",
                        "target_method_name": "postAuthorize",
                        "target_params": [],
                        "usage": "AuthorizationManagerAfterReactiveMethodInterceptor.postAuthorize()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "newPreFilterAuthorizationReactiveMethodInterceptor"
                        ],
                        "usage": "advisors.add(newPreFilterAuthorizationReactiveMethodInterceptor())"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "newPostFilterAuthorizationReactiveMethodInterceptor"
                        ],
                        "usage": "advisors.add(newPostFilterAuthorizationReactiveMethodInterceptor())"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxyFactory",
                        "target_method_name": "addAdvisor",
                        "target_params": [
                            "newAuthorizeReturnObjectMethodInterceptor"
                        ],
                        "usage": "proxyFactory.addAdvisor(newAuthorizeReturnObjectMethodInterceptor(proxyFactory))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxy",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
                        "target_name": "AnnotationAwareOrderComparator",
                        "target_method_name": "sort",
                        "target_params": [
                            "advisors"
                        ],
                        "usage": "AnnotationAwareOrderComparator.sort(this.advisors)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.TargetVisitor",
                        "target_name": "visitor",
                        "target_method_name": "visit",
                        "target_params": [
                            "this",
                            "target"
                        ],
                        "usage": "this.visitor.visit(this,target)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitor"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addAdvisors",
                        "target_params": [
                            "authorizationProxy"
                        ],
                        "usage": "factory.addAdvisors(this.authorizationProxy)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationProxy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addAdvisors",
                        "target_params": [
                            "advisor"
                        ],
                        "usage": "factory.addAdvisors(advisor)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addInterface",
                        "target_params": [
                            "AuthorizationProxy"
                        ],
                        "usage": "factory.addInterface(AuthorizationProxy.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setOpaque",
                        "target_params": [
                            "true"
                        ],
                        "usage": "factory.setOpaque(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setProxyTargetClass",
                        "target_params": [
                            "!Modifier"
                        ],
                        "usage": "factory.setProxyTargetClass(!Modifier.isFinal(target.getClass().getModifiers()))"
                    },
                    {
                        "target_type": "java.lang.reflect.Modifier",
                        "target_name": "Modifier",
                        "target_method_name": "isFinal",
                        "target_params": [
                            "target"
                        ],
                        "usage": "Modifier.isFinal(target.getClass().getModifiers())"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass().getModifiers()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "getProxy",
                        "target_params": [],
                        "usage": "factory.getProxy()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAdvisors",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "advisors"
                        ],
                        "usage": "List.of(advisors)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAdvisors",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "advisors",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addAdvisor",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "advisor",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisor"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "add",
                        "target_params": [
                            "advisor"
                        ],
                        "usage": "this.advisors.add(advisor)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTargetVisitor",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "visitor",
                        "param_type": "org.springframework.security.authorization.method.TargetVisitor"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "visitor",
                            "\"delegate cannot be null\""
                        ],
                        "usage": "Assert.notNull(visitor,\"delegate cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.visitor"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "iterator",
                "return_type": "java.util.Iterator",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "advisors",
                        "target_method_name": "iterator",
                        "target_params": [],
                        "usage": "this.advisors.iterator()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.advisors"
                    }
                ]
            }
        ],
        "methodCalls": [
            "ClassUtils.isPresent(\"reactor.core.publisher.Mono\",null)",
            "TargetVisitor.of(newClassVisitor(),newReactiveTypeVisitor(),newContainerTypeVisitor())",
            "TargetVisitor.of(newClassVisitor(),newContainerTypeVisitor())",
            "TargetVisitor.of(newClassVisitor(),newIgnoreValueTypeVisitor(),DEFAULT_VISITOR)"
        ],
        "imports": [
            "java.lang.reflect.Array",
            "java.lang.reflect.Method",
            "java.lang.reflect.Modifier",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.Iterator",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Map",
            "java.util.Optional",
            "java.util.Queue",
            "java.util.Set",
            "java.util.SortedMap",
            "java.util.SortedSet",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.util.function.Supplier",
            "java.util.stream.Stream",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInvocation",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.aop.Advisor",
            "org.springframework.aop.Pointcut",
            "org.springframework.aop.framework.AopInfrastructureBean",
            "org.springframework.aop.framework.ProxyFactory",
            "org.springframework.core.annotation.AnnotationAwareOrderComparator",
            "org.springframework.lang.NonNull",
            "org.springframework.security.authorization.AuthorizationProxyFactory",
            "org.springframework.util.Assert",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.authorization.method.TargetVisitor": {
        "type": "interface",
        "class_name": "TargetVisitor",
        "class_type": "interface",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "visit",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory"
                    },
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "defaults",
                "return_type": "org.springframework.security.authorization.method.TargetVisitor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "defaultsSkipValueTypes",
                "return_type": "org.springframework.security.authorization.method.TargetVisitor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "of",
                "return_type": "org.springframework.security.authorization.method.TargetVisitor",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "visitor",
                        "target_method_name": "visit",
                        "target_params": [
                            "proxyFactory",
                            "target"
                        ],
                        "usage": "visitor.visit(proxyFactory,target)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.IgnoreValueTypeVisitor": {
        "type": "class",
        "class_name": "IgnoreValueTypeVisitor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.TargetVisitor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "visit",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "isSimpleValueType",
                        "target_params": [
                            "object"
                        ],
                        "usage": "ClassUtils.isSimpleValueType(object.getClass())"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.ClassVisitor": {
        "type": "class",
        "class_name": "ClassVisitor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.TargetVisitor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorizationProxy",
                "field_type": "org.springframework.security.authorization.method.AuthorizationProxyMethodInterceptor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "visit",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setTargetClass",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "factory.setTargetClass(targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setInterfaces",
                        "target_params": [
                            "ClassUtils"
                        ],
                        "usage": "factory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "getAllInterfacesForClass",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "ClassUtils.getAllInterfacesForClass(targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setOpaque",
                        "target_params": [
                            "true"
                        ],
                        "usage": "factory.setOpaque(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "setProxyTargetClass",
                        "target_params": [
                            "!Modifier"
                        ],
                        "usage": "factory.setProxyTargetClass(!Modifier.isFinal(targetClass.getModifiers()))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Modifier",
                        "target_name": "Modifier",
                        "target_method_name": "isFinal",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "Modifier.isFinal(targetClass.getModifiers())"
                    },
                    {
                        "target_type": null,
                        "target_name": "targetClass",
                        "target_method_name": "getModifiers",
                        "target_params": [],
                        "usage": "targetClass.getModifiers()"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addAdvisor",
                        "target_params": [
                            "authorizationProxy"
                        ],
                        "usage": "factory.addAdvisor(this.authorizationProxy)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationProxy"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addAdvisors",
                        "target_params": [
                            "advisor"
                        ],
                        "usage": "factory.addAdvisors(advisor)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "addInterface",
                        "target_params": [
                            "AuthorizationProxy"
                        ],
                        "usage": "factory.addInterface(AuthorizationProxy.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "factory",
                        "target_method_name": "getProxyClass",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "factory.getProxyClass(getClass().getClassLoader())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ClassVisitor",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getClassLoader"
                        ],
                        "usage": "getClass().getClassLoader()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.ContainerTypeVisitor": {
        "type": "class",
        "class_name": "ContainerTypeVisitor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.TargetVisitor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "visit",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory"
                    },
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass().isArray()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyCast",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "target",
                        "param_type": "org.springframework.security.authorization.method.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory",
                        "target_name": "proxyFactory",
                        "target_method_name": "proxy",
                        "target_params": [
                            "target"
                        ],
                        "usage": "proxyFactory.proxy(target)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyIterable",
                "return_type": "org.springframework.security.authorization.method.Iterable",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "iterable",
                        "param_type": "org.springframework.security.authorization.method.Iterable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Iterable",
                        "target_name": "iterable",
                        "target_method_name": "iterator",
                        "target_params": [],
                        "usage": "iterable.iterator()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyIterator",
                "return_type": "org.springframework.security.authorization.method.Iterator",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "iterator",
                        "param_type": "org.springframework.security.authorization.method.Iterator"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "hasNext",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "iterator",
                        "target_method_name": "hasNext",
                        "target_params": [],
                        "usage": "iterator.hasNext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "next",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "iterator",
                        "target_method_name": "next",
                        "target_params": [],
                        "usage": "iterator.next()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxySortedSet",
                "return_type": "org.springframework.security.authorization.method.SortedSet",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "set",
                        "param_type": "org.springframework.security.authorization.method.SortedSet"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedSet",
                        "target_name": "set",
                        "target_method_name": "comparator",
                        "target_params": [],
                        "usage": "set.comparator()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "add",
                        "target_params": [
                            "proxyCast"
                        ],
                        "usage": "proxies.add(proxyCast(proxyFactory,toProxy))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedSet",
                        "target_name": "set",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "set.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedSet",
                        "target_name": "set",
                        "target_method_name": "addAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "set.addAll(proxies)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSortedSet",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "Collections.unmodifiableSortedSet(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxySet",
                "return_type": "org.springframework.security.authorization.method.Set",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "set",
                        "param_type": "org.springframework.security.authorization.method.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Set",
                        "target_name": "set",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "set.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "add",
                        "target_params": [
                            "proxyCast"
                        ],
                        "usage": "proxies.add(proxyCast(proxyFactory,toProxy))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Set",
                        "target_name": "set",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "set.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Set",
                        "target_name": "set",
                        "target_method_name": "addAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "set.addAll(proxies)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "Collections.unmodifiableSet(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyQueue",
                "return_type": "org.springframework.security.authorization.method.Queue",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "queue",
                        "param_type": "org.springframework.security.authorization.method.Queue"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "add",
                        "target_params": [
                            "proxyCast"
                        ],
                        "usage": "proxies.add(proxyCast(proxyFactory,toProxy))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Queue",
                        "target_name": "queue",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "queue.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Queue",
                        "target_name": "queue",
                        "target_method_name": "addAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "queue.addAll(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyList",
                "return_type": "org.springframework.security.authorization.method.List",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "list",
                        "param_type": "org.springframework.security.authorization.method.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.List",
                        "target_name": "list",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "list.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "add",
                        "target_params": [
                            "proxyCast"
                        ],
                        "usage": "proxies.add(proxyCast(proxyFactory,toProxy))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.List",
                        "target_name": "list",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "list.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.List",
                        "target_name": "list",
                        "target_method_name": "addAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "list.addAll(proxies)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableList",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "Collections.unmodifiableList(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyArray",
                "return_type": "org.springframework.security.authorization.method.Object[]",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "objects",
                        "param_type": "org.springframework.security.authorization.method.Object[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "objects.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "add",
                        "target_params": [
                            "proxyFactory"
                        ],
                        "usage": "retain.add(proxyFactory.proxy(object))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory",
                        "target_name": "proxyFactory",
                        "target_method_name": "proxy",
                        "target_params": [
                            "object"
                        ],
                        "usage": "proxyFactory.proxy(object)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Array",
                        "target_name": "Array",
                        "target_method_name": "newInstance",
                        "target_params": [
                            "objects"
                        ],
                        "usage": "Array.newInstance(objects.getClass().getComponentType(),retain.size())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Object[]",
                        "target_name": "objects",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "objects.getClass().getComponentType()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Object[]",
                        "target_name": "objects",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "objects.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "retain.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "retain.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "retain",
                        "target_method_name": "get",
                        "target_params": [
                            "i"
                        ],
                        "usage": "retain.get(i)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxySortedMap",
                "return_type": "org.springframework.security.authorization.method.SortedMap",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "entries",
                        "param_type": "org.springframework.security.authorization.method.SortedMap"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedMap",
                        "target_name": "entries",
                        "target_method_name": "comparator",
                        "target_params": [],
                        "usage": "entries.comparator()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedMap",
                        "target_name": "entries",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "entries.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "put",
                        "target_params": [
                            "entry"
                        ],
                        "usage": "proxies.put(entry.getKey(),proxyCast(proxyFactory,entry.getValue()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedMap",
                        "target_name": "entries",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "entries.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SortedMap",
                        "target_name": "entries",
                        "target_method_name": "putAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "entries.putAll(proxies)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSortedMap",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "Collections.unmodifiableSortedMap(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyMap",
                "return_type": "org.springframework.security.authorization.method.Map",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "entries",
                        "param_type": "org.springframework.security.authorization.method.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Map",
                        "target_name": "entries",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "entries.size()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Map",
                        "target_name": "entries",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "entries.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "proxies",
                        "target_method_name": "put",
                        "target_params": [
                            "entry"
                        ],
                        "usage": "proxies.put(entry.getKey(),proxyCast(proxyFactory,entry.getValue()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Map",
                        "target_name": "entries",
                        "target_method_name": "clear",
                        "target_params": [],
                        "usage": "entries.clear()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Map",
                        "target_name": "entries",
                        "target_method_name": "putAll",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "entries.putAll(proxies)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableMap",
                        "target_params": [
                            "proxies"
                        ],
                        "usage": "Collections.unmodifiableMap(proxies)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyStream",
                "return_type": "org.springframework.security.authorization.method.Stream",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "stream",
                        "param_type": "org.springframework.security.authorization.method.Stream"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Stream",
                        "target_name": "stream",
                        "target_method_name": "map",
                        "target_params": [
                            "proxyFactory::proxy"
                        ],
                        "usage": "stream.map(proxyFactory::proxy).onClose(stream::close)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Stream",
                        "target_name": "stream",
                        "target_method_name": "map",
                        "target_params": [
                            "proxyFactory::proxy"
                        ],
                        "usage": "stream.map(proxyFactory::proxy)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyOptional",
                "return_type": "org.springframework.security.authorization.method.Optional",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "optional",
                        "param_type": "org.springframework.security.authorization.method.Optional"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Optional",
                        "target_name": "optional",
                        "target_method_name": "map",
                        "target_params": [
                            "proxyFactory::proxy"
                        ],
                        "usage": "optional.map(proxyFactory::proxy)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxySupplier",
                "return_type": "org.springframework.security.authorization.method.Supplier",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "supplier",
                        "param_type": "org.springframework.security.authorization.method.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory",
                        "target_name": "proxyFactory",
                        "target_method_name": "proxy",
                        "target_params": [
                            "supplier"
                        ],
                        "usage": "proxyFactory.proxy(supplier.get())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Supplier",
                        "target_name": "supplier",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "supplier.get()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.ReactiveTypeVisitor": {
        "type": "class",
        "class_name": "ReactiveTypeVisitor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.TargetVisitor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "visit",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory"
                    },
                    {
                        "param_name": "target",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "proxyMono",
                "return_type": "org.springframework.security.authorization.method.Mono",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "mono",
                        "param_type": "org.springframework.security.authorization.method.Mono"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Mono",
                        "target_name": "mono",
                        "target_method_name": "map",
                        "target_params": [
                            "proxyFactory::proxy"
                        ],
                        "usage": "mono.map(proxyFactory::proxy)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proxyFlux",
                "return_type": "org.springframework.security.authorization.method.Flux",
                "formal_params": [
                    {
                        "param_name": "proxyFactory",
                        "param_type": "org.springframework.security.authorization.method.AuthorizationProxyFactory"
                    },
                    {
                        "param_name": "flux",
                        "param_type": "org.springframework.security.authorization.method.Flux"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Flux",
                        "target_name": "flux",
                        "target_method_name": "map",
                        "target_params": [
                            "proxyFactory::proxy"
                        ],
                        "usage": "flux.map(proxyFactory::proxy)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.AuthorizationProxyMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizationProxyMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "GET_TARGET_METHOD",
                "field_type": "org.springframework.security.authorization.method.Method",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "invocation",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod().equals(GET_TARGET_METHOD)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "invocation.getMethod()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "invocation.getThis()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocation",
                        "target_name": "invocation",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "invocation.proceed()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.security.authorization.method.Pointcut",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.springframework.security.authorization.method.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "ClassUtils.getMethod(AuthorizationProxy.class,\"toAuthorizedTarget\")"
        ],
        "imports": []
    },
    "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizationManagerAfterMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationManager",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "eventPublisher",
                "field_type": "org.springframework.security.authorization.AuthorizationEventPublisher",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationManagerAfterMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "pointcut",
                        "param_type": "org.springframework.aop.Pointcut"
                    },
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "pointcut",
                            "\"pointcut cannot be null\""
                        ],
                        "usage": "Assert.notNull(pointcut,\"pointcut cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationManager",
                            "\"authorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationManager,\"authorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PostAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PostAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.POST_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PostAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PostAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.POST_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "ex"
                        ],
                        "usage": "handler.handleDeniedInvocation(mi,ex)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "ex"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(mi,ex)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthorizationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "eventPublisher",
                        "param_type": "org.springframework.security.authorization.AuthorizationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "eventPublisher",
                            "\"eventPublisher cannot be null\""
                        ],
                        "usage": "Assert.notNull(eventPublisher,\"eventPublisher cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "strategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "attemptAuthorization",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "result",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Authorizing method invocation \"+mi))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Authorizing method invocation \"+mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "this::getAuthentication",
                            "object"
                        ],
                        "usage": "this.authorizationManager.authorize(this::getAuthentication,object)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishAuthorizationEvent",
                        "target_params": [
                            "this::getAuthentication",
                            "object",
                            "authorizationResult"
                        ],
                        "usage": "this.eventPublisher.publishAuthorizationEvent(this::getAuthentication,object,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    },
                    {
                        "target_type": null,
                        "target_name": "authorizationResult",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "authorizationResult.isGranted()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Failed to authorize \"+mi+\" with authorization manager \"+this.authorizationManager+\" and authorizationResult \"+authorizationResult))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Failed to authorize \"+mi+\" with authorization manager \"+this.authorizationManager+\" and authorizationResult \"+authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Authorized method invocation \"+mi))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Authorized method invocation \"+mi)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handlePostInvocationDenied",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "deniedHandler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "mi",
                            "result"
                        ],
                        "usage": "deniedHandler.handleDeniedInvocationResult(mi,result)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "mi",
                            "result"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocationResult(mi,result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext().getAuthentication()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(this.getClass())",
            "this.getClass()"
        ],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.aop.Pointcut",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationEventPublisher",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizationManagerAfterReactiveMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "COROUTINES_FLOW_CLASS_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "RETURN_TYPE_METHOD_PARAMETER_INDEX",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationManager",
                "field_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.ReactiveAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PostAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PostAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.POST_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationManagerAfterReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "pointcut",
                        "param_type": "org.springframework.aop.Pointcut"
                    },
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.ReactiveAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "pointcut",
                            "\"pointcut cannot be null\""
                        ],
                        "usage": "Assert.notNull(pointcut,\"pointcut cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationManager",
                            "\"authorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationManager,\"authorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    },
                    {
                        "target_type": "org.springframework.core.KotlinDetector",
                        "target_name": "KotlinDetector",
                        "target_method_name": "isSuspendingFunction",
                        "target_params": [
                            "method"
                        ],
                        "usage": "KotlinDetector.isSuspendingFunction(method)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.COROUTINES_FLOW_CLASS_NAME",
                        "target_name": "COROUTINES_FLOW_CLASS_NAME",
                        "target_method_name": "equals",
                        "target_params": [
                            "newMethodParameter"
                        ],
                        "usage": "COROUTINES_FLOW_CLASS_NAME.equals(newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "hasReactiveReturnType",
                            ""
                        ],
                        "usage": "Assert.state(hasReactiveReturnType,()->\"The returnType \"+type+\" on \"+method+\" must return an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) or the function must be a Kotlin coroutine \"+\"in order to support Reactor Context\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "signal",
                        "target_method_name": "isOnComplete",
                        "target_params": [],
                        "usage": "signal.isOnComplete()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "signal",
                        "target_method_name": "hasError",
                        "target_params": [],
                        "usage": "signal.hasError()"
                    },
                    {
                        "target_type": null,
                        "target_name": "signal",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "signal.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": "signal",
                        "target_method_name": "getThrowable",
                        "target_params": [],
                        "usage": "signal.getThrowable()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [
                            "signal"
                        ],
                        "usage": "Mono.error(signal.getThrowable())"
                    },
                    {
                        "target_type": null,
                        "target_name": "signal",
                        "target_method_name": "getThrowable",
                        "target_params": [],
                        "usage": "signal.getThrowable()"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance().getAdapter(type)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).materialize().flatMap(postAuthorize)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).materialize()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "adapter!=null",
                            ""
                        ],
                        "usage": "Assert.state(adapter!=null,()->\"The returnType \"+type+\" on \"+method+\" must have a org.springframework.core.ReactiveAdapter registered\")"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi))).materialize().flatMap(postAuthorize)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi))).materialize()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi)))"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "toPublisher",
                        "target_params": [
                            "ReactiveMethodInvocationUtils"
                        ],
                        "usage": "adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.KotlinDelegate",
                        "target_name": "KotlinDelegate",
                        "target_method_name": "asFlow",
                        "target_params": [
                            "response"
                        ],
                        "usage": "KotlinDelegate.asFlow(response)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).materialize().flatMap(postAuthorize)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).materialize()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher)"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "flux"
                        ],
                        "usage": "adapter.fromPublisher(flux)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher).materialize().flatMap(postAuthorize)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher).materialize()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher)"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "mono"
                        ],
                        "usage": "adapter.fromPublisher(mono)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isMultiValue",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "returnType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "adapter",
                        "param_type": "org.springframework.core.ReactiveAdapter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.ReactiveAdapter",
                        "target_name": "adapter",
                        "target_method_name": "isMultiValue",
                        "target_params": [],
                        "usage": "adapter.isMultiValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postAuthorize",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "result",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "invocationResult"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,invocationResult).switchIfEmpty(Mono.just(newAuthorizationDecision(false))).flatMap((decision)->postProcess(decision,invocationResult))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "invocationResult"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,invocationResult).switchIfEmpty(Mono.just(newAuthorizationDecision(false)))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "invocationResult"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,invocationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "newAuthorizationDecision"
                        ],
                        "usage": "Mono.just(newAuthorizationDecision(false))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postProcess",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    },
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationResult",
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "methodInvocationResult"
                        ],
                        "usage": "Mono.just(methodInvocationResult.getResult())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "methodInvocationResult",
                        "target_method_name": "getResult",
                        "target_params": [],
                        "usage": "methodInvocationResult.getResult()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocationResult(methodInvocationResult,decision);}returnthis.defaultHandler.handleDeniedInvocationResult(methodInvocationResult,decision);}).flatMap((processedResult)->{if(Mono.class.isAssignableFrom(processedResult.getClass())){return(Mono<?>)processedResult;}returnMono.justOrEmpty(processedResult);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocationResult(methodInvocationResult,decision);}returnthis.defaultHandler.handleDeniedInvocationResult(methodInvocationResult,decision);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "methodInvocationResult",
                            "decision"
                        ],
                        "usage": "handler.handleDeniedInvocationResult(methodInvocationResult,decision)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocationResult",
                        "target_params": [
                            "methodInvocationResult",
                            "decision"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocationResult(methodInvocationResult,decision)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": "processedResult",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "processedResult.getClass()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "justOrEmpty",
                        "target_params": [
                            "processedResult"
                        ],
                        "usage": "Mono.justOrEmpty(processedResult)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postProcess",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    },
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocation(methodInvocation,decision);}returnthis.defaultHandler.handleDeniedInvocation(methodInvocation,decision);}).flatMap((processedResult)->{if(Mono.class.isAssignableFrom(processedResult.getClass())){return(Mono<?>)processedResult;}returnMono.justOrEmpty(processedResult);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocation(methodInvocation,decision);}returnthis.defaultHandler.handleDeniedInvocation(methodInvocation,decision);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "methodInvocation",
                            "decision"
                        ],
                        "usage": "handler.handleDeniedInvocation(methodInvocation,decision)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "methodInvocation",
                            "decision"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(methodInvocation,decision)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": "processedResult",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "processedResult.getClass()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "justOrEmpty",
                        "target_params": [
                            "processedResult"
                        ],
                        "usage": "Mono.justOrEmpty(processedResult)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationInterceptorsOrder.LAST.getOrder()",
            "AuthorizationInterceptorsOrder.LAST"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.function.Function",
            "kotlinx.coroutines.reactive.ReactiveFlowKt",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.reactivestreams.Publisher",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "reactor.core.publisher.Signal",
            "org.springframework.aop.Pointcut",
            "org.springframework.core.KotlinDetector",
            "org.springframework.core.MethodParameter",
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ReactiveAuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.KotlinDelegate": {
        "type": "class",
        "class_name": "KotlinDelegate",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "asFlow",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "publisher",
                        "param_type": "org.springframework.security.authorization.method.Publisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveFlowKt",
                        "target_name": "ReactiveFlowKt",
                        "target_method_name": "asFlow",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "ReactiveFlowKt.asFlow(publisher)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizationManagerBeforeMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationManager",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "eventPublisher",
                "field_type": "org.springframework.security.authorization.AuthorizationEventPublisher",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizationManagerBeforeMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "pointcut",
                        "param_type": "org.springframework.aop.Pointcut"
                    },
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "pointcut",
                            "\"pointcut cannot be null\""
                        ],
                        "usage": "Assert.notNull(pointcut,\"pointcut cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationManager",
                            "\"authorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationManager,\"authorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "preAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "preAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PreAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PreAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.PRE_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "preAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PreAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PreAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.PRE_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "secured",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "secured",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.method.SecuredAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "Secured"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(Secured.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.SECURED.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "secured",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "Secured"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(Secured.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.SECURED.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "jsr250",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "jsr250",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.method.Jsr250AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "RolesAllowed"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(RolesAllowed.class,DenyAll.class,PermitAll.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.JSR250.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "jsr250",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "RolesAllowed"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(RolesAllowed.class,DenyAll.class,PermitAll.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.JSR250.getOrder())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthorizationEventPublisher",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "eventPublisher",
                        "param_type": "org.springframework.security.authorization.AuthorizationEventPublisher"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "eventPublisher",
                            "\"eventPublisher cannot be null\""
                        ],
                        "usage": "Assert.notNull(eventPublisher,\"eventPublisher cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "attemptAuthorization",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Authorizing method invocation \"+mi))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Authorizing method invocation \"+mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "this::getAuthentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(this::getAuthentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationEventPublisher",
                        "target_name": "eventPublisher",
                        "target_method_name": "publishAuthorizationEvent",
                        "target_params": [
                            "this::getAuthentication",
                            "mi",
                            "result"
                        ],
                        "usage": "this.eventPublisher.publishAuthorizationEvent(this::getAuthentication,mi,result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.eventPublisher"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "result.isGranted()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Failed to authorize \"+mi+\" with authorization manager \"+this.authorizationManager+\" and result \"+result))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Failed to authorize \"+mi+\" with authorization manager \"+this.authorizationManager+\" and result \"+result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.of(()->\"Authorized method invocation \"+mi))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Authorized method invocation \"+mi)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proceed",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "ex"
                        ],
                        "usage": "handler.handleDeniedInvocation(mi,ex)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "ex"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(mi,ex)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "denied",
                        "param_type": "org.springframework.security.authorization.AuthorizationDeniedException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "denied"
                        ],
                        "usage": "handler.handleDeniedInvocation(mi,denied)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "denied"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(mi,denied)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handle",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "result"
                        ],
                        "usage": "handler.handleDeniedInvocation(mi,result)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "result"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(mi,result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext().getAuthentication()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(this.getClass())",
            "this.getClass()",
            "AuthorizationInterceptorsOrder.FIRST.getOrder()",
            "AuthorizationInterceptorsOrder.FIRST"
        ],
        "imports": [
            "java.util.function.Supplier",
            "jakarta.annotation.security.DenyAll",
            "jakarta.annotation.security.PermitAll",
            "jakarta.annotation.security.RolesAllowed",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.aop.Pointcut",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.access.annotation.Secured",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationEventPublisher",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizationManagerBeforeReactiveMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "COROUTINES_FLOW_CLASS_NAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "RETURN_TYPE_METHOD_PARAMETER_INDEX",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorizationManager",
                "field_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "preAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "preAuthorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor",
                "formal_params": [
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.ReactiveAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PreAuthorize"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PreAuthorize.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "interceptor",
                        "target_method_name": "setOrder",
                        "target_params": [
                            "AuthorizationInterceptorsOrder"
                        ],
                        "usage": "interceptor.setOrder(AuthorizationInterceptorsOrder.PRE_AUTHORIZE.getOrder())"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationManagerBeforeReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "pointcut",
                        "param_type": "org.springframework.aop.Pointcut"
                    },
                    {
                        "param_name": "authorizationManager",
                        "param_type": "org.springframework.security.authorization.ReactiveAuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "pointcut",
                            "\"pointcut cannot be null\""
                        ],
                        "usage": "Assert.notNull(pointcut,\"pointcut cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationManager",
                            "\"authorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationManager,\"authorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    },
                    {
                        "target_type": "org.springframework.core.KotlinDetector",
                        "target_name": "KotlinDetector",
                        "target_method_name": "isSuspendingFunction",
                        "target_params": [
                            "method"
                        ],
                        "usage": "KotlinDetector.isSuspendingFunction(method)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.COROUTINES_FLOW_CLASS_NAME",
                        "target_name": "COROUTINES_FLOW_CLASS_NAME",
                        "target_method_name": "equals",
                        "target_params": [
                            "newMethodParameter"
                        ],
                        "usage": "COROUTINES_FLOW_CLASS_NAME.equals(newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType().getName()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor",
                        "target_name": "this",
                        "target_method_name": "newMethodParameter",
                        "target_params": [
                            "method",
                            "RETURN_TYPE_METHOD_PARAMETER_INDEX.getParameterType"
                        ],
                        "usage": "newMethodParameter(method,RETURN_TYPE_METHOD_PARAMETER_INDEX).getParameterType()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "hasReactiveReturnType",
                            ""
                        ],
                        "usage": "Assert.state(hasReactiveReturnType,()->\"The returnType \"+type+\" on \"+method+\" must return an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) or the function must be a Kotlin coroutine \"+\"in order to support Reactor Context\")"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance().getAdapter(type)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "adapter!=null",
                            ""
                        ],
                        "usage": "Assert.state(adapter!=null,()->\"The returnType \"+type+\" on \"+method+\" must have a org.springframework.core.ReactiveAdapter registered\")"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi)))"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "toPublisher",
                        "target_params": [
                            "ReactiveMethodInvocationUtils"
                        ],
                        "usage": "adapter.toPublisher(ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.KotlinDelegate",
                        "target_name": "KotlinDelegate",
                        "target_method_name": "asFlow",
                        "target_params": [
                            "response"
                        ],
                        "usage": "KotlinDelegate.asFlow(response)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "result"
                        ],
                        "usage": "adapter.fromPublisher(result)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "result"
                        ],
                        "usage": "adapter.fromPublisher(result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "preAuthorized",
                "return_type": "reactor.core.publisher.Flux",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "mapping",
                        "param_type": "reactor.core.publisher.Flux"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi).switchIfEmpty(Mono.just(newAuthorizationDecision(false))).flatMapMany((decision)->{if(decision.isGranted()){returnmapping.onErrorResume(AuthorizationDeniedException.class,(deniedEx)->postProcess(deniedEx,mi));}returnpostProcess(decision,mi);})"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi).switchIfEmpty(Mono.just(newAuthorizationDecision(false)))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "newAuthorizationDecision"
                        ],
                        "usage": "Mono.just(newAuthorizationDecision(false))"
                    },
                    {
                        "target_type": null,
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "mapping",
                        "target_method_name": "onErrorResume",
                        "target_params": [
                            "AuthorizationDeniedException"
                        ],
                        "usage": "mapping.onErrorResume(AuthorizationDeniedException.class,(deniedEx)->postProcess(deniedEx,mi))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "preAuthorized",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "mapping",
                        "param_type": "reactor.core.publisher.Mono"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi).switchIfEmpty(Mono.just(newAuthorizationDecision(false))).flatMap((decision)->{if(decision.isGranted()){returnmapping.onErrorResume(AuthorizationDeniedException.class,(deniedEx)->postProcess(deniedEx,mi));}returnpostProcess(decision,mi);})"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi).switchIfEmpty(Mono.just(newAuthorizationDecision(false)))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.ReactiveAuthorizationManager",
                        "target_name": "authorizationManager",
                        "target_method_name": "authorize",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "this.authorizationManager.authorize(authentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "newAuthorizationDecision"
                        ],
                        "usage": "Mono.just(newAuthorizationDecision(false))"
                    },
                    {
                        "target_type": null,
                        "target_name": "decision",
                        "target_method_name": "isGranted",
                        "target_params": [],
                        "usage": "decision.isGranted()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "mapping",
                        "target_method_name": "onErrorResume",
                        "target_params": [
                            "AuthorizationDeniedException"
                        ],
                        "usage": "mapping.onErrorResume(AuthorizationDeniedException.class,(deniedEx)->postProcess(deniedEx,mi))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postProcess",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocation(mi,decision);}returnthis.defaultHandler.handleDeniedInvocation(mi,decision);}).flatMap((result)->{if(Mono.class.isAssignableFrom(result.getClass())){return(Mono<?>)result;}returnMono.justOrEmpty(result);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromSupplier",
                        "target_params": [],
                        "usage": "Mono.fromSupplier(()->{if(this.authorizationManagerinstanceofMethodAuthorizationDeniedHandlerhandler){returnhandler.handleDeniedInvocation(mi,decision);}returnthis.defaultHandler.handleDeniedInvocation(mi,decision);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationManager"
                    },
                    {
                        "target_type": null,
                        "target_name": "handler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "decision"
                        ],
                        "usage": "handler.handleDeniedInvocation(mi,decision)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "handleDeniedInvocation",
                        "target_params": [
                            "mi",
                            "decision"
                        ],
                        "usage": "this.defaultHandler.handleDeniedInvocation(mi,decision)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "result.getClass()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "justOrEmpty",
                        "target_params": [
                            "result"
                        ],
                        "usage": "Mono.justOrEmpty(result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isMultiValue",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "returnType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "adapter",
                        "param_type": "org.springframework.core.ReactiveAdapter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.ReactiveAdapter",
                        "target_name": "adapter",
                        "target_method_name": "isMultiValue",
                        "target_params": [],
                        "usage": "adapter.isMultiValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationInterceptorsOrder.FIRST.getOrder()",
            "AuthorizationInterceptorsOrder.FIRST"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "kotlinx.coroutines.reactive.ReactiveFlowKt",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.reactivestreams.Publisher",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.aop.Pointcut",
            "org.springframework.core.KotlinDetector",
            "org.springframework.core.MethodParameter",
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ReactiveAuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationMethodPointcuts": {
        "type": "class",
        "class_name": "AuthorizationMethodPointcuts",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "forAllAnnotations",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "forAnnotations",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "pointcut",
                        "target_method_name": "union",
                        "target_params": [
                            "classOrMethod"
                        ],
                        "usage": "pointcut.union(classOrMethod(annotation))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "classOrMethod",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [
                    {
                        "param_name": "annotation",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.aop.support.Pointcuts",
                        "target_name": "Pointcuts",
                        "target_method_name": "union",
                        "target_params": [
                            "newAnnotationMatchingPointcut"
                        ],
                        "usage": "Pointcuts.union(newAnnotationMatchingPointcut(null,annotation,true),newAnnotationMatchingPointcut(annotation,true))"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AuthorizationMethodPointcuts",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "org.springframework.aop.Pointcut",
            "org.springframework.aop.support.ComposablePointcut",
            "org.springframework.aop.support.Pointcuts",
            "org.springframework.aop.support.annotation.AnnotationMatchingPointcut",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.access.prepost.PostFilter",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.access.prepost.PreFilter"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizationProxy": {
        "type": "interface",
        "class_name": "AuthorizationProxy",
        "class_type": "interface",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "toAuthorizedTarget",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.aop.RawTargetAccess"
        ]
    },
    "org.springframework.security.authorization.method.AuthorizeReturnObjectMethodInterceptor": {
        "type": "class",
        "class_name": "AuthorizeReturnObjectMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorizationProxyFactory",
                "field_type": "org.springframework.security.authorization.AuthorizationProxyFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorizeReturnObjectMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authorizationProxyFactory",
                        "param_type": "org.springframework.security.authorization.AuthorizationProxyFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorizationProxyFactory",
                            "\"authorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorizationProxyFactory,\"authorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationProxyFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationProxyFactory",
                        "target_name": "authorizationProxyFactory",
                        "target_method_name": "proxy",
                        "target_params": [
                            "result"
                        ],
                        "usage": "this.authorizationProxyFactory.proxy(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorizationProxyFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPointcut",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "pointcut",
                        "param_type": "org.springframework.aop.Pointcut"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "Pointcuts.intersection(newMethodReturnTypePointcut(Predicate.not(ClassUtils::isVoidType)),AuthorizationMethodPointcuts.forAnnotations(AuthorizeReturnObject.class))",
            "Predicate.not(ClassUtils::isVoidType)",
            "AuthorizationMethodPointcuts.forAnnotations(AuthorizeReturnObject.class)",
            "AuthorizationInterceptorsOrder.SECURE_RESULT.getOrder()",
            "AuthorizationInterceptorsOrder.SECURE_RESULT"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.function.Predicate",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.Pointcut",
            "org.springframework.aop.support.Pointcuts",
            "org.springframework.aop.support.StaticMethodMatcherPointcut",
            "org.springframework.security.authorization.AuthorizationProxyFactory",
            "org.springframework.util.Assert",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.authorization.method.MethodReturnTypePointcut": {
        "type": "class",
        "class_name": "MethodReturnTypePointcut",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.StaticMethodMatcherPointcut",
        "fields": [
            {
                "type": "field",
                "field_name": "returnTypeMatches",
                "field_type": "org.springframework.security.authorization.method.Predicate",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodReturnTypePointcut",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "returnTypeMatches",
                        "param_type": "org.springframework.security.authorization.method.Predicate"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.returnTypeMatches"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "matches",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.authorization.method.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Predicate",
                        "target_name": "returnTypeMatches",
                        "target_method_name": "test",
                        "target_params": [
                            "method"
                        ],
                        "usage": "this.returnTypeMatches.test(method.getReturnType())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.returnTypeMatches"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.Method",
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.ExpressionAttribute": {
        "type": "class",
        "class_name": "ExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "NULL_ATTRIBUTE",
                "field_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expression",
                "field_type": "org.springframework.expression.Expression",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expression",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpression",
                "return_type": "org.springframework.expression.Expression",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expression",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "this.expression.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression"
        ]
    },
    "org.springframework.security.authorization.method.ExpressionAttributeAuthorizationDecision": {
        "type": "class",
        "class_name": "ExpressionAttributeAuthorizationDecision",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.AuthorizationDecision",
        "fields": [
            {
                "type": "field",
                "field_name": "expressionAttribute",
                "field_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionAttributeAuthorizationDecision",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "granted",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "expressionAttribute",
                        "param_type": "org.springframework.security.authorization.method.ExpressionAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionAttribute"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExpressionAttribute",
                "return_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionAttribute"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ExpressionAttributeAuthorizationDecision",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionAttribute"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.authorization.AuthorizationDecision"
        ]
    },
    "org.springframework.security.authorization.method.ExpressionUtils": {
        "type": "class",
        "class_name": "ExpressionUtils",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "evaluate",
                "return_type": "org.springframework.security.authorization.AuthorizationResult",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getValue",
                        "target_params": [
                            "ctx"
                        ],
                        "usage": "expr.getValue(ctx)"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "expr.getExpressionString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAuthorizationException",
                "return_type": "org.springframework.security.authorization.AuthorizationDeniedException",
                "formal_params": [
                    {
                        "param_name": "ex",
                        "param_type": "org.springframework.expression.EvaluationException"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.EvaluationException",
                        "target_name": "ex",
                        "target_method_name": "getCause",
                        "target_params": [],
                        "usage": "ex.getCause()"
                    },
                    {
                        "target_type": null,
                        "target_name": "cause",
                        "target_method_name": "getCause",
                        "target_params": [],
                        "usage": "cause.getCause()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.EvaluationException",
            "org.springframework.expression.Expression",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ExpressionAuthorizationDecision"
        ]
    },
    "org.springframework.security.authorization.method.Jsr250AuthorizationManager": {
        "type": "class",
        "class_name": "Jsr250AuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.Jsr250AuthorizationManagerRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authoritiesAuthorizationManager",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setAuthoritiesAuthorizationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authoritiesAuthorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authoritiesAuthorizationManager",
                            "\"authoritiesAuthorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authoritiesAuthorizationManager,\"authoritiesAuthorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesAuthorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "rolePrefix",
                            "\"rolePrefix cannot be null\""
                        ],
                        "usage": "Assert.notNull(rolePrefix,\"rolePrefix cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Jsr250AuthorizationManagerRegistry",
                        "target_name": "registry",
                        "target_method_name": "getManager",
                        "target_params": [
                            "methodInvocation"
                        ],
                        "usage": "this.registry.getManager(methodInvocation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "delegate",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "methodInvocation"
                        ],
                        "usage": "delegate.check(authentication,methodInvocation)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.util.Collection",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "java.util.function.Supplier",
            "jakarta.annotation.security.DenyAll",
            "jakarta.annotation.security.PermitAll",
            "jakarta.annotation.security.RolesAllowed",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.lang.NonNull",
            "org.springframework.security.authorization.AuthoritiesAuthorizationManager",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.SingleResultAuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.Jsr250AuthorizationManagerRegistry": {
        "type": "class",
        "class_name": "Jsr250AuthorizationManagerRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry",
        "fields": [
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.authorization.method.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "resolveManager",
                "return_type": "org.springframework.security.authorization.method.AuthorizationManager",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.authorization.method.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.SingleResultAuthorizationManager",
                        "target_name": "SingleResultAuthorizationManager",
                        "target_method_name": "denyAll",
                        "target_params": [],
                        "usage": "SingleResultAuthorizationManager.denyAll()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SingleResultAuthorizationManager",
                        "target_name": "SingleResultAuthorizationManager",
                        "target_method_name": "permitAll",
                        "target_params": [],
                        "usage": "SingleResultAuthorizationManager.permitAll()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findJsr250Annotation",
                "return_type": "org.springframework.security.authorization.method.Annotation",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "org.springframework.security.authorization.method.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.scanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllowedRolesWithPrefix",
                "return_type": "org.springframework.security.authorization.method.Set",
                "formal_params": [
                    {
                        "param_name": "rolesAllowed",
                        "param_type": "org.springframework.security.authorization.method.RolesAllowed"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.RolesAllowed",
                        "target_name": "rolesAllowed",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "rolesAllowed.value().length"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.RolesAllowed",
                        "target_name": "rolesAllowed",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "rolesAllowed.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "roles",
                        "target_method_name": "add",
                        "target_params": [
                            "Jsr250AuthorizationManager"
                        ],
                        "usage": "roles.add(Jsr250AuthorizationManager.this.rolePrefix+rolesAllowed.value()[i])"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.RolesAllowed",
                        "target_name": "rolesAllowed",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "rolesAllowed.value()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(List.of(DenyAll.class,PermitAll.class,RolesAllowed.class))",
            "List.of(DenyAll.class,PermitAll.class,RolesAllowed.class)"
        ],
        "imports": []
    },
    "org.springframework.security.authorization.method.AuthorizationManagerCheckAdapter": {
        "type": "interface",
        "class_name": "AuthorizationManagerCheckAdapter",
        "class_type": "interface",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.method.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.method.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.method.T"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "authorize",
                "return_type": "org.springframework.security.authorization.method.AuthorizationResult",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.authorization.method.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.method.T"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler": {
        "type": "interface",
        "class_name": "MethodAuthorizationDeniedHandler",
        "class_type": "interface",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "methodInvocationResult",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "methodInvocationResult.getMethodInvocation()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.lang.Nullable",
            "org.springframework.security.authorization.AuthorizationResult"
        ]
    },
    "org.springframework.security.authorization.method.MethodExpressionAuthorizationManager": {
        "type": "class",
        "class_name": "MethodExpressionAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "expressionHandler",
                "field_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expression",
                "field_type": "org.springframework.expression.Expression",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodExpressionAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionString",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "expressionString",
                            "\"expressionString cannot be empty\""
                        ],
                        "usage": "Assert.hasText(expressionString,\"expressionString cannot be empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "getExpressionParser",
                        "target_params": [],
                        "usage": "this.expressionHandler.getExpressionParser().parseExpression(expressionString)"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "getExpressionParser",
                        "target_params": [],
                        "usage": "this.expressionHandler.getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.SecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "getExpressionParser",
                        "target_params": [],
                        "usage": "expressionHandler.getExpressionParser().parseExpression(this.expression.getExpressionString())"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "getExpressionParser",
                        "target_params": [],
                        "usage": "expressionHandler.getExpressionParser()"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expression",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "this.expression.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "context",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.access.expression.SecurityExpressionHandler",
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "authentication",
                            "context"
                        ],
                        "usage": "this.expressionHandler.createEvaluationContext(authentication,context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expressionHandler"
                    },
                    {
                        "target_type": "org.springframework.security.access.expression.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "expression",
                            "ctx"
                        ],
                        "usage": "ExpressionUtils.evaluateAsBoolean(this.expression,ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expression"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.expression.ExpressionUtils",
            "org.springframework.security.access.expression.SecurityExpressionHandler",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.ExpressionAuthorizationDecision",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.MethodInvocationResult": {
        "type": "class",
        "class_name": "MethodInvocationResult",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "methodInvocation",
                "field_type": "org.aopalliance.intercept.MethodInvocation",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "result",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodInvocationResult",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "result",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "methodInvocation",
                            "\"methodInvocation cannot be null\""
                        ],
                        "usage": "Assert.notNull(methodInvocation,\"methodInvocation cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodInvocation"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMethodInvocation",
                "return_type": "org.aopalliance.intercept.MethodInvocation",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.methodInvocation"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getResult",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.result"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.NoOpAuthorizationEventPublisher": {
        "type": "class",
        "class_name": "NoOpAuthorizationEventPublisher",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationEventPublisher"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.method.T"
                    },
                    {
                        "param_name": "decision",
                        "param_type": "org.springframework.security.authorization.AuthorizationDecision"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "publishAuthorizationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "object",
                        "param_type": "org.springframework.security.authorization.method.T"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationEventPublisher",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager": {
        "type": "class",
        "class_name": "PostAuthorizeAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setApplicationContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.registry.setApplicationContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi.getMethodInvocation())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "mi",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "mi.getMethodInvocation()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "authentication",
                            "mi"
                        ],
                        "usage": "expressionHandler.createEvaluationContext(authentication,mi.getMethodInvocation())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "mi",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "mi.getMethodInvocation()"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "setReturnObject",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "expressionHandler.setReturnObject(mi.getResult(),ctx)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "mi",
                        "target_method_name": "getResult",
                        "target_params": [],
                        "usage": "mi.getResult()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluate",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ExpressionUtils.evaluate(attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocation"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler().handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocationResult"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocationResult.getMethodInvocation())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "methodInvocationResult",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "methodInvocationResult.getMethodInvocation()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler().handleDeniedInvocationResult(methodInvocationResult,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.context.ApplicationContext",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
        ]
    },
    "org.springframework.security.authorization.method.PostAuthorizeExpressionAttribute": {
        "type": "class",
        "class_name": "PostAuthorizeExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.ExpressionAttribute",
        "fields": [
            {
                "type": "field",
                "field_name": "handler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostAuthorizeExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "handler",
                        "param_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "handler",
                            "\"handler cannot be null\""
                        ],
                        "usage": "Assert.notNull(handler,\"handler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry": {
        "type": "class",
        "class_name": "PostAuthorizeExpressionAttributeRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry",
        "fields": [
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handleAuthorizationDeniedScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handlerResolver",
                "field_type": "java.util.function.Function",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "postAuthorizeScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostAuthorizeExpressionAttributeRegistry",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveAttribute",
                "return_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser().parseExpression(postAuthorize.value())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "postAuthorize.value()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "handleAuthorizationDeniedScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.handleAuthorizationDeniedScanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handleAuthorizationDeniedScanner"
                    },
                    {
                        "target_type": "java.util.function.Function",
                        "target_name": "handlerResolver",
                        "target_method_name": "apply",
                        "target_params": [
                            "deniedHandler"
                        ],
                        "usage": "this.handlerResolver.apply(deniedHandler.handlerClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    },
                    {
                        "target_type": null,
                        "target_name": "deniedHandler",
                        "target_method_name": "handlerClass",
                        "target_params": [],
                        "usage": "deniedHandler.handlerClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPostAuthorizeAnnotation",
                "return_type": "org.springframework.security.access.prepost.PostAuthorize",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "postAuthorizeScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.postAuthorizeScanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthorizeScanner"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "context",
                            "\"context cannot be null\""
                        ],
                        "usage": "Assert.notNull(context,\"context cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "templateDefaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.postAuthorizeScanner"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanners",
                        "target_name": "SecurityAnnotationScanners",
                        "target_method_name": "requireUnique",
                        "target_params": [
                            "PostAuthorize"
                        ],
                        "usage": "SecurityAnnotationScanners.requireUnique(PostAuthorize.class,templateDefaults)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    },
                    {
                        "param_name": "handlerClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.defaultHandler.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationContext",
                        "target_name": "context",
                        "target_method_name": "getBeanNamesForType",
                        "target_params": [
                            "handlerClass"
                        ],
                        "usage": "context.getBeanNamesForType(handlerClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "beanNames.length"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "handlerClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "handlerClass.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "beanNames.length"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "handlerClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "handlerClass.getName()"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "toString",
                        "target_params": [
                            "beanNames"
                        ],
                        "usage": "Arrays.toString(beanNames)"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationContext",
                        "target_name": "context",
                        "target_method_name": "getBean",
                        "target_params": [
                            "beanNames[0]",
                            "handlerClass"
                        ],
                        "usage": "context.getBean(beanNames[0],handlerClass)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(HandleAuthorizationDenied.class)",
            "SecurityAnnotationScanners.requireUnique(PostAuthorize.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Arrays",
            "java.util.function.Function",
            "reactor.util.annotation.NonNull",
            "org.springframework.context.ApplicationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PostAuthorizeReactiveAuthorizationManager": {
        "type": "class",
        "class_name": "PostAuthorizeReactiveAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.ReactiveAuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostAuthorizeReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "PostAuthorizeReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setApplicationContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.registry.setApplicationContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "result",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "result.getMethodInvocation()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->expressionHandler.createEvaluationContext(auth,mi)).doOnNext((ctx)->expressionHandler.setReturnObject(result.getResult(),ctx)).flatMap((ctx)->ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx)).cast(AuthorizationDecision.class)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->expressionHandler.createEvaluationContext(auth,mi)).doOnNext((ctx)->expressionHandler.setReturnObject(result.getResult(),ctx)).flatMap((ctx)->ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->expressionHandler.createEvaluationContext(auth,mi)).doOnNext((ctx)->expressionHandler.setReturnObject(result.getResult(),ctx))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->expressionHandler.createEvaluationContext(auth,mi))"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "auth",
                            "mi"
                        ],
                        "usage": "expressionHandler.createEvaluationContext(auth,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "setReturnObject",
                        "target_params": [
                            "result"
                        ],
                        "usage": "expressionHandler.setReturnObject(result.getResult(),ctx)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "result",
                        "target_method_name": "getResult",
                        "target_params": [],
                        "usage": "result.getResult()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluate",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocation"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler().handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocationResult"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocationResult.getMethodInvocation())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodInvocationResult",
                        "target_name": "methodInvocationResult",
                        "target_method_name": "getMethodInvocation",
                        "target_params": [],
                        "usage": "methodInvocationResult.getMethodInvocation()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler().handleDeniedInvocationResult(methodInvocationResult,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "postAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "postAuthorizeAttribute.getHandler()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "reactor.core.publisher.Mono",
            "org.springframework.context.ApplicationContext",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PostAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ReactiveAuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor": {
        "type": "class",
        "class_name": "PostFilterAuthorizationMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostFilterAuthorizationMethodInterceptor",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PostFilter"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PostFilter.class)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "strategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "this::getAuthentication",
                            "mi"
                        ],
                        "usage": "expressionHandler.createEvaluationContext(this::getAuthentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "filter",
                        "target_params": [
                            "returnedObject",
                            "attribute"
                        ],
                        "usage": "expressionHandler.filter(returnedObject,attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext().getAuthentication()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationInterceptorsOrder.POST_FILTER.getOrder()",
            "AuthorizationInterceptorsOrder.POST_FILTER"
        ],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.Pointcut",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PostFilter",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy"
        ]
    },
    "org.springframework.security.authorization.method.PostFilterAuthorizationReactiveMethodInterceptor": {
        "type": "class",
        "class_name": "PostFilterAuthorizationReactiveMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PostFilterAuthorizationReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "PostFilterAuthorizationReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication().map((auth)->this.registry.getExpressionHandler().createEvaluationContext(auth,mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler().createEvaluationContext(auth,mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getReturnType",
                        "target_params": [],
                        "usage": "method.getReturnType()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "Publisher"
                        ],
                        "usage": "Assert.state(Publisher.class.isAssignableFrom(type),()->String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) in order to support Reactor Context\",type,method))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "format",
                        "target_params": [
                            "\"The parameter type %s on %s must be an instance of org"
                        ],
                        "usage": "String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) in order to support Reactor Context\",type,method)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance().getAdapter(type)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Flux.defer(()->ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMapMany",
                        "target_params": [],
                        "usage": "toInvoke.flatMapMany((ctx)->filterMultiValue(publisher,ctx,attribute))"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "flux"
                        ],
                        "usage": "adapter.fromPublisher(flux)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->ReactiveMethodInvocationUtils.proceed(mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMap",
                        "target_params": [],
                        "usage": "toInvoke.flatMap((ctx)->filterSingleValue(publisher,ctx,attribute))"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "mono"
                        ],
                        "usage": "adapter.fromPublisher(mono)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isMultiValue",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "returnType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "adapter",
                        "param_type": "org.springframework.core.ReactiveAdapter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.ReactiveAdapter",
                        "target_name": "adapter",
                        "target_method_name": "isMultiValue",
                        "target_params": [],
                        "usage": "adapter.isMultiValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterSingleValue",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "publisher",
                        "param_type": "org.reactivestreams.Publisher"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.authorization.method.ExpressionAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher).doOnNext((result)->setFilterObject(ctx,result)).flatMap((result)->postFilter(ctx,result,attribute))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher).doOnNext((result)->setFilterObject(ctx,result))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Mono.from(publisher)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterMultiValue",
                "return_type": "reactor.core.publisher.Flux",
                "formal_params": [
                    {
                        "param_name": "publisher",
                        "param_type": "org.reactivestreams.Publisher"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.authorization.method.ExpressionAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).doOnNext((result)->setFilterObject(ctx,result)).flatMap((result)->postFilter(ctx,result,attribute))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher).doOnNext((result)->setFilterObject(ctx,result))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "publisher"
                        ],
                        "usage": "Flux.from(publisher)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setFilterObject",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "result",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((MethodSecurityExpressionOperations)ctx.getRootObject().getValue()).setFilterObject(result)"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject().getValue()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "postFilter",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "result",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "attribute",
                        "param_type": "org.springframework.security.authorization.method.ExpressionAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluateAsBoolean(attribute.getExpression(),ctx).flatMap((granted)->granted?Mono.just(result):Mono.empty())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluateAsBoolean(attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "result"
                        ],
                        "usage": "Mono.just(result)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationMethodPointcuts.forAnnotations(PostFilter.class)",
            "AuthorizationInterceptorsOrder.POST_FILTER.getOrder()",
            "AuthorizationInterceptorsOrder.POST_FILTER"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.reactivestreams.Publisher",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.aop.Pointcut",
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
            "org.springframework.security.access.prepost.PostFilter",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry": {
        "type": "class",
        "class_name": "PostFilterExpressionAttributeRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry",
        "fields": [
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "resolveAttribute",
                "return_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser().parseExpression(postFilter.value())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": "postFilter",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "postFilter.value()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanners",
                        "target_name": "SecurityAnnotationScanners",
                        "target_method_name": "requireUnique",
                        "target_params": [
                            "PostFilter"
                        ],
                        "usage": "SecurityAnnotationScanners.requireUnique(PostFilter.class,defaults)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPostFilterAnnotation",
                "return_type": "org.springframework.security.access.prepost.PostFilter",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.scanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(PostFilter.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "org.springframework.expression.Expression",
            "org.springframework.lang.NonNull",
            "org.springframework.security.access.prepost.PostFilter",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners"
        ]
    },
    "org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager": {
        "type": "class",
        "class_name": "PreAuthorizeAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setApplicationContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.registry.setApplicationContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler().createEvaluationContext(authentication,mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ExpressionUtils",
                        "target_name": "ExpressionUtils",
                        "target_method_name": "evaluate",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ExpressionUtils.evaluate(attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocation"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "preAuthorizeAttribute.getHandler().handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "preAuthorizeAttribute.getHandler()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.context.ApplicationContext",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
        ]
    },
    "org.springframework.security.authorization.method.PreAuthorizeExpressionAttribute": {
        "type": "class",
        "class_name": "PreAuthorizeExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.ExpressionAttribute",
        "fields": [
            {
                "type": "field",
                "field_name": "handler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreAuthorizeExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "handler",
                        "param_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "handler",
                            "\"handler cannot be null\""
                        ],
                        "usage": "Assert.notNull(handler,\"handler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handler"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.expression.Expression",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry": {
        "type": "class",
        "class_name": "PreAuthorizeExpressionAttributeRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry",
        "fields": [
            {
                "type": "field",
                "field_name": "defaultHandler",
                "field_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handleAuthorizationDeniedScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "handlerResolver",
                "field_type": "java.util.function.Function",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "preAuthorizeScanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreAuthorizeExpressionAttributeRegistry",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveAttribute",
                "return_type": "org.springframework.security.authorization.method.ExpressionAttribute",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser().parseExpression(preAuthorize.value())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorize",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "preAuthorize.value()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "handleAuthorizationDeniedScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.handleAuthorizationDeniedScanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handleAuthorizationDeniedScanner"
                    },
                    {
                        "target_type": "java.util.function.Function",
                        "target_name": "handlerResolver",
                        "target_method_name": "apply",
                        "target_params": [
                            "deniedHandler"
                        ],
                        "usage": "this.handlerResolver.apply(deniedHandler.handlerClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    },
                    {
                        "target_type": null,
                        "target_name": "deniedHandler",
                        "target_method_name": "handlerClass",
                        "target_params": [],
                        "usage": "deniedHandler.handlerClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPreAuthorizeAnnotation",
                "return_type": "org.springframework.security.access.prepost.PreAuthorize",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "preAuthorizeScanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.preAuthorizeScanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthorizeScanner"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "context",
                            "\"context cannot be null\""
                        ],
                        "usage": "Assert.notNull(context,\"context cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.handlerResolver"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.preAuthorizeScanner"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanners",
                        "target_name": "SecurityAnnotationScanners",
                        "target_method_name": "requireUnique",
                        "target_params": [
                            "PreAuthorize"
                        ],
                        "usage": "SecurityAnnotationScanners.requireUnique(PreAuthorize.class,defaults)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    },
                    {
                        "param_name": "handlerClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                        "target_name": "defaultHandler",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "this.defaultHandler.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultHandler"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationContext",
                        "target_name": "context",
                        "target_method_name": "getBeanNamesForType",
                        "target_params": [
                            "handlerClass"
                        ],
                        "usage": "context.getBeanNamesForType(handlerClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "beanNames.length"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "handlerClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "handlerClass.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "beanNames.length"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "handlerClass",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "handlerClass.getName()"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "toString",
                        "target_params": [
                            "beanNames"
                        ],
                        "usage": "Arrays.toString(beanNames)"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationContext",
                        "target_name": "context",
                        "target_method_name": "getBean",
                        "target_params": [
                            "beanNames[0]",
                            "handlerClass"
                        ],
                        "usage": "context.getBean(beanNames[0],handlerClass)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(HandleAuthorizationDenied.class)",
            "SecurityAnnotationScanners.requireUnique(PreAuthorize.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Arrays",
            "java.util.function.Function",
            "org.springframework.context.ApplicationContext",
            "org.springframework.expression.Expression",
            "org.springframework.lang.NonNull",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PreAuthorizeReactiveAuthorizationManager": {
        "type": "class",
        "class_name": "PreAuthorizeReactiveAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.ReactiveAuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreAuthorizeReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "PreAuthorizeReactiveAuthorizationManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setApplicationContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.context.ApplicationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setApplicationContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.registry.setApplicationContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "reactor.core.publisher.Mono"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->this.registry.getExpressionHandler().createEvaluationContext(auth,mi)).flatMap((ctx)->ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx)).cast(AuthorizationDecision.class)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->this.registry.getExpressionHandler().createEvaluationContext(auth,mi)).flatMap((ctx)->ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "authentication",
                        "target_method_name": "map",
                        "target_params": [],
                        "usage": "authentication.map((auth)->this.registry.getExpressionHandler().createEvaluationContext(auth,mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler().createEvaluationContext(auth,mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluate",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluate(attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "methodInvocation"
                        ],
                        "usage": "this.registry.getAttribute(methodInvocation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "preAuthorizeAttribute.getHandler().handleDeniedInvocation(methodInvocation,authorizationResult)"
                    },
                    {
                        "target_type": null,
                        "target_name": "preAuthorizeAttribute",
                        "target_method_name": "getHandler",
                        "target_params": [],
                        "usage": "preAuthorizeAttribute.getHandler()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "reactor.core.publisher.Mono",
            "org.springframework.context.ApplicationContext",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PreAuthorize",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ReactiveAuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor": {
        "type": "class",
        "class_name": "PreFilterAuthorizationMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreFilterAuthorizationMethodInterceptor",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.AuthorizationMethodPointcuts",
                        "target_name": "AuthorizationMethodPointcuts",
                        "target_method_name": "forAnnotations",
                        "target_params": [
                            "PreFilter"
                        ],
                        "usage": "AuthorizationMethodPointcuts.forAnnotations(PreFilter.class)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setExpressionHandler",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "strategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "createEvaluationContext",
                        "target_params": [
                            "this::getAuthentication",
                            "mi"
                        ],
                        "usage": "expressionHandler.createEvaluationContext(this::getAuthentication,mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getFilterTarget",
                        "target_params": [],
                        "usage": "attribute.getFilterTarget()"
                    },
                    {
                        "target_type": null,
                        "target_name": "expressionHandler",
                        "target_method_name": "filter",
                        "target_params": [
                            "filterTarget",
                            "attribute"
                        ],
                        "usage": "expressionHandler.filter(filterTarget,attribute.getExpression(),ctx)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findFilterTarget",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "filterTargetName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    },
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "hasText",
                        "target_params": [
                            "filterTargetName"
                        ],
                        "usage": "StringUtils.hasText(filterTargetName)"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "lookupVariable",
                        "target_params": [
                            "filterTargetName"
                        ],
                        "usage": "ctx.lookupVariable(filterTargetName)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "filterTarget",
                            ""
                        ],
                        "usage": "Assert.notNull(filterTarget,()->\"Filter target was null, or no argument with name '\"+filterTargetName+\"' found in method.\")"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "methodInvocation",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "methodInvocation.getArguments()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "arguments"
                        ],
                        "usage": "Assert.state(arguments.length==1,\"Unable to determine the method argument for filtering. Specify the filter target.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "arguments.length"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "filterTarget",
                            "\"Filter target was null"
                        ],
                        "usage": "Assert.notNull(filterTarget,\"Filter target was null. Make sure you passing the correct value in the method argument.\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "!filterTarget"
                        ],
                        "usage": "Assert.state(!filterTarget.getClass().isArray(),\"Pre-filtering on array types is not supported. Using a Collection will solve this problem.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass().isArray()"
                    },
                    {
                        "target_type": null,
                        "target_name": "filterTarget",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "filterTarget.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext().getAuthentication()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get().getContext()"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationInterceptorsOrder.PRE_FILTER.getOrder()",
            "AuthorizationInterceptorsOrder.PRE_FILTER"
        ],
        "imports": [
            "java.util.function.Supplier",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.Pointcut",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.prepost.PreFilter",
            "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.authorization.method.PreFilterAuthorizationReactiveMethodInterceptor": {
        "type": "class",
        "class_name": "PreFilterAuthorizationReactiveMethodInterceptor",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.AuthorizationAdvisor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "pointcut",
                "field_type": "org.springframework.aop.Pointcut",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "parameterNameDiscoverer",
                "field_type": "org.springframework.core.ParameterNameDiscoverer",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "order",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreFilterAuthorizationReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "PreFilterAuthorizationReactiveMethodInterceptor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expressionHandler",
                        "param_type": "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "expressionHandler",
                            "\"expressionHandler cannot be null\""
                        ],
                        "usage": "Assert.notNull(expressionHandler,\"expressionHandler cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setExpressionHandler",
                        "target_params": [
                            "expressionHandler"
                        ],
                        "usage": "this.registry.setExpressionHandler(expressionHandler)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.authorization.method.PrePostTemplateDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "setTemplateDefaults",
                        "target_params": [
                            "defaults"
                        ],
                        "usage": "this.registry.setTemplateDefaults(defaults)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setParameterNameDiscoverer",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "parameterNameDiscoverer",
                        "param_type": "org.springframework.core.ParameterNameDiscoverer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "parameterNameDiscoverer",
                            "\"parameterNameDiscoverer cannot be null\""
                        ],
                        "usage": "Assert.notNull(parameterNameDiscoverer,\"parameterNameDiscoverer cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parameterNameDiscoverer"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invoke",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getAttribute",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "this.registry.getAttribute(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getFilterTarget",
                        "target_params": [],
                        "usage": "attribute.getFilterTarget()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication().map((auth)->this.registry.getExpressionHandler().createEvaluationContext(auth,mi))"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveAuthenticationUtils",
                        "target_name": "ReactiveAuthenticationUtils",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "ReactiveAuthenticationUtils.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler().createEvaluationContext(auth,mi)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "registry",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [],
                        "usage": "this.registry.getExpressionHandler()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.value"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "Publisher"
                        ],
                        "usage": "Assert.state(Publisher.class.isAssignableFrom(type),()->String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) in order to support Reactor Context\",type,method))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "format",
                        "target_params": [
                            "\"The parameter type %s on %s must be an instance of org"
                        ],
                        "usage": "String.format(\"The parameter type %s on %s must be an instance of org.reactivestreams.Publisher \"+\"(for example, a Mono or Flux) in order to support Reactor Context\",type,method)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance().getAdapter(type)"
                    },
                    {
                        "target_type": "org.springframework.core.ReactiveAdapterRegistry",
                        "target_name": "ReactiveAdapterRegistry",
                        "target_method_name": "getSharedInstance",
                        "target_params": [],
                        "usage": "ReactiveAdapterRegistry.getSharedInstance()"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMapMany",
                        "target_params": [],
                        "usage": "toInvoke.flatMapMany((ctx)->filterMultiValue(filterTarget.value,attribute.getExpression(),ctx))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.value"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.index"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "result"
                        ],
                        "usage": "adapter.fromPublisher(result)"
                    },
                    {
                        "target_type": null,
                        "target_name": "toInvoke",
                        "target_method_name": "flatMap",
                        "target_params": [],
                        "usage": "toInvoke.flatMap((ctx)->filterSingleValue(filterTarget.value,attribute.getExpression(),ctx))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.value"
                    },
                    {
                        "target_type": null,
                        "target_name": "attribute",
                        "target_method_name": "getExpression",
                        "target_params": [],
                        "usage": "attribute.getExpression()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "filterTarget.index"
                    },
                    {
                        "target_type": null,
                        "target_name": "adapter",
                        "target_method_name": "fromPublisher",
                        "target_params": [
                            "result"
                        ],
                        "usage": "adapter.fromPublisher(result)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils",
                        "target_name": "ReactiveMethodInvocationUtils",
                        "target_method_name": "proceed",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "ReactiveMethodInvocationUtils.proceed(mi)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findFilterTarget",
                "return_type": "org.springframework.security.authorization.method.FilterTarget",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "hasText",
                        "target_params": [
                            "name"
                        ],
                        "usage": "StringUtils.hasText(name)"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "mi.getThis()"
                    },
                    {
                        "target_type": "org.springframework.aop.support.AopUtils",
                        "target_name": "AopUtils",
                        "target_method_name": "getTargetClass",
                        "target_params": [
                            "target"
                        ],
                        "usage": "AopUtils.getTargetClass(target)"
                    },
                    {
                        "target_type": "org.springframework.aop.support.AopUtils",
                        "target_name": "AopUtils",
                        "target_method_name": "getMostSpecificMethod",
                        "target_params": [
                            "mi"
                        ],
                        "usage": "AopUtils.getMostSpecificMethod(mi.getMethod(),targetClass)"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "mi.getMethod()"
                    },
                    {
                        "target_type": "org.springframework.core.ParameterNameDiscoverer",
                        "target_name": "parameterNameDiscoverer",
                        "target_method_name": "getParameterNames",
                        "target_params": [
                            "specificMethod"
                        ],
                        "usage": "this.parameterNameDiscoverer.getParameterNames(specificMethod)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.parameterNameDiscoverer"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "parameterNames.length"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "parameterNames.length"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "equals",
                        "target_params": [
                            "parameterNames[index]"
                        ],
                        "usage": "name.equals(parameterNames[index])"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "value",
                            "\"Filter target was null",
                            " or no argument with name '\"+name+\"' found in method"
                        ],
                        "usage": "Assert.notNull(value,\"Filter target was null, or no argument with name '\"+name+\"' found in method.\")"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "getArguments",
                        "target_params": [],
                        "usage": "mi.getArguments()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "arguments"
                        ],
                        "usage": "Assert.state(arguments.length==1,\"Unable to determine the method argument for filtering. Specify the filter target.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "arguments.length"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "value",
                            "\"Filter target was null"
                        ],
                        "usage": "Assert.notNull(value,\"Filter target was null. Make sure you passing the correct value in the method argument.\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "valueinstanceofPublisher<?>",
                            "\"Filter target must be an instance of Publisher"
                        ],
                        "usage": "Assert.state(valueinstanceofPublisher<?>,\"Filter target must be an instance of Publisher.\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isMultiValue",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "returnType",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "adapter",
                        "param_type": "org.springframework.core.ReactiveAdapter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.ReactiveAdapter",
                        "target_name": "adapter",
                        "target_method_name": "isMultiValue",
                        "target_params": [],
                        "usage": "adapter.isMultiValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterSingleValue",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "org.reactivestreams.Publisher"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject().getValue()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Mono.from(filterTarget).filterWhen((filterObject)->{rootObject.setFilterObject(filterObject);returnReactiveExpressionUtils.evaluateAsBoolean(filterExpression,ctx);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "from",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Mono.from(filterTarget)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "filterMultiValue",
                "return_type": "reactor.core.publisher.Flux",
                "formal_params": [
                    {
                        "param_name": "filterTarget",
                        "param_type": "org.reactivestreams.Publisher"
                    },
                    {
                        "param_name": "filterExpression",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject().getValue()"
                    },
                    {
                        "target_type": "org.springframework.expression.EvaluationContext",
                        "target_name": "ctx",
                        "target_method_name": "getRootObject",
                        "target_params": [],
                        "usage": "ctx.getRootObject()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Flux.from(filterTarget).filterWhen((filterObject)->{rootObject.setFilterObject(filterObject);returnReactiveExpressionUtils.evaluateAsBoolean(filterExpression,ctx);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "from",
                        "target_params": [
                            "filterTarget"
                        ],
                        "usage": "Flux.from(filterTarget)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rootObject",
                        "target_method_name": "setFilterObject",
                        "target_params": [
                            "filterObject"
                        ],
                        "usage": "rootObject.setFilterObject(filterObject)"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.ReactiveExpressionUtils",
                        "target_name": "ReactiveExpressionUtils",
                        "target_method_name": "evaluateAsBoolean",
                        "target_params": [
                            "filterExpression",
                            "ctx"
                        ],
                        "usage": "ReactiveExpressionUtils.evaluateAsBoolean(filterExpression,ctx)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPointcut",
                "return_type": "org.springframework.aop.Pointcut",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pointcut"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAdvice",
                "return_type": "org.aopalliance.aop.Advice",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isPerInstance",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOrder",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setOrder",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "order",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.order"
                    }
                ]
            }
        ],
        "methodCalls": [
            "AuthorizationMethodPointcuts.forAnnotations(PreFilter.class)",
            "AuthorizationInterceptorsOrder.PRE_FILTER.getOrder()",
            "AuthorizationInterceptorsOrder.PRE_FILTER"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "org.aopalliance.aop.Advice",
            "org.aopalliance.intercept.MethodInterceptor",
            "org.aopalliance.intercept.MethodInvocation",
            "org.reactivestreams.Publisher",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono",
            "org.springframework.aop.Pointcut",
            "org.springframework.aop.support.AopUtils",
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.core.ReactiveAdapter",
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.Expression",
            "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionHandler",
            "org.springframework.security.access.expression.method.MethodSecurityExpressionOperations",
            "org.springframework.security.access.prepost.PreFilter",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.authorization.method.FilterTarget": {
        "type": "class",
        "class_name": "FilterTarget",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "value",
                "field_type": "org.springframework.security.authorization.method.Publisher",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "index",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "FilterTarget",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "value",
                        "param_type": "org.springframework.security.authorization.method.Publisher"
                    },
                    {
                        "param_name": "index",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.index"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry": {
        "type": "class",
        "class_name": "PreFilterExpressionAttributeRegistry",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry",
        "fields": [
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "resolveAttribute",
                "return_type": "org.springframework.security.authorization.method.PreFilterExpressionAttribute",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser().parseExpression(preFilter.value())"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry",
                        "target_name": "this",
                        "target_method_name": "getExpressionHandler",
                        "target_params": [
                            ".getExpressionParser"
                        ],
                        "usage": "getExpressionHandler().getExpressionParser()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preFilter",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "preFilter.value()"
                    },
                    {
                        "target_type": null,
                        "target_name": "preFilter",
                        "target_method_name": "filterTarget",
                        "target_params": [],
                        "usage": "preFilter.filterTarget()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setTemplateDefaults",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "defaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanners",
                        "target_name": "SecurityAnnotationScanners",
                        "target_method_name": "requireUnique",
                        "target_params": [
                            "PreFilter"
                        ],
                        "usage": "SecurityAnnotationScanners.requireUnique(PreFilter.class,defaults)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findPreFilterAnnotation",
                "return_type": "org.springframework.security.access.prepost.PreFilter",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.scanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(PreFilter.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "org.springframework.expression.Expression",
            "org.springframework.lang.NonNull",
            "org.springframework.security.access.prepost.PreFilter",
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners"
        ]
    },
    "org.springframework.security.authorization.method.PreFilterExpressionAttribute": {
        "type": "class",
        "class_name": "PreFilterExpressionAttribute",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": "org.springframework.security.authorization.method.ExpressionAttribute",
        "fields": [
            {
                "type": "field",
                "field_name": "NULL_ATTRIBUTE",
                "field_type": "org.springframework.security.authorization.method.PreFilterExpressionAttribute",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "filterTarget",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PreFilterExpressionAttribute",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "expression",
                        "param_type": "org.springframework.security.authorization.method.Expression"
                    },
                    {
                        "param_name": "filterTarget",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getFilterTarget",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.filterTarget"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.authorization.method.PrePostTemplateDefaults": {
        "type": "class",
        "class_name": "PrePostTemplateDefaults",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "ignoreUnknown",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "isIgnoreUnknown",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreUnknown"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setIgnoreUnknown",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "ignoreUnknown",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreUnknown"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
        ]
    },
    "org.springframework.security.authorization.method.ReactiveAuthenticationUtils": {
        "type": "class",
        "class_name": "ReactiveAuthenticationUtils",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "ANONYMOUS",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication).defaultIfEmpty(ANONYMOUS)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext().map(SecurityContext::getAuthentication)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ReactiveSecurityContextHolder",
                        "target_name": "ReactiveSecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "ReactiveSecurityContextHolder.getContext()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ReactiveAuthenticationUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\")"
        ],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.security.authentication.AnonymousAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.context.ReactiveSecurityContextHolder",
            "org.springframework.security.core.context.SecurityContext"
        ]
    },
    "org.springframework.security.authorization.method.ReactiveExpressionUtils": {
        "type": "class",
        "class_name": "ReactiveExpressionUtils",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "evaluate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->{Objectvalue;try{value=expr.getValue(ctx);}catch(EvaluationExceptionex){returnMono.error(()->newIllegalArgumentException(\"Failed to evaluate expression '\"+expr.getExpressionString()+\"'\",ex));}if(valueinstanceofMono<?>mono){returnmono.flatMap((data)->adapt(expr,data));}returnadapt(expr,value);})"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getValue",
                        "target_params": [
                            "ctx"
                        ],
                        "usage": "expr.getValue(ctx)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [],
                        "usage": "Mono.error(()->newIllegalArgumentException(\"Failed to evaluate expression '\"+expr.getExpressionString()+\"'\",ex))"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "expr.getExpressionString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mono",
                        "target_method_name": "flatMap",
                        "target_params": [],
                        "usage": "mono.flatMap((data)->adapt(expr,data))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "adapt",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "value",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "newExpressionAuthorizationDecision"
                        ],
                        "usage": "Mono.just(newExpressionAuthorizationDecision(granted,expr))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "decision"
                        ],
                        "usage": "Mono.just(decision)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "evaluateAsBoolean",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    },
                    {
                        "param_name": "ctx",
                        "param_type": "org.springframework.expression.EvaluationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "defer",
                        "target_params": [],
                        "usage": "Mono.defer(()->{Objectvalue;try{value=expr.getValue(ctx);}catch(EvaluationExceptionex){returnMono.error(()->newIllegalArgumentException(\"Failed to evaluate expression '\"+expr.getExpressionString()+\"'\",ex));}if(valueinstanceofBoolean){returnMono.just((Boolean)value);}if(valueinstanceofMono<?>){Mono<?>monoValue=(Mono<?>)value;returnmonoValue.filter(Boolean.class::isInstance).map(Boolean.class::cast).switchIfEmpty(createInvalidReturnTypeMono(expr));}returncreateInvalidReturnTypeMono(expr);})"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getValue",
                        "target_params": [
                            "ctx"
                        ],
                        "usage": "expr.getValue(ctx)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [],
                        "usage": "Mono.error(()->newIllegalArgumentException(\"Failed to evaluate expression '\"+expr.getExpressionString()+\"'\",ex))"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "expr.getExpressionString()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [],
                        "usage": "Mono.just((Boolean)value)"
                    },
                    {
                        "target_type": null,
                        "target_name": "monoValue",
                        "target_method_name": "filter",
                        "target_params": [
                            "Boolean"
                        ],
                        "usage": "monoValue.filter(Boolean.class::isInstance).map(Boolean.class::cast).switchIfEmpty(createInvalidReturnTypeMono(expr))"
                    },
                    {
                        "target_type": null,
                        "target_name": "monoValue",
                        "target_method_name": "filter",
                        "target_params": [
                            "Boolean"
                        ],
                        "usage": "monoValue.filter(Boolean.class::isInstance).map(Boolean.class::cast)"
                    },
                    {
                        "target_type": null,
                        "target_name": "monoValue",
                        "target_method_name": "filter",
                        "target_params": [
                            "Boolean"
                        ],
                        "usage": "monoValue.filter(Boolean.class::isInstance)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createInvalidReturnTypeMono",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "expr",
                        "param_type": "org.springframework.expression.Expression"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "error",
                        "target_params": [],
                        "usage": "Mono.error(()->newIllegalStateException(\"Expression: '\"+expr.getExpressionString()+\"' must return boolean, Mono<Boolean>, AuthorizationResult, or Mono<AuthorizationResult>\"))"
                    },
                    {
                        "target_type": "org.springframework.expression.Expression",
                        "target_name": "expr",
                        "target_method_name": "getExpressionString",
                        "target_params": [],
                        "usage": "expr.getExpressionString()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ReactiveExpressionUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono",
            "org.springframework.expression.EvaluationContext",
            "org.springframework.expression.EvaluationException",
            "org.springframework.expression.Expression",
            "org.springframework.security.authorization.AuthorizationResult",
            "org.springframework.security.authorization.ExpressionAuthorizationDecision"
        ]
    },
    "org.springframework.security.authorization.method.ReactiveMethodInvocationUtils": {
        "type": "class",
        "class_name": "ReactiveMethodInvocationUtils",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "proceed",
                "return_type": "org.springframework.security.authorization.method.T",
                "formal_params": [
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "mi",
                        "target_method_name": "proceed",
                        "target_params": [],
                        "usage": "mi.proceed()"
                    },
                    {
                        "target_type": "reactor.core.Exceptions",
                        "target_name": "Exceptions",
                        "target_method_name": "propagate",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "Exceptions.propagate(ex)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ReactiveMethodInvocationUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "reactor.core.Exceptions"
        ]
    },
    "org.springframework.security.authorization.method.ReflectiveMethodAuthorizationDeniedHandler": {
        "type": "class",
        "class_name": "ReflectiveMethodAuthorizationDeniedHandler",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "targetClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "managerClass",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ReflectiveMethodAuthorizationDeniedHandler",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "managerClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Will attempt to instantiate handlerClass attributes using reflection since no application context was supplied to \"+managerClass"
                        ],
                        "usage": "this.logger.debug(\"Will attempt to instantiate handlerClass attributes using reflection since no application context was supplied to \"+managerClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.managerClass"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReflectiveMethodAuthorizationDeniedHandler",
                        "target_name": "this",
                        "target_method_name": "constructMethodAuthorizationDeniedHandler",
                        "target_params": [
                            ".handleDeniedInvocation"
                        ],
                        "usage": "constructMethodAuthorizationDeniedHandler().handleDeniedInvocation(methodInvocation,authorizationResult)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.authorization.method.ReflectiveMethodAuthorizationDeniedHandler",
                        "target_name": "this",
                        "target_method_name": "constructMethodAuthorizationDeniedHandler",
                        "target_params": [
                            ".handleDeniedInvocationResult"
                        ],
                        "usage": "constructMethodAuthorizationDeniedHandler().handleDeniedInvocationResult(methodInvocationResult,authorizationResult)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "constructMethodAuthorizationDeniedHandler",
                "return_type": "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getConstructor",
                        "target_params": [],
                        "usage": "this.targetClass.getConstructor().newInstance()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getConstructor",
                        "target_params": [],
                        "usage": "this.targetClass.getConstructor()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetClass"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.managerClass"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())"
        ],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.security.authorization.AuthorizationResult"
        ]
    },
    "org.springframework.security.authorization.method.SecuredAuthorizationManager": {
        "type": "class",
        "class_name": "SecuredAuthorizationManager",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.AuthorizationManager"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authoritiesAuthorizationManager",
                "field_type": "org.springframework.security.authorization.AuthorizationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "cachedAuthorities",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "scanner",
                "field_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "setAuthoritiesAuthorizationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authoritiesAuthorizationManager",
                        "param_type": "org.springframework.security.authorization.AuthorizationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authoritiesAuthorizationManager",
                            "\"authoritiesAuthorizationManager cannot be null\""
                        ],
                        "usage": "Assert.notNull(authoritiesAuthorizationManager,\"authoritiesAuthorizationManager cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesAuthorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "check",
                "return_type": "org.springframework.security.authorization.AuthorizationDecision",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "mi",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "authorities",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "authorities.isEmpty()"
                    },
                    {
                        "target_type": "org.springframework.security.authorization.AuthorizationManager",
                        "target_name": "authoritiesAuthorizationManager",
                        "target_method_name": "check",
                        "target_params": [
                            "authentication",
                            "authorities"
                        ],
                        "usage": "this.authoritiesAuthorizationManager.check(authentication,authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesAuthorizationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "methodInvocation",
                        "target_method_name": "getMethod",
                        "target_params": [],
                        "usage": "methodInvocation.getMethod()"
                    },
                    {
                        "target_type": "org.aopalliance.intercept.MethodInvocation",
                        "target_name": "methodInvocation",
                        "target_method_name": "getThis",
                        "target_params": [],
                        "usage": "methodInvocation.getThis()"
                    },
                    {
                        "target_type": null,
                        "target_name": "target",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "target.getClass()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "cachedAuthorities",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "cacheKey",
                            ""
                        ],
                        "usage": "this.cachedAuthorities.computeIfAbsent(cacheKey,(k)->resolveAuthorities(method,targetClass))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cachedAuthorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolveAuthorities",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "Set",
                        "target_method_name": "of",
                        "target_params": [
                            "secured"
                        ],
                        "usage": "Set.of(secured.value())"
                    },
                    {
                        "target_type": null,
                        "target_name": "secured",
                        "target_method_name": "value",
                        "target_params": [],
                        "usage": "secured.value()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptySet",
                        "target_params": [],
                        "usage": "Collections.emptySet()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findSecuredAnnotation",
                "return_type": "org.springframework.security.access.annotation.Secured",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                        "target_name": "scanner",
                        "target_method_name": "scan",
                        "target_params": [
                            "method",
                            "targetClassToUse"
                        ],
                        "usage": "this.scanner.scan(method,targetClassToUse)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.scanner"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityAnnotationScanners.requireUnique(Secured.class)"
        ],
        "imports": [
            "java.lang.reflect.Method",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.Map",
            "java.util.Set",
            "java.util.concurrent.ConcurrentHashMap",
            "java.util.function.Supplier",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.core.MethodClassKey",
            "org.springframework.security.access.annotation.Secured",
            "org.springframework.security.authorization.AuthoritiesAuthorizationManager",
            "org.springframework.security.authorization.AuthorizationDecision",
            "org.springframework.security.authorization.AuthorizationManager",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.annotation.SecurityAnnotationScanner",
            "org.springframework.security.core.annotation.SecurityAnnotationScanners",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler": {
        "type": "class",
        "class_name": "ThrowingMethodAuthorizationDeniedHandler",
        "class_type": "class",
        "package": "org.springframework.security.authorization.method",
        "implementz": [
            "org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "handleDeniedInvocation",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocation",
                        "param_type": "org.aopalliance.intercept.MethodInvocation"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "handleDeniedInvocationResult",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "methodInvocationResult",
                        "param_type": "org.springframework.security.authorization.method.MethodInvocationResult"
                    },
                    {
                        "param_name": "authorizationResult",
                        "param_type": "org.springframework.security.authorization.AuthorizationResult"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.security.authorization.AuthorizationDeniedException",
            "org.springframework.security.authorization.AuthorizationResult"
        ]
    },
    "org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport": {
        "type": "class",
        "class_name": "AbstractDelegatingSecurityContextSupport",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractDelegatingSecurityContextSupport",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "wrap",
                "return_type": "org.springframework.security.concurrent.Runnable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
                        "target_name": "DelegatingSecurityContextRunnable",
                        "target_method_name": "create",
                        "target_params": [
                            "delegate",
                            "securityContext",
                            "securityContextHolderStrategy"
                        ],
                        "usage": "DelegatingSecurityContextRunnable.create(delegate,this.securityContext,this.securityContextHolderStrategy)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "wrap",
                "return_type": "java.util.concurrent.Callable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextCallable",
                        "target_name": "DelegatingSecurityContextCallable",
                        "target_method_name": "create",
                        "target_params": [
                            "delegate",
                            "securityContext",
                            "securityContextHolderStrategy"
                        ],
                        "usage": "DelegatingSecurityContextCallable.create(delegate,this.securityContext,this.securityContextHolderStrategy)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.util.concurrent.Callable",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.concurrent.DelegatingSecurityContextCallable": {
        "type": "class",
        "class_name": "DelegatingSecurityContextCallable",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [
            "java.util.concurrent.Callable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "java.util.concurrent.Callable",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "explicitSecurityContextProvided",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegateSecurityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "originalSecurityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextCallable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextCallable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "SecurityContextHolder.getContext()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextCallable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "explicitSecurityContextProvided",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"delegate cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"delegate cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContext",
                            "\"securityContext cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContext,\"securityContext cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.explicitSecurityContextProvided"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "call",
                "return_type": "org.springframework.security.concurrent.V",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "delegateSecurityContext"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(this.delegateSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": "java.util.concurrent.Callable",
                        "target_name": "delegate",
                        "target_method_name": "call",
                        "target_params": [],
                        "usage": "this.delegate.call()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "emptyContext",
                        "target_method_name": "equals",
                        "target_params": [
                            "originalSecurityContext"
                        ],
                        "usage": "emptyContext.equals(this.originalSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "clearContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.clearContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "originalSecurityContext"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(this.originalSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.explicitSecurityContextProvided"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "securityContextHolderStrategy.getContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.concurrent.Callable",
                        "target_name": "delegate",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "this.delegate.toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "create",
                "return_type": "java.util.concurrent.Callable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "create",
                "return_type": "java.util.concurrent.Callable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Callable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"delegate cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"delegate cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "callable",
                        "target_method_name": "setSecurityContextHolderStrategy",
                        "target_params": [
                            "securityContextHolderStrategy"
                        ],
                        "usage": "callable.setSecurityContextHolderStrategy(securityContextHolderStrategy)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.util.concurrent.Callable",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.concurrent.DelegatingSecurityContextExecutor": {
        "type": "class",
        "class_name": "DelegatingSecurityContextExecutor",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [
            "java.util.concurrent.Executor"
        ],
        "extendz": "org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport",
        "fields": [
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "java.util.concurrent.Executor",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateExecutor",
                        "param_type": "java.util.concurrent.Executor"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegateExecutor",
                            "\"delegateExecutor cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegateExecutor,\"delegateExecutor cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.Executor"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "execute",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.concurrent.Executor",
                        "target_name": "delegate",
                        "target_method_name": "execute",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.execute(wrap(task))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDelegateExecutor",
                "return_type": "java.util.concurrent.Executor",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "setSecurityContextHolderStrategy",
                        "target_params": [
                            "securityContextHolderStrategy"
                        ],
                        "usage": "super.setSecurityContextHolderStrategy(securityContextHolderStrategy)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.concurrent.Executor",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService": {
        "type": "class",
        "class_name": "DelegatingSecurityContextExecutorService",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [
            "java.util.concurrent.ExecutorService"
        ],
        "extendz": "org.springframework.security.concurrent.DelegatingSecurityContextExecutor",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextExecutorService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateExecutorService",
                        "param_type": "java.util.concurrent.ExecutorService"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextExecutorService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.ExecutorService"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "shutdown",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".shutdown"
                        ],
                        "usage": "getDelegate().shutdown()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "shutdownNow",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".shutdownNow"
                        ],
                        "usage": "getDelegate().shutdownNow()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isShutdown",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".isShutdown"
                        ],
                        "usage": "getDelegate().isShutdown()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isTerminated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".isTerminated"
                        ],
                        "usage": "getDelegate().isTerminated()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "awaitTermination",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "timeout",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".awaitTermination"
                        ],
                        "usage": "getDelegate().awaitTermination(timeout,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "submit",
                "return_type": "java.util.concurrent.Future",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "java.util.concurrent.Callable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".submit"
                        ],
                        "usage": "getDelegate().submit(wrap(task))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "submit",
                "return_type": "java.util.concurrent.Future",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "result",
                        "param_type": "org.springframework.security.concurrent.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".submit"
                        ],
                        "usage": "getDelegate().submit(wrap(task),result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "submit",
                "return_type": "java.util.concurrent.Future",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".submit"
                        ],
                        "usage": "getDelegate().submit(wrap(task))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invokeAll",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "tasks",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".invokeAll"
                        ],
                        "usage": "getDelegate().invokeAll(tasks)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invokeAll",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "tasks",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "timeout",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".invokeAll"
                        ],
                        "usage": "getDelegate().invokeAll(tasks,timeout,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invokeAny",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "tasks",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".invokeAny"
                        ],
                        "usage": "getDelegate().invokeAny(tasks)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invokeAny",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "tasks",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "timeout",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".invokeAny"
                        ],
                        "usage": "getDelegate().invokeAny(tasks,timeout,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createTasks",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "tasks",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "tasks",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "tasks.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "results",
                        "target_method_name": "add",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "results.add(wrap(task))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDelegate",
                "return_type": "java.util.concurrent.ExecutorService",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "java.util.concurrent.Callable",
            "java.util.concurrent.ExecutionException",
            "java.util.concurrent.ExecutorService",
            "java.util.concurrent.Future",
            "java.util.concurrent.TimeUnit",
            "java.util.concurrent.TimeoutException",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder"
        ]
    },
    "org.springframework.security.concurrent.DelegatingSecurityContextRunnable": {
        "type": "class",
        "class_name": "DelegatingSecurityContextRunnable",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [
            "org.springframework.security.concurrent.Runnable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.concurrent.Runnable",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "explicitSecurityContextProvided",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegateSecurityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "originalSecurityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextRunnable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextRunnable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "SecurityContextHolder.getContext()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextRunnable",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "explicitSecurityContextProvided",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"delegate cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"delegate cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContext",
                            "\"securityContext cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContext,\"securityContext cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.explicitSecurityContextProvided"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "run",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "delegateSecurityContext"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(this.delegateSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.concurrent.Runnable",
                        "target_name": "delegate",
                        "target_method_name": "run",
                        "target_params": [],
                        "usage": "this.delegate.run()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "emptyContext",
                        "target_method_name": "equals",
                        "target_params": [
                            "originalSecurityContext"
                        ],
                        "usage": "emptyContext.equals(this.originalSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "clearContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.clearContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "originalSecurityContext"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(this.originalSecurityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.originalSecurityContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.explicitSecurityContextProvided"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegateSecurityContext"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.Runnable",
                        "target_name": "delegate",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "this.delegate.toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "create",
                "return_type": "org.springframework.security.concurrent.Runnable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"delegate cannot be  null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"delegate cannot be  null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "create",
                "return_type": "org.springframework.security.concurrent.Runnable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"delegate cannot be  null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"delegate cannot be  null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "runnable",
                        "target_method_name": "setSecurityContextHolderStrategy",
                        "target_params": [
                            "securityContextHolderStrategy"
                        ],
                        "usage": "runnable.setSecurityContextHolderStrategy(securityContextHolderStrategy)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService": {
        "type": "class",
        "class_name": "DelegatingSecurityContextScheduledExecutorService",
        "class_type": "class",
        "package": "org.springframework.security.concurrent",
        "implementz": [
            "java.util.concurrent.ScheduledExecutorService"
        ],
        "extendz": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextScheduledExecutorService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateScheduledExecutorService",
                        "param_type": "java.util.concurrent.ScheduledExecutorService"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextScheduledExecutorService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "java.util.concurrent.ScheduledExecutorService"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "schedule",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "command",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".schedule"
                        ],
                        "usage": "getDelegate().schedule(wrap(command),delay,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "schedule",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "callable",
                        "param_type": "java.util.concurrent.Callable"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".schedule"
                        ],
                        "usage": "getDelegate().schedule(wrap(callable),delay,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleAtFixedRate",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "command",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "initialDelay",
                        "param_type": "long"
                    },
                    {
                        "param_name": "period",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".scheduleAtFixedRate"
                        ],
                        "usage": "getDelegate().scheduleAtFixedRate(wrap(command),initialDelay,period,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleWithFixedDelay",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "command",
                        "param_type": "org.springframework.security.concurrent.Runnable"
                    },
                    {
                        "param_name": "initialDelay",
                        "param_type": "long"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "long"
                    },
                    {
                        "param_name": "unit",
                        "param_type": "java.util.concurrent.TimeUnit"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".scheduleWithFixedDelay"
                        ],
                        "usage": "getDelegate().scheduleWithFixedDelay(wrap(command),initialDelay,delay,unit)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDelegate",
                "return_type": "java.util.concurrent.ScheduledExecutorService",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.concurrent.Callable",
            "java.util.concurrent.ScheduledExecutorService",
            "java.util.concurrent.ScheduledFuture",
            "java.util.concurrent.TimeUnit",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder"
        ]
    },
    "org.springframework.security.context.DelegatingApplicationListener": {
        "type": "class",
        "class_name": "DelegatingApplicationListener",
        "class_type": "class",
        "package": "org.springframework.security.context",
        "implementz": [
            "org.springframework.context.ApplicationListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "listeners",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "onApplicationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.context.ApplicationEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.listeners"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEvent",
                        "target_name": "event",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "event.getSource()"
                    },
                    {
                        "target_type": null,
                        "target_name": "listener",
                        "target_method_name": "supportsEventType",
                        "target_params": [
                            "event"
                        ],
                        "usage": "listener.supportsEventType(event.getClass())"
                    },
                    {
                        "target_type": "org.springframework.context.ApplicationEvent",
                        "target_name": "event",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "event.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "listener",
                        "target_method_name": "supportsSourceType",
                        "target_params": [
                            "source"
                        ],
                        "usage": "listener.supportsSourceType(source.getClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": "source",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "source.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "listener",
                        "target_method_name": "onApplicationEvent",
                        "target_params": [
                            "event"
                        ],
                        "usage": "listener.onApplicationEvent(event)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addListener",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "smartApplicationListener",
                        "param_type": "org.springframework.context.event.SmartApplicationListener"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "smartApplicationListener",
                            "\"smartApplicationListener cannot be null\""
                        ],
                        "usage": "Assert.notNull(smartApplicationListener,\"smartApplicationListener cannot be null\")"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "listeners",
                        "target_method_name": "add",
                        "target_params": [
                            "smartApplicationListener"
                        ],
                        "usage": "this.listeners.add(smartApplicationListener)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.listeners"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List",
            "java.util.concurrent.CopyOnWriteArrayList",
            "org.springframework.context.ApplicationEvent",
            "org.springframework.context.ApplicationListener",
            "org.springframework.context.event.SmartApplicationListener",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.converter.RsaKeyConverters": {
        "type": "class",
        "class_name": "RsaKeyConverters",
        "class_type": "class",
        "package": "org.springframework.security.converter",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "DASHES",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "PKCS8_PEM_HEADER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "PKCS8_PEM_FOOTER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "X509_PEM_HEADER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "X509_PEM_FOOTER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "X509_CERT_HEADER",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "X509_CERT_FOOTER",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RsaKeyConverters",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "pkcs8",
                "return_type": "org.springframework.core.convert.converter.Converter",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!lines"
                        ],
                        "usage": "Assert.isTrue(!lines.isEmpty()&&lines.get(0).startsWith(PKCS8_PEM_HEADER),\"Key is not in PEM-encoded PKCS#8 format, please check that the header begins with \"+PKCS8_PEM_HEADER)"
                    },
                    {
                        "target_type": null,
                        "target_name": "lines",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "lines.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "lines",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "lines.get(0).startsWith(PKCS8_PEM_HEADER)"
                    },
                    {
                        "target_type": null,
                        "target_name": "lines",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "lines.get(0)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.RsaKeyConverters",
                        "target_name": "RsaKeyConverters",
                        "target_method_name": "isNotPkcs8Wrapper",
                        "target_params": [
                            "line"
                        ],
                        "usage": "RsaKeyConverters.isNotPkcs8Wrapper(line)"
                    },
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "append",
                        "target_params": [
                            "line"
                        ],
                        "usage": "base64Encoded.append(line)"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder().decode(base64Encoded.toString())"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder()"
                    },
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "base64Encoded.toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "keyFactory",
                        "target_method_name": "generatePrivate",
                        "target_params": [
                            "newPKCS8EncodedKeySpec"
                        ],
                        "usage": "keyFactory.generatePrivate(newPKCS8EncodedKeySpec(pkcs8))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "x509",
                "return_type": "org.springframework.core.convert.converter.Converter",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "lines",
                            "\"Input stream is empty\""
                        ],
                        "usage": "Assert.notEmpty(lines,\"Input stream is empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "lines",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "lines.get(0)"
                    },
                    {
                        "target_type": null,
                        "target_name": "encodingHint",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "X509_PEM_HEADER"
                        ],
                        "usage": "encodingHint.startsWith(X509_PEM_HEADER)"
                    },
                    {
                        "target_type": null,
                        "target_name": "encodingHint",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "X509_CERT_HEADER"
                        ],
                        "usage": "encodingHint.startsWith(X509_CERT_HEADER)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "decoder",
                            "\"Key is not in PEM-encoded X"
                        ],
                        "usage": "Assert.notNull(decoder,\"Key is not in PEM-encoded X.509 format or a valid X.509 certificate, please check that the header begins with \"+X509_PEM_HEADER+\" or \"+X509_CERT_HEADER)"
                    },
                    {
                        "target_type": null,
                        "target_name": "decoder",
                        "target_method_name": "convert",
                        "target_params": [
                            "lines"
                        ],
                        "usage": "decoder.convert(lines)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "x509CertificateFactory",
                "return_type": "java.security.cert.CertificateFactory",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.cert.CertificateFactory",
                        "target_name": "CertificateFactory",
                        "target_method_name": "getInstance",
                        "target_params": [
                            "\"X"
                        ],
                        "usage": "CertificateFactory.getInstance(\"X.509\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "readAllLines",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.io.InputStream"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "reader",
                        "target_method_name": "lines",
                        "target_params": [],
                        "usage": "reader.lines().collect(Collectors.toList())"
                    },
                    {
                        "target_type": null,
                        "target_name": "reader",
                        "target_method_name": "lines",
                        "target_params": [],
                        "usage": "reader.lines()"
                    },
                    {
                        "target_type": "java.util.stream.Collectors",
                        "target_name": "Collectors",
                        "target_method_name": "toList",
                        "target_params": [],
                        "usage": "Collectors.toList()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "rsaFactory",
                "return_type": "java.security.KeyFactory",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.KeyFactory",
                        "target_name": "KeyFactory",
                        "target_method_name": "getInstance",
                        "target_params": [
                            "\"RSA\""
                        ],
                        "usage": "KeyFactory.getInstance(\"RSA\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isNotPkcs8Wrapper",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "line",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.converter.PKCS8_PEM_HEADER",
                        "target_name": "PKCS8_PEM_HEADER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "PKCS8_PEM_HEADER.equals(line)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.PKCS8_PEM_FOOTER",
                        "target_name": "PKCS8_PEM_FOOTER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "PKCS8_PEM_FOOTER.equals(line)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.BufferedReader",
            "java.io.ByteArrayInputStream",
            "java.io.IOException",
            "java.io.InputStream",
            "java.io.InputStreamReader",
            "java.security.KeyFactory",
            "java.security.NoSuchAlgorithmException",
            "java.security.cert.CertificateException",
            "java.security.cert.CertificateFactory",
            "java.security.cert.X509Certificate",
            "java.security.interfaces.RSAPrivateKey",
            "java.security.interfaces.RSAPublicKey",
            "java.security.spec.PKCS8EncodedKeySpec",
            "java.security.spec.X509EncodedKeySpec",
            "java.util.Base64",
            "java.util.List",
            "java.util.stream.Collectors",
            "org.springframework.core.convert.converter.Converter",
            "org.springframework.lang.NonNull",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.converter.X509PemDecoder": {
        "type": "class",
        "class_name": "X509PemDecoder",
        "class_type": "class",
        "package": "org.springframework.security.converter",
        "implementz": [
            "org.springframework.security.converter.Converter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "keyFactory",
                "field_type": "org.springframework.security.converter.KeyFactory",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "X509PemDecoder",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "keyFactory",
                        "param_type": "org.springframework.security.converter.KeyFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "convert",
                "return_type": "org.springframework.security.converter.RSAPublicKey",
                "formal_params": [
                    {
                        "param_name": "lines",
                        "param_type": "org.springframework.security.converter.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "append",
                        "target_params": [
                            "line"
                        ],
                        "usage": "base64Encoded.append(line)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder().decode(base64Encoded.toString())"
                    },
                    {
                        "target_type": "org.springframework.security.converter.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder()"
                    },
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "base64Encoded.toString()"
                    },
                    {
                        "target_type": "org.springframework.security.converter.KeyFactory",
                        "target_name": "keyFactory",
                        "target_method_name": "generatePublic",
                        "target_params": [
                            "newX509EncodedKeySpec"
                        ],
                        "usage": "this.keyFactory.generatePublic(newX509EncodedKeySpec(x509))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isNotX509PemWrapper",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "line",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.converter.X509_PEM_HEADER",
                        "target_name": "X509_PEM_HEADER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "X509_PEM_HEADER.equals(line)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.X509_PEM_FOOTER",
                        "target_name": "X509_PEM_FOOTER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "X509_PEM_FOOTER.equals(line)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.converter.X509CertificateDecoder": {
        "type": "class",
        "class_name": "X509CertificateDecoder",
        "class_type": "class",
        "package": "org.springframework.security.converter",
        "implementz": [
            "org.springframework.security.converter.Converter"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "certificateFactory",
                "field_type": "org.springframework.security.converter.CertificateFactory",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "X509CertificateDecoder",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "certificateFactory",
                        "param_type": "org.springframework.security.converter.CertificateFactory"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.certificateFactory"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "convert",
                "return_type": "org.springframework.security.converter.RSAPublicKey",
                "formal_params": [
                    {
                        "param_name": "lines",
                        "param_type": "org.springframework.security.converter.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "append",
                        "target_params": [
                            "line"
                        ],
                        "usage": "base64Encoded.append(line)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder().decode(base64Encoded.toString())"
                    },
                    {
                        "target_type": "org.springframework.security.converter.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder()"
                    },
                    {
                        "target_type": null,
                        "target_name": "base64Encoded",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "base64Encoded.toString()"
                    },
                    {
                        "target_type": "org.springframework.security.converter.CertificateFactory",
                        "target_name": "certificateFactory",
                        "target_method_name": "generateCertificate",
                        "target_params": [
                            "x509CertStream"
                        ],
                        "usage": "this.certificateFactory.generateCertificate(x509CertStream)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.certificateFactory"
                    },
                    {
                        "target_type": null,
                        "target_name": "certificate",
                        "target_method_name": "getPublicKey",
                        "target_params": [],
                        "usage": "certificate.getPublicKey()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isNotX509CertificateWrapper",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "line",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.converter.X509_CERT_HEADER",
                        "target_name": "X509_CERT_HEADER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "X509_CERT_HEADER.equals(line)"
                    },
                    {
                        "target_type": "org.springframework.security.converter.X509_CERT_FOOTER",
                        "target_name": "X509_CERT_FOOTER",
                        "target_method_name": "equals",
                        "target_params": [
                            "line"
                        ],
                        "usage": "X509_CERT_FOOTER.equals(line)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.AuthenticatedPrincipal": {
        "type": "interface",
        "class_name": "AuthenticatedPrincipal",
        "class_type": "interface",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getName",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.authentication.AuthenticationManager"
        ]
    },
    "org.springframework.security.core.Authentication": {
        "type": "interface",
        "class_name": "Authentication",
        "class_type": "interface",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getDetails",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAuthenticated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setAuthenticated",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "isAuthenticated",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.security.Principal",
            "java.util.Collection",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.core.context.SecurityContextHolder"
        ]
    },
    "org.springframework.security.core.AuthenticationException": {
        "type": "class",
        "class_name": "AuthenticationException",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": "org.springframework.security.core.RuntimeException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthenticationException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "AuthenticationException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial"
        ]
    },
    "org.springframework.security.core.ComparableVersion": {
        "type": "class",
        "class_name": "ComparableVersion",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Comparable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "MAX_INT_ITEM_LENGTH",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "MAX_LONG_ITEM_LENGTH",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "value",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "canonical",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "items",
                "field_type": "org.springframework.security.core.ListItem",
                "methodCalls": []
            }
        ],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "java.math.BigInteger",
            "java.util.ArrayDeque",
            "java.util.ArrayList",
            "java.util.Arrays",
            "java.util.Deque",
            "java.util.Iterator",
            "java.util.List",
            "java.util.Locale",
            "java.util.Properties"
        ]
    },
    "org.springframework.security.core.Item": {
        "type": "interface",
        "class_name": "Item",
        "class_type": "interface",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.IntItem": {
        "type": "class",
        "class_name": "IntItem",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Item"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "value",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "ZERO",
                "field_type": "org.springframework.security.core.IntItem",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "IntItem",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "IntItem",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "str",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    },
                    {
                        "target_type": "java.lang.Integer",
                        "target_name": "Integer",
                        "target_method_name": "parseInt",
                        "target_params": [
                            "str"
                        ],
                        "usage": "Integer.parseInt(str)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "item.getType()"
                    },
                    {
                        "target_type": "java.lang.Integer",
                        "target_name": "Integer",
                        "target_method_name": "compare",
                        "target_params": [
                            "value",
                            ""
                        ],
                        "usage": "Integer.compare(value,((IntItem)item).value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((IntItem)item).value"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "item.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "o",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "o.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "intItem.value"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Integer",
                        "target_name": "Integer",
                        "target_method_name": "toString",
                        "target_params": [
                            "value"
                        ],
                        "usage": "Integer.toString(value)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.LongItem": {
        "type": "class",
        "class_name": "LongItem",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Item"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "value",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "LongItem",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "str",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "parseLong",
                        "target_params": [
                            "str"
                        ],
                        "usage": "Long.parseLong(str)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "item.getType()"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "compare",
                        "target_params": [
                            "value",
                            ""
                        ],
                        "usage": "Long.compare(value,((LongItem)item).value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((LongItem)item).value"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "item.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "o",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "o.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "longItem.value"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "toString",
                        "target_params": [
                            "value"
                        ],
                        "usage": "Long.toString(value)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.BigIntegerItem": {
        "type": "class",
        "class_name": "BigIntegerItem",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Item"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "value",
                "field_type": "org.springframework.security.core.BigInteger",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "BigIntegerItem",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "str",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "item.getType()"
                    },
                    {
                        "target_type": "org.springframework.security.core.BigInteger",
                        "target_name": "value",
                        "target_method_name": "compareTo",
                        "target_params": [],
                        "usage": "value.compareTo(((BigIntegerItem)item).value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((BigIntegerItem)item).value"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "item.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "o",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "o.getClass()"
                    },
                    {
                        "target_type": "org.springframework.security.core.BigInteger",
                        "target_name": "value",
                        "target_method_name": "equals",
                        "target_params": [
                            "that"
                        ],
                        "usage": "value.equals(that.value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "that.value"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.BigInteger",
                        "target_name": "value",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "value.hashCode()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.BigInteger",
                        "target_name": "value",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "value.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.StringItem": {
        "type": "class",
        "class_name": "StringItem",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Item"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "QUALIFIERS",
                "field_type": "org.springframework.security.core.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "ALIASES",
                "field_type": "org.springframework.security.core.Properties",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "RELEASE_VERSION_INDEX",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "value",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "StringItem",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "value",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "followedByDigit",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "value",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "value.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "value",
                        "target_method_name": "charAt",
                        "target_params": [
                            "0"
                        ],
                        "usage": "value.charAt(0)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    },
                    {
                        "target_type": "org.springframework.security.core.ALIASES",
                        "target_name": "ALIASES",
                        "target_method_name": "getProperty",
                        "target_params": [
                            "value",
                            "value"
                        ],
                        "usage": "ALIASES.getProperty(value,value)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.StringItem",
                        "target_name": "this",
                        "target_method_name": "comparableQualifier",
                        "target_params": [
                            "value.compareTo"
                        ],
                        "usage": "comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "comparableQualifier",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "qualifier",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.QUALIFIERS",
                        "target_name": "QUALIFIERS",
                        "target_method_name": "indexOf",
                        "target_params": [
                            "qualifier"
                        ],
                        "usage": "QUALIFIERS.indexOf(qualifier)"
                    },
                    {
                        "target_type": "org.springframework.security.core.QUALIFIERS",
                        "target_name": "QUALIFIERS",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "QUALIFIERS.size()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "i"
                        ],
                        "usage": "String.valueOf(i)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.StringItem",
                        "target_name": "this",
                        "target_method_name": "comparableQualifier",
                        "target_params": [
                            "value.compareTo"
                        ],
                        "usage": "comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "item.getType()"
                    },
                    {
                        "target_type": "org.springframework.security.core.StringItem",
                        "target_name": "this",
                        "target_method_name": "comparableQualifier",
                        "target_params": [
                            "value.compareTo"
                        ],
                        "usage": "comparableQualifier(value).compareTo(comparableQualifier(((StringItem)item).value))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((StringItem)item).value"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "item.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "o",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "o.getClass()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "value",
                        "target_method_name": "equals",
                        "target_params": [
                            "that"
                        ],
                        "usage": "value.equals(that.value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "that.value"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "value",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "value.hashCode()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [
            "Arrays.asList(\"alpha\",\"beta\",\"milestone\",\"rc\",\"snapshot\",\"\",\"sp\")",
            "ALIASES.put(\"ga\",\"\")",
            "ALIASES.put(\"final\",\"\")",
            "ALIASES.put(\"release\",\"\")",
            "ALIASES.put(\"cr\",\"rc\")",
            "String.valueOf(QUALIFIERS.indexOf(\"\"))",
            "QUALIFIERS.indexOf(\"\")"
        ],
        "imports": []
    },
    "org.springframework.security.core.ListItem": {
        "type": "class",
        "class_name": "ListItem",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [
            "org.springframework.security.core.Item"
        ],
        "extendz": "org.springframework.security.core.ArrayList",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getType",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isNull",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "normalize",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "lastItem",
                        "target_method_name": "isNull",
                        "target_params": [],
                        "usage": "lastItem.isNull()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "item",
                        "param_type": "org.springframework.security.core.Item"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "first",
                        "target_method_name": "compareTo",
                        "target_params": [
                            "null"
                        ],
                        "usage": "first.compareTo(null)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "item.getType()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((ListItem)item).iterator()"
                    },
                    {
                        "target_type": null,
                        "target_name": "left",
                        "target_method_name": "hasNext",
                        "target_params": [],
                        "usage": "left.hasNext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "right",
                        "target_method_name": "hasNext",
                        "target_params": [],
                        "usage": "right.hasNext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "left",
                        "target_method_name": "hasNext",
                        "target_params": [],
                        "usage": "left.hasNext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "left",
                        "target_method_name": "next",
                        "target_params": [],
                        "usage": "left.next()"
                    },
                    {
                        "target_type": null,
                        "target_name": "right",
                        "target_method_name": "hasNext",
                        "target_params": [],
                        "usage": "right.hasNext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "right",
                        "target_method_name": "next",
                        "target_params": [],
                        "usage": "right.next()"
                    },
                    {
                        "target_type": null,
                        "target_name": "r",
                        "target_method_name": "compareTo",
                        "target_params": [
                            "l"
                        ],
                        "usage": "r.compareTo(l)"
                    },
                    {
                        "target_type": null,
                        "target_name": "l",
                        "target_method_name": "compareTo",
                        "target_params": [
                            "r"
                        ],
                        "usage": "l.compareTo(r)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Item",
                        "target_name": "item",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "item.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "buffer",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "buffer.length()"
                    },
                    {
                        "target_type": null,
                        "target_name": "buffer",
                        "target_method_name": "append",
                        "target_params": [],
                        "usage": "buffer.append((iteminstanceofListItem)?'-':'.')"
                    },
                    {
                        "target_type": null,
                        "target_name": "buffer",
                        "target_method_name": "append",
                        "target_params": [
                            "item"
                        ],
                        "usage": "buffer.append(item)"
                    },
                    {
                        "target_type": null,
                        "target_name": "buffer",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "buffer.toString()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ComparableVersion",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "version",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "parseVersion",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "version",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.value"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "version.toLowerCase(Locale.ENGLISH)"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "push",
                        "target_params": [
                            "list"
                        ],
                        "usage": "stack.push(list)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "version.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "charAt",
                        "target_params": [
                            "i"
                        ],
                        "usage": "version.charAt(i)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "IntItem"
                        ],
                        "usage": "list.add(IntItem.ZERO)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "parseItem"
                        ],
                        "usage": "list.add(parseItem(isDigit,version.substring(startIndex,i)))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "substring",
                        "target_params": [
                            "startIndex",
                            "i"
                        ],
                        "usage": "version.substring(startIndex,i)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "IntItem"
                        ],
                        "usage": "list.add(IntItem.ZERO)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "parseItem"
                        ],
                        "usage": "list.add(parseItem(isDigit,version.substring(startIndex,i)))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "substring",
                        "target_params": [
                            "startIndex",
                            "i"
                        ],
                        "usage": "version.substring(startIndex,i)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "list=newListItem"
                        ],
                        "usage": "list.add(list=newListItem())"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "push",
                        "target_params": [
                            "list"
                        ],
                        "usage": "stack.push(list)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Character",
                        "target_name": "Character",
                        "target_method_name": "isDigit",
                        "target_params": [
                            "c"
                        ],
                        "usage": "Character.isDigit(c)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "newStringItem"
                        ],
                        "usage": "list.add(newStringItem(version.substring(startIndex,i),true))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "substring",
                        "target_params": [
                            "startIndex",
                            "i"
                        ],
                        "usage": "version.substring(startIndex,i)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "list=newListItem"
                        ],
                        "usage": "list.add(list=newListItem())"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "push",
                        "target_params": [
                            "list"
                        ],
                        "usage": "stack.push(list)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "parseItem"
                        ],
                        "usage": "list.add(parseItem(true,version.substring(startIndex,i)))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "substring",
                        "target_params": [
                            "startIndex",
                            "i"
                        ],
                        "usage": "version.substring(startIndex,i)"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "list=newListItem"
                        ],
                        "usage": "list.add(list=newListItem())"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "push",
                        "target_params": [
                            "list"
                        ],
                        "usage": "stack.push(list)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "version.length()"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "parseItem"
                        ],
                        "usage": "list.add(parseItem(isDigit,version.substring(startIndex)))"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "version",
                        "target_method_name": "substring",
                        "target_params": [
                            "startIndex"
                        ],
                        "usage": "version.substring(startIndex)"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "stack.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "stack",
                        "target_method_name": "pop",
                        "target_params": [],
                        "usage": "stack.pop()"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "normalize",
                        "target_params": [],
                        "usage": "list.normalize()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "parseItem",
                "return_type": "org.springframework.security.core.Item",
                "formal_params": [
                    {
                        "param_name": "isDigit",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "buf",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "buf.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "buf.length()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "stripLeadingZeroes",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "buf",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "buf.isEmpty()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "buf.length()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "charAt",
                        "target_params": [
                            "i"
                        ],
                        "usage": "buf.charAt(i)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "buf",
                        "target_method_name": "substring",
                        "target_params": [
                            "i"
                        ],
                        "usage": "buf.substring(i)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "compareTo",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "org.springframework.security.core.ComparableVersion"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "items",
                        "target_method_name": "compareTo",
                        "target_params": [],
                        "usage": "items.compareTo(o.items)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "o.items"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getCanonical",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "items",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "items.toString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "o",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "items",
                        "target_method_name": "equals",
                        "target_params": [],
                        "usage": "items.equals(((ComparableVersion)o).items)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((ComparableVersion)o).items"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "items",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "items.hashCode()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "main",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "args.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "prev",
                        "target_method_name": "compareTo",
                        "target_params": [
                            "c"
                        ],
                        "usage": "prev.compareTo(c)"
                    },
                    {
                        "target_type": null,
                        "target_name": "prev",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "prev.toString()"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "String",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "i++"
                        ],
                        "usage": "String.valueOf(i++)"
                    },
                    {
                        "target_type": null,
                        "target_name": "c",
                        "target_method_name": "getCanonical",
                        "target_params": [],
                        "usage": "c.getCanonical()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.CredentialsContainer": {
        "type": "interface",
        "class_name": "CredentialsContainer",
        "class_type": "interface",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "eraseCredentials",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.GrantedAuthority": {
        "type": "interface",
        "class_name": "GrantedAuthority",
        "class_type": "interface",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthority",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "org.springframework.security.access.AccessDecisionManager"
        ]
    },
    "org.springframework.security.core.SpringSecurityCoreVersion": {
        "type": "class",
        "class_name": "SpringSecurityCoreVersion",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "DISABLE_CHECKS",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SERIAL_VERSION_UID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "MIN_SPRING_VERSION",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SpringSecurityCoreVersion",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "performVersionChecks",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "performVersionChecks",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "minSpringVersion",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.SpringVersion",
                        "target_name": "SpringVersion",
                        "target_method_name": "getVersion",
                        "target_params": [],
                        "usage": "SpringVersion.getVersion()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "info",
                        "target_params": [
                            "\"You are running with Spring Security Core \"+version"
                        ],
                        "usage": "logger.info(\"You are running with Spring Security Core \"+version)"
                    },
                    {
                        "target_type": "org.springframework.security.core.SpringSecurityCoreVersion",
                        "target_name": "this",
                        "target_method_name": "newComparableVersion",
                        "target_params": [
                            "springVersion.compareTo"
                        ],
                        "usage": "newComparableVersion(springVersion).compareTo(newComparableVersion(minSpringVersion))"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "\"**** You are advised to use Spring \"+minSpringVersion+\" or later with this version"
                        ],
                        "usage": "logger.warn(\"**** You are advised to use Spring \"+minSpringVersion+\" or later with this version. You are running: \"+springVersion)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getVersion",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "pkg",
                        "target_method_name": "getImplementationVersion",
                        "target_params": [],
                        "usage": "pkg.getImplementationVersion()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "disableChecks",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "springVersion",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "springSecurityVersion",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "springVersion",
                        "target_method_name": "equals",
                        "target_params": [
                            "springSecurityVersion"
                        ],
                        "usage": "springVersion.equals(springSecurityVersion)"
                    },
                    {
                        "target_type": "org.springframework.security.core.Boolean",
                        "target_name": "Boolean",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "DISABLE_CHECKS"
                        ],
                        "usage": "Boolean.getBoolean(DISABLE_CHECKS)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSpringVersion",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "properties",
                        "target_method_name": "load",
                        "target_params": [
                            "is"
                        ],
                        "usage": "properties.load(is)"
                    },
                    {
                        "target_type": null,
                        "target_name": "properties",
                        "target_method_name": "getProperty",
                        "target_params": [
                            "\"org"
                        ],
                        "usage": "properties.getProperty(\"org.springframework:spring-core\")"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.class.getName().concat(\".DISABLE_CHECKS\")",
            "SpringSecurityCoreVersion.class.getName()",
            "LogFactory.getLog(SpringSecurityCoreVersion.class)"
        ],
        "imports": [
            "java.io.IOException",
            "java.io.InputStream",
            "java.util.Properties",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.SpringVersion"
        ]
    },
    "org.springframework.security.core.SpringSecurityMessageSource": {
        "type": "class",
        "class_name": "SpringSecurityMessageSource",
        "class_type": "class",
        "package": "org.springframework.security.core",
        "implementz": [],
        "extendz": "org.springframework.context.support.ResourceBundleMessageSource",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SpringSecurityMessageSource",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAccessor",
                "return_type": "org.springframework.context.support.MessageSourceAccessor",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.context.support.ResourceBundleMessageSource"
        ]
    },
    "org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner": {
        "type": "class",
        "class_name": "AbstractSecurityAnnotationScanner",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [
            "org.springframework.security.core.annotation.SecurityAnnotationScanner"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "scan",
                "return_type": "org.springframework.security.core.annotation.A",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "targetClass",
                            "\"targetClass cannot be null\""
                        ],
                        "usage": "Assert.notNull(targetClass,\"targetClass cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotation",
                        "target_method_name": "synthesize",
                        "target_params": [],
                        "usage": "annotation.synthesize()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scan",
                "return_type": "org.springframework.security.core.annotation.A",
                "formal_params": [
                    {
                        "param_name": "parameter",
                        "param_type": "java.lang.reflect.Parameter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "annotation",
                        "target_method_name": "synthesize",
                        "target_params": [],
                        "usage": "annotation.synthesize()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "merge",
                "return_type": "org.springframework.core.annotation.MergedAnnotation",
                "formal_params": [
                    {
                        "param_name": "element",
                        "param_type": "java.lang.reflect.AnnotatedElement"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.AnnotatedElement",
            "java.lang.reflect.Method",
            "java.lang.reflect.Parameter",
            "org.springframework.core.annotation.MergedAnnotation",
            "org.springframework.lang.Nullable",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults": {
        "type": "class",
        "class_name": "AnnotationTemplateExpressionDefaults",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "ignoreUnknown",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "isIgnoreUnknown",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreUnknown"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setIgnoreUnknown",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "ignoreUnknown",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.ignoreUnknown"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.annotation.ExpressionTemplateSecurityAnnotationScanner": {
        "type": "class",
        "class_name": "ExpressionTemplateSecurityAnnotationScanner",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [],
        "extendz": "org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner",
        "fields": [
            {
                "type": "field",
                "field_name": "conversionService",
                "field_type": "org.springframework.core.convert.support.DefaultConversionService",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "type",
                "field_type": "java.lang.Class",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "unique",
                "field_type": "org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "templateDefaults",
                "field_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ExpressionTemplateSecurityAnnotationScanner",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "type",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "templateDefaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "type",
                            "\"type cannot be null\""
                        ],
                        "usage": "Assert.notNull(type,\"type cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "templateDefaults",
                            "\"templateDefaults cannot be null\""
                        ],
                        "usage": "Assert.notNull(templateDefaults,\"templateDefaults cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.type"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.unique"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.templateDefaults"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "merge",
                "return_type": "org.springframework.core.annotation.MergedAnnotation",
                "formal_params": [
                    {
                        "param_name": "element",
                        "param_type": "java.lang.reflect.AnnotatedElement"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner",
                        "target_name": "unique",
                        "target_method_name": "merge",
                        "target_params": [
                            "parameter",
                            "targetClass"
                        ],
                        "usage": "this.unique.merge(parameter,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.unique"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner",
                        "target_name": "unique",
                        "target_method_name": "merge",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "this.unique.merge(method,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.unique"
                    },
                    {
                        "target_type": "java.lang.reflect.AnnotatedElement",
                        "target_name": "element",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "element.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "resolvePlaceholders",
                "return_type": "org.springframework.core.annotation.MergedAnnotation",
                "formal_params": [
                    {
                        "param_name": "mergedAnnotation",
                        "param_type": "org.springframework.core.annotation.MergedAnnotation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.templateDefaults"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "getMetaSource",
                        "target_params": [],
                        "usage": "mergedAnnotation.getMetaSource()"
                    },
                    {
                        "target_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults",
                        "target_name": "templateDefaults",
                        "target_method_name": "isIgnoreUnknown",
                        "target_params": [],
                        "usage": "this.templateDefaults.isIgnoreUnknown()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.templateDefaults"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "asMap",
                        "target_params": [],
                        "usage": "mergedAnnotation.asMap()"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "getMetaSource",
                        "target_params": [],
                        "usage": "mergedAnnotation.getMetaSource().asMap()"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "getMetaSource",
                        "target_params": [],
                        "usage": "mergedAnnotation.getMetaSource()"
                    },
                    {
                        "target_type": null,
                        "target_name": "metaAnnotationProperties",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "metaAnnotationProperties.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "property",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "property.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "property",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "property.getValue()"
                    },
                    {
                        "target_type": "org.springframework.core.convert.support.DefaultConversionService",
                        "target_name": "conversionService",
                        "target_method_name": "convert",
                        "target_params": [
                            "value",
                            "String"
                        ],
                        "usage": "conversionService.convert(value,String.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "stringProperties",
                        "target_method_name": "put",
                        "target_params": [
                            "key",
                            "asString"
                        ],
                        "usage": "stringProperties.put(key,asString)"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "asMap",
                        "target_params": [],
                        "usage": "mergedAnnotation.asMap()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationProperties",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "annotationProperties.entrySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationProperty",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "annotationProperty.getValue()"
                    },
                    {
                        "target_type": null,
                        "target_name": "helper",
                        "target_method_name": "replacePlaceholders",
                        "target_params": [
                            "expression",
                            "stringProperties::get"
                        ],
                        "usage": "helper.replacePlaceholders(expression,stringProperties::get)"
                    },
                    {
                        "target_type": null,
                        "target_name": "properties",
                        "target_method_name": "put",
                        "target_params": [
                            "annotationProperty"
                        ],
                        "usage": "properties.put(annotationProperty.getKey(),value)"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationProperty",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "annotationProperty.getKey()"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "mergedAnnotation",
                        "target_method_name": "getSource",
                        "target_params": [],
                        "usage": "mergedAnnotation.getSource()"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotation",
                        "target_name": "MergedAnnotation",
                        "target_method_name": "of",
                        "target_params": [
                            "annotatedElement",
                            "type",
                            "properties"
                        ],
                        "usage": "MergedAnnotation.of(annotatedElement,this.type,properties)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.type"
                    }
                ]
            }
        ],
        "methodCalls": [
            "conversionService.addConverter(newClassToStringConverter())"
        ],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.AnnotatedElement",
            "java.lang.reflect.Method",
            "java.lang.reflect.Parameter",
            "java.util.Collections",
            "java.util.HashMap",
            "java.util.Map",
            "java.util.Set",
            "org.springframework.core.annotation.MergedAnnotation",
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.core.convert.converter.GenericConverter",
            "org.springframework.core.convert.support.DefaultConversionService",
            "org.springframework.util.Assert",
            "org.springframework.util.PropertyPlaceholderHelper"
        ]
    },
    "org.springframework.security.core.annotation.ClassToStringConverter": {
        "type": "class",
        "class_name": "ClassToStringConverter",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [
            "org.springframework.security.core.annotation.GenericConverter"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getConvertibleTypes",
                "return_type": "org.springframework.security.core.annotation.Set",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.annotation.Collections",
                        "target_name": "Collections",
                        "target_method_name": "singleton",
                        "target_params": [
                            "newConvertiblePair"
                        ],
                        "usage": "Collections.singleton(newConvertiblePair(Class.class,String.class))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "convert",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "sourceType",
                        "param_type": "org.springframework.security.core.annotation.TypeDescriptor"
                    },
                    {
                        "param_name": "targetType",
                        "param_type": "org.springframework.security.core.annotation.TypeDescriptor"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "source",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "source.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.annotation.SecurityAnnotationScanner": {
        "type": "interface",
        "class_name": "SecurityAnnotationScanner",
        "class_type": "interface",
        "package": "org.springframework.security.core.annotation",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "scan",
                "return_type": "org.springframework.security.core.annotation.A",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "scan",
                "return_type": "org.springframework.security.core.annotation.A",
                "formal_params": [
                    {
                        "param_name": "parameter",
                        "param_type": "java.lang.reflect.Parameter"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.Method",
            "java.lang.reflect.Parameter",
            "org.springframework.lang.Nullable"
        ]
    },
    "org.springframework.security.core.annotation.SecurityAnnotationScanners": {
        "type": "class",
        "class_name": "SecurityAnnotationScanners",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "uniqueScanners",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "uniqueTemplateScanners",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "uniqueTypesScanners",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityAnnotationScanners",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "requireUnique",
                "return_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "formal_params": [
                    {
                        "param_name": "type",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "uniqueScanners",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "type",
                            ""
                        ],
                        "usage": "uniqueScanners.computeIfAbsent(type,(t)->newUniqueSecurityAnnotationScanner<>(type))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "requireUnique",
                "return_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "formal_params": [
                    {
                        "param_name": "type",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "templateDefaults",
                        "param_type": "org.springframework.security.core.annotation.AnnotationTemplateExpressionDefaults"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "uniqueTemplateScanners",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "type",
                            ""
                        ],
                        "usage": "uniqueTemplateScanners.computeIfAbsent(type,(t)->newExpressionTemplateSecurityAnnotationScanner<>(t,templateDefaults))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "requireUnique",
                "return_type": "org.springframework.security.core.annotation.SecurityAnnotationScanner",
                "formal_params": [
                    {
                        "param_name": "types",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "types",
                        "target_method_name": "forEach",
                        "target_params": [],
                        "usage": "types.forEach((type)->casted.add((Class<Annotation>)type))"
                    },
                    {
                        "target_type": null,
                        "target_name": "casted",
                        "target_method_name": "add",
                        "target_params": [],
                        "usage": "casted.add((Class<Annotation>)type)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "uniqueTypesScanners",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "types",
                            ""
                        ],
                        "usage": "uniqueTypesScanners.computeIfAbsent(types,(t)->newUniqueSecurityAnnotationScanner<>(casted))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.AnnotatedElement",
            "java.util.ArrayList",
            "java.util.List",
            "java.util.Map",
            "java.util.concurrent.ConcurrentHashMap"
        ]
    },
    "org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner": {
        "type": "class",
        "class_name": "UniqueSecurityAnnotationScanner",
        "class_type": "class",
        "package": "org.springframework.security.core.annotation",
        "implementz": [],
        "extendz": "org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner",
        "fields": [
            {
                "type": "field",
                "field_name": "types",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "uniqueParameterAnnotationCache",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "uniqueMethodAnnotationCache",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UniqueSecurityAnnotationScanner",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "type",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "type",
                            "\"type cannot be null\""
                        ],
                        "usage": "Assert.notNull(type,\"type cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.types"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "List",
                        "target_method_name": "of",
                        "target_params": [
                            "type"
                        ],
                        "usage": "List.of(type)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "UniqueSecurityAnnotationScanner",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "types",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "types",
                            "\"types cannot be null\""
                        ],
                        "usage": "Assert.notNull(types,\"types cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.types"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "merge",
                "return_type": "org.springframework.core.annotation.MergedAnnotation",
                "formal_params": [
                    {
                        "param_name": "element",
                        "param_type": "java.lang.reflect.AnnotatedElement"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "uniqueParameterAnnotationCache",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "parameter",
                            ""
                        ],
                        "usage": "this.uniqueParameterAnnotationCache.computeIfAbsent(parameter,(p)->{List<MergedAnnotation<A>>annotations=findParameterAnnotations(p);returnrequireUnique(p,annotations);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.uniqueParameterAnnotationCache"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "uniqueMethodAnnotationCache",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "newMethodClassKey"
                        ],
                        "usage": "this.uniqueMethodAnnotationCache.computeIfAbsent(newMethodClassKey(method,targetClass),(k)->{List<MergedAnnotation<A>>annotations=findMethodAnnotations(method,targetClass);returnrequireUnique(method,annotations);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.uniqueMethodAnnotationCache"
                    },
                    {
                        "target_type": "java.lang.reflect.AnnotatedElement",
                        "target_name": "element",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "element.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "requireUnique",
                "return_type": "org.springframework.core.annotation.MergedAnnotation",
                "formal_params": [
                    {
                        "param_name": "element",
                        "param_type": "java.lang.reflect.AnnotatedElement"
                    },
                    {
                        "param_name": "annotations",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "annotations",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "annotations.size()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "annotations",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "annotations.get(0)"
                    },
                    {
                        "target_type": null,
                        "target_name": "synthesized",
                        "target_method_name": "add",
                        "target_params": [
                            "annotation"
                        ],
                        "usage": "synthesized.add(annotation.synthesize())"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotation",
                        "target_method_name": "synthesize",
                        "target_params": [],
                        "usage": "annotation.synthesize()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.types"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "annotations",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "annotations.size()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findParameterAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "current",
                        "param_type": "java.lang.reflect.Parameter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "directAnnotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "directAnnotations.isEmpty()"
                    },
                    {
                        "target_type": "java.lang.reflect.Parameter",
                        "target_name": "current",
                        "target_method_name": "getDeclaringExecutable",
                        "target_params": [],
                        "usage": "current.getDeclaringExecutable()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "directAnnotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "directAnnotations.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "clazz",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "clazz.getSuperclass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findClosestParameterAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "current",
                        "param_type": "java.lang.reflect.Parameter"
                    },
                    {
                        "param_name": "visited",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "visited",
                        "target_method_name": "add",
                        "target_params": [
                            "clazz"
                        ],
                        "usage": "visited.add(clazz)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getInterfaces",
                        "target_params": [],
                        "usage": "clazz.getInterfaces()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "addAll",
                        "target_params": [
                            "findClosestParameterAnnotations"
                        ],
                        "usage": "annotations.addAll(findClosestParameterAnnotations(method,ifc,current,visited))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findDirectParameterAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "current",
                        "param_type": "java.lang.reflect.Parameter"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredMethod",
                        "target_params": [
                            "method"
                        ],
                        "usage": "clazz.getDeclaredMethod(method.getName(),method.getParameterTypes())"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getParameterTypes",
                        "target_params": [],
                        "usage": "method.getParameterTypes()"
                    },
                    {
                        "target_type": null,
                        "target_name": "methodToUse",
                        "target_method_name": "getParameters",
                        "target_params": [],
                        "usage": "methodToUse.getParameters()"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameter",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "parameter.getName().equals(current.getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": "parameter",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "parameter.getName()"
                    },
                    {
                        "target_type": "java.lang.reflect.Parameter",
                        "target_name": "current",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "current.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "directAnnotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "directAnnotations.isEmpty()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findMethodAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "getMostSpecificMethod",
                        "target_params": [
                            "method",
                            "targetClass"
                        ],
                        "usage": "ClassUtils.getMostSpecificMethod(method,targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "annotations.isEmpty()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "annotations.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "specificMethod",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "specificMethod.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "annotations.isEmpty()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findClosestMethodAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    },
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "classesToSkip",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "classesToSkip",
                        "target_method_name": "contains",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "classesToSkip.contains(targetClass)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "classesToSkip",
                        "target_method_name": "add",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "classesToSkip.add(targetClass)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getDeclaredMethod",
                        "target_params": [
                            "method"
                        ],
                        "usage": "targetClass.getDeclaredMethod(method.getName(),method.getParameterTypes())"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getParameterTypes",
                        "target_params": [],
                        "usage": "method.getParameterTypes()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "annotations.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "addAll",
                        "target_params": [
                            "findClosestMethodAnnotations"
                        ],
                        "usage": "annotations.addAll(findClosestMethodAnnotations(method,targetClass.getSuperclass(),classesToSkip))"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "targetClass.getSuperclass()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getInterfaces",
                        "target_params": [],
                        "usage": "targetClass.getInterfaces()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "addAll",
                        "target_params": [
                            "findClosestMethodAnnotations"
                        ],
                        "usage": "annotations.addAll(findClosestMethodAnnotations(method,inter,classesToSkip))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findClosestClassAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "targetClass",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "classesToSkip",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "classesToSkip",
                        "target_method_name": "contains",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "classesToSkip.contains(targetClass)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "classesToSkip",
                        "target_method_name": "add",
                        "target_params": [
                            "targetClass"
                        ],
                        "usage": "classesToSkip.add(targetClass)"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "annotations.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "addAll",
                        "target_params": [
                            "findClosestClassAnnotations"
                        ],
                        "usage": "annotations.addAll(findClosestClassAnnotations(targetClass.getSuperclass(),classesToSkip))"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "targetClass.getSuperclass()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "targetClass",
                        "target_method_name": "getInterfaces",
                        "target_params": [],
                        "usage": "targetClass.getInterfaces()"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotations",
                        "target_method_name": "addAll",
                        "target_params": [
                            "findClosestClassAnnotations"
                        ],
                        "usage": "annotations.addAll(findClosestClassAnnotations(inter,classesToSkip))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findDirectAnnotations",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "element",
                        "param_type": "java.lang.reflect.AnnotatedElement"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.annotation.MergedAnnotations",
                        "target_name": "MergedAnnotations",
                        "target_method_name": "from",
                        "target_params": [
                            "element",
                            "MergedAnnotations"
                        ],
                        "usage": "MergedAnnotations.from(element,MergedAnnotations.SearchStrategy.DIRECT,RepeatableContainers.none())"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.RepeatableContainers",
                        "target_name": "RepeatableContainers",
                        "target_method_name": "none",
                        "target_params": [],
                        "usage": "RepeatableContainers.none()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mergedAnnotations",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "mergedAnnotations.stream().filter((annotation)->this.types.contains(annotation.getType())).map((annotation)->(MergedAnnotation<A>)annotation).toList()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mergedAnnotations",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "mergedAnnotations.stream().filter((annotation)->this.types.contains(annotation.getType())).map((annotation)->(MergedAnnotation<A>)annotation)"
                    },
                    {
                        "target_type": null,
                        "target_name": "mergedAnnotations",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "mergedAnnotations.stream().filter((annotation)->this.types.contains(annotation.getType()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "mergedAnnotations",
                        "target_method_name": "stream",
                        "target_params": [],
                        "usage": "mergedAnnotations.stream()"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "types",
                        "target_method_name": "contains",
                        "target_params": [
                            "annotation"
                        ],
                        "usage": "this.types.contains(annotation.getType())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.types"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotation",
                        "target_method_name": "getType",
                        "target_params": [],
                        "usage": "annotation.getType()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.AnnotatedElement",
            "java.lang.reflect.Executable",
            "java.lang.reflect.Method",
            "java.lang.reflect.Parameter",
            "java.util.ArrayList",
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Map",
            "java.util.Set",
            "java.util.concurrent.ConcurrentHashMap",
            "org.springframework.core.MethodClassKey",
            "org.springframework.core.annotation.AnnotationConfigurationException",
            "org.springframework.core.annotation.MergedAnnotation",
            "org.springframework.core.annotation.MergedAnnotations",
            "org.springframework.core.annotation.RepeatableContainers",
            "org.springframework.util.Assert",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.core.authority.AuthorityUtils": {
        "type": "class",
        "class_name": "AuthorityUtils",
        "class_type": "class",
        "package": "org.springframework.security.core.authority",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "NO_AUTHORITIES",
                "field_type": "java.util.List",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AuthorityUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "commaSeparatedStringToAuthorityList",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "authorityString",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "tokenizeToStringArray",
                        "target_params": [
                            "authorityString",
                            "\"",
                            "\""
                        ],
                        "usage": "StringUtils.tokenizeToStringArray(authorityString,\",\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorityListToSet",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "userAuthorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userAuthorities",
                            "\"userAuthorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(userAuthorities,\"userAuthorities cannot be null\")"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "userAuthorities",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "userAuthorities.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "set",
                        "target_method_name": "add",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "set.add(authority.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createAuthorityList",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "authorities.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "grantedAuthorities",
                        "target_method_name": "add",
                        "target_params": [
                            "newSimpleGrantedAuthority"
                        ],
                        "usage": "grantedAuthorities.add(newSimpleGrantedAuthority(authority))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createAuthorityList",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "authorities",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "authorities.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "grantedAuthorities",
                        "target_method_name": "add",
                        "target_params": [
                            "newSimpleGrantedAuthority"
                        ],
                        "usage": "grantedAuthorities.add(newSimpleGrantedAuthority(authority))"
                    }
                ]
            }
        ],
        "methodCalls": [
            "Collections.emptyList()"
        ],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.core.authority.GrantedAuthoritiesContainer": {
        "type": "interface",
        "class_name": "GrantedAuthoritiesContainer",
        "class_type": "interface",
        "package": "org.springframework.security.core.authority",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.core.authority.SimpleGrantedAuthority": {
        "type": "class",
        "class_name": "SimpleGrantedAuthority",
        "class_type": "class",
        "package": "org.springframework.security.core.authority",
        "implementz": [
            "org.springframework.security.core.GrantedAuthority"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "role",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SimpleGrantedAuthority",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "role",
                            "\"A granted authority textual representation is required\""
                        ],
                        "usage": "Assert.hasText(role,\"A granted authority textual representation is required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthority",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "equals",
                        "target_params": [
                            "sga"
                        ],
                        "usage": "this.role.equals(sga.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    },
                    {
                        "target_type": null,
                        "target_name": "sga",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "sga.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "role",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.role.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.role"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper": {
        "type": "interface",
        "class_name": "Attributes2GrantedAuthoritiesMapper",
        "class_type": "interface",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getGrantedAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper": {
        "type": "interface",
        "class_name": "GrantedAuthoritiesMapper",
        "class_type": "interface",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "mapAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.core.authority.mapping.MapBasedAttributes2GrantedAuthoritiesMapper": {
        "type": "class",
        "class_name": "MapBasedAttributes2GrantedAuthoritiesMapper",
        "class_type": "class",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [
            "org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,MappableAttributesRetriever,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "attributes2grantedAuthoritiesMap",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "stringSeparator",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "mappableAttributes",
                "field_type": "java.util.Set",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attributes2grantedAuthoritiesMap",
                            "\"attributes2grantedAuthoritiesMap must be set\""
                        ],
                        "usage": "Assert.notNull(this.attributes2grantedAuthoritiesMap,\"attributes2grantedAuthoritiesMap must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributes2grantedAuthoritiesMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGrantedAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "attributes2grantedAuthoritiesMap",
                        "target_method_name": "get",
                        "target_params": [
                            "attribute"
                        ],
                        "usage": "this.attributes2grantedAuthoritiesMap.get(attribute)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributes2grantedAuthoritiesMap"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "addAll",
                        "target_params": [
                            "granted"
                        ],
                        "usage": "result.addAll(granted)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "trimToSize",
                        "target_params": [],
                        "usage": "result.trimToSize()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttributes2grantedAuthoritiesMap",
                "return_type": "java.util.Map",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributes2grantedAuthoritiesMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAttributes2grantedAuthoritiesMap",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "attributes2grantedAuthoritiesMap",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "attributes2grantedAuthoritiesMap",
                            "\"A non-empty attributes2grantedAuthoritiesMap must be supplied\""
                        ],
                        "usage": "Assert.notEmpty(attributes2grantedAuthoritiesMap,\"A non-empty attributes2grantedAuthoritiesMap must be supplied\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributes2grantedAuthoritiesMap"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "attributes2grantedAuthoritiesMap"
                        ],
                        "usage": "Collections.unmodifiableSet(this.attributes2grantedAuthoritiesMap.keySet())"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "attributes2grantedAuthoritiesMap",
                        "target_method_name": "keySet",
                        "target_params": [],
                        "usage": "this.attributes2grantedAuthoritiesMap.keySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributes2grantedAuthoritiesMap"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "preProcessMap",
                "return_type": "java.util.Map",
                "formal_params": [
                    {
                        "param_name": "orgMap",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "orgMap",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "orgMap.size()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "orgMap",
                        "target_method_name": "entrySet",
                        "target_params": [],
                        "usage": "orgMap.entrySet()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isInstanceOf",
                        "target_params": [
                            "String"
                        ],
                        "usage": "Assert.isInstanceOf(String.class,entry.getKey(),\"attributes2grantedAuthoritiesMap contains non-String objects as keys\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "put",
                        "target_params": [],
                        "usage": "result.put((String)entry.getKey(),getGrantedAuthorityCollection(entry.getValue()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "entry.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "entry",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "entry.getValue()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGrantedAuthorityCollection",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "value",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addGrantedAuthorityCollection",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "value",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "result",
                        "target_method_name": "add",
                        "target_params": [],
                        "usage": "result.add((GrantedAuthority)value)"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "value",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "value.getClass().getName()"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "value",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "value.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addGrantedAuthorityCollection",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "value",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addGrantedAuthorityCollection",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "value",
                        "param_type": "org.springframework.security.core.authority.mapping.Object[]"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addGrantedAuthorityCollection",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "result",
                        "param_type": "java.util.Collection"
                    },
                    {
                        "param_name": "value",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.stringSeparator"
                    },
                    {
                        "target_type": null,
                        "target_name": "tokenizer",
                        "target_method_name": "hasMoreTokens",
                        "target_params": [],
                        "usage": "tokenizer.hasMoreTokens()"
                    },
                    {
                        "target_type": null,
                        "target_name": "tokenizer",
                        "target_method_name": "nextToken",
                        "target_params": [],
                        "usage": "tokenizer.nextToken()"
                    },
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "hasText",
                        "target_params": [
                            "token"
                        ],
                        "usage": "StringUtils.hasText(token)"
                    },
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "result",
                        "target_method_name": "add",
                        "target_params": [
                            "newSimpleGrantedAuthority"
                        ],
                        "usage": "result.add(newSimpleGrantedAuthority(token))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMappableAttributes",
                "return_type": "java.util.Set",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getStringSeparator",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.stringSeparator"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setStringSeparator",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "stringSeparator",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.stringSeparator"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.HashMap",
            "java.util.List",
            "java.util.Map",
            "java.util.Set",
            "java.util.StringTokenizer",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.core.authority.mapping.MappableAttributesRetriever": {
        "type": "interface",
        "class_name": "MappableAttributesRetriever",
        "class_type": "interface",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getMappableAttributes",
                "return_type": "java.util.Set",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Set"
        ]
    },
    "org.springframework.security.core.authority.mapping.NullAuthoritiesMapper": {
        "type": "class",
        "class_name": "NullAuthoritiesMapper",
        "class_type": "class",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [
            "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "mapAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper": {
        "type": "class",
        "class_name": "SimpleAttributes2GrantedAuthoritiesMapper",
        "class_type": "class",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [
            "org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "attributePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convertAttributeToUpperCase",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convertAttributeToLowerCase",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "addPrefixIfAlreadyExisting",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [],
                        "usage": "Assert.isTrue(!(isConvertAttributeToUpperCase()&&isConvertAttributeToLowerCase()),\"Either convertAttributeToUpperCase or convertAttributeToLowerCase can be set to true, but not both\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGrantedAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "attributes",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "attributes",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "attributes.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "add",
                        "target_params": [
                            "getGrantedAuthority"
                        ],
                        "usage": "result.add(getGrantedAuthority(attribute))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getGrantedAuthority",
                "return_type": "org.springframework.security.core.GrantedAuthority",
                "formal_params": [
                    {
                        "param_name": "attribute",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "attribute",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "attribute.toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "attribute",
                        "target_method_name": "toUpperCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "attribute.toUpperCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "attribute",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "getAttributePrefix"
                        ],
                        "usage": "attribute.startsWith(getAttributePrefix())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isConvertAttributeToLowerCase",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertAttributeToLowerCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setConvertAttributeToLowerCase",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "b",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertAttributeToLowerCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isConvertAttributeToUpperCase",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertAttributeToUpperCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setConvertAttributeToUpperCase",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "b",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertAttributeToUpperCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAttributePrefix",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributePrefix"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAttributePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "string",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.attributePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAddPrefixIfAlreadyExisting",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.addPrefixIfAlreadyExisting"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAddPrefixIfAlreadyExisting",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "b",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.addPrefixIfAlreadyExisting"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "java.util.Locale",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.authority.mapping.SimpleAuthorityMapper": {
        "type": "class",
        "class_name": "SimpleAuthorityMapper",
        "class_type": "class",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [
            "org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "defaultAuthority",
                "field_type": "org.springframework.security.core.GrantedAuthority",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "prefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convertToUpperCase",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "convertToLowerCase",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [],
                        "usage": "Assert.isTrue(!(this.convertToUpperCase&&this.convertToLowerCase),\"Either convertToUpperCase or convertToLowerCase can be set to true, but not both\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToUpperCase"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToLowerCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mapAuthorities",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collection",
                        "target_name": "authorities",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "authorities.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapped",
                        "target_method_name": "add",
                        "target_params": [
                            "mapAuthority"
                        ],
                        "usage": "mapped.add(mapAuthority(authority.getAuthority()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultAuthority"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapped",
                        "target_method_name": "add",
                        "target_params": [
                            "defaultAuthority"
                        ],
                        "usage": "mapped.add(this.defaultAuthority)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultAuthority"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mapAuthority",
                "return_type": "org.springframework.security.core.GrantedAuthority",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToUpperCase"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "toUpperCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "name.toUpperCase(Locale.ROOT)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToLowerCase"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "name.toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "prefix",
                        "target_method_name": "length",
                        "target_params": [],
                        "usage": "this.prefix.length()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.prefix"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "name",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "prefix"
                        ],
                        "usage": "name.startsWith(this.prefix)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.prefix"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.prefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "prefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "prefix",
                            "\"prefix cannot be null\""
                        ],
                        "usage": "Assert.notNull(prefix,\"prefix cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.prefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setConvertToUpperCase",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convertToUpperCase",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToUpperCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setConvertToLowerCase",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "convertToLowerCase",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.convertToLowerCase"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDefaultAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authority",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "authority",
                            "\"The authority name cannot be set to an empty value\""
                        ],
                        "usage": "Assert.hasText(authority,\"The authority name cannot be set to an empty value\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.defaultAuthority"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.HashSet",
            "java.util.Locale",
            "java.util.Set",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever": {
        "type": "class",
        "class_name": "SimpleMappableAttributesRetriever",
        "class_type": "class",
        "package": "org.springframework.security.core.authority.mapping",
        "implementz": [
            "org.springframework.security.core.authority.mapping.MappableAttributesRetriever"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "mappableAttributes",
                "field_type": "java.util.Set",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getMappableAttributes",
                "return_type": "java.util.Set",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMappableAttributes",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "aMappableRoles",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    },
                    {
                        "target_type": "java.util.Set",
                        "target_name": "mappableAttributes",
                        "target_method_name": "addAll",
                        "target_params": [
                            "aMappableRoles"
                        ],
                        "usage": "this.mappableAttributes.addAll(aMappableRoles)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "mappableAttributes"
                        ],
                        "usage": "Collections.unmodifiableSet(this.mappableAttributes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.mappableAttributes"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.Set"
        ]
    },
    "org.springframework.security.core.context.DeferredSecurityContext": {
        "type": "interface",
        "class_name": "DeferredSecurityContext",
        "class_type": "interface",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "isGenerated",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier"
        ]
    },
    "org.springframework.security.core.context.GlobalSecurityContextHolderStrategy": {
        "type": "class",
        "class_name": "GlobalSecurityContextHolderStrategy",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContextHolderStrategy"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "contextHolder",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "context",
                            "\"Only non-null SecurityContext instances are permitted\""
                        ],
                        "usage": "Assert.notNull(context,\"Only non-null SecurityContext instances are permitted\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy": {
        "type": "class",
        "class_name": "InheritableThreadLocalSecurityContextHolderStrategy",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContextHolderStrategy"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "contextHolder",
                "field_type": "org.springframework.security.core.context.ThreadLocal",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "remove",
                        "target_params": [],
                        "usage": "contextHolder.remove()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy",
                        "target_name": "this",
                        "target_method_name": "getDeferredContext",
                        "target_params": [
                            ".get"
                        ],
                        "usage": "getDeferredContext().get()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDeferredContext",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "contextHolder.get()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [
                            "result"
                        ],
                        "usage": "contextHolder.set(result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "context",
                            "\"Only non-null SecurityContext instances are permitted\""
                        ],
                        "usage": "Assert.notNull(context,\"Only non-null SecurityContext instances are permitted\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [],
                        "usage": "contextHolder.set(()->context)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeferredContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deferredContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "deferredContext",
                            "\"Only non-null Supplier instances are permitted\""
                        ],
                        "usage": "Assert.notNull(deferredContext,\"Only non-null Supplier instances are permitted\")"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "deferredContext",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "deferredContext.get()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "result",
                            "\"A Supplier<SecurityContext> returned null and is not allowed"
                        ],
                        "usage": "Assert.notNull(result,\"A Supplier<SecurityContext> returned null and is not allowed.\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [
                            "notNullDeferredContext"
                        ],
                        "usage": "contextHolder.set(notNullDeferredContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy": {
        "type": "class",
        "class_name": "ListeningSecurityContextHolderStrategy",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContextHolderStrategy"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "listeners",
                "field_type": "java.util.Collection",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ListeningSecurityContextHolderStrategy",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "listeners",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "ListeningSecurityContextHolderStrategy",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "ListeningSecurityContextHolderStrategy",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    },
                    {
                        "param_name": "listeners",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot be null\""
                        ],
                        "usage": "Assert.notNull(listeners,\"securityContextChangedListeners cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(listeners,\"securityContextChangedListeners cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot contain null elements\""
                        ],
                        "usage": "Assert.noNullElements(listeners,\"securityContextChangedListeners cannot contain null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.listeners"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "ListeningSecurityContextHolderStrategy",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegate",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegate,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot be null\""
                        ],
                        "usage": "Assert.notNull(listeners,\"securityContextChangedListeners cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot be empty\""
                        ],
                        "usage": "Assert.notEmpty(listeners,\"securityContextChangedListeners cannot be empty\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "noNullElements",
                        "target_params": [
                            "listeners",
                            "\"securityContextChangedListeners cannot contain null elements\""
                        ],
                        "usage": "Assert.noNullElements(listeners,\"securityContextChangedListeners cannot contain null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.listeners"
                    },
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "listeners"
                        ],
                        "usage": "Arrays.asList(listeners)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "getDeferredContext",
                        "target_params": [],
                        "usage": "this.delegate.getDeferredContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "clearContext",
                        "target_params": [],
                        "usage": "this.delegate.clearContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.delegate.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDeferredContext",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "getDeferredContext",
                        "target_params": [],
                        "usage": "this.delegate.getDeferredContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setDeferredContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deferredContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "setDeferredContext",
                        "target_params": [
                            "newPublishOnceSupplier"
                        ],
                        "usage": "this.delegate.setDeferredContext(newPublishOnceSupplier(getDeferredContext(),deferredContext))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "delegate",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.delegate.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "publish",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.context.SecurityContextChangedEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.listeners"
                    },
                    {
                        "target_type": null,
                        "target_name": "listener",
                        "target_method_name": "securityContextChanged",
                        "target_params": [
                            "event"
                        ],
                        "usage": "listener.securityContextChanged(event)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.concurrent.atomic.AtomicBoolean",
            "java.util.function.Supplier",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.PublishOnceSupplier": {
        "type": "class",
        "class_name": "PublishOnceSupplier",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.Supplier"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "isPublished",
                "field_type": "org.springframework.security.core.context.AtomicBoolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "old",
                "field_type": "org.springframework.security.core.context.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "updated",
                "field_type": "org.springframework.security.core.context.Supplier",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "PublishOnceSupplier",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "old",
                        "param_type": "org.springframework.security.core.context.Supplier"
                    },
                    {
                        "param_name": "updated",
                        "param_type": "org.springframework.security.core.context.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.old"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((PublishOnceSupplier)old).updated"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.old"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.updated"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "get",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.Supplier",
                        "target_name": "updated",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.updated.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.updated"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.AtomicBoolean",
                        "target_name": "isPublished",
                        "target_method_name": "compareAndSet",
                        "target_params": [
                            "false",
                            "true"
                        ],
                        "usage": "this.isPublished.compareAndSet(false,true)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.isPublished"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.Supplier",
                        "target_name": "old",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.old.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.old"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.context.ObservationSecurityContextChangedListener": {
        "type": "class",
        "class_name": "ObservationSecurityContextChangedListener",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContextChangedListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "SECURITY_CONTEXT_CREATED",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SECURITY_CONTEXT_CHANGED",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SECURITY_CONTEXT_CLEARED",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "registry",
                "field_type": "io.micrometer.observation.ObservationRegistry",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ObservationSecurityContextChangedListener",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "registry",
                        "param_type": "io.micrometer.observation.ObservationRegistry"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "securityContextChanged",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.context.SecurityContextChangedEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "io.micrometer.observation.ObservationRegistry",
                        "target_name": "registry",
                        "target_method_name": "getCurrentObservation",
                        "target_params": [],
                        "usage": "this.registry.getCurrentObservation()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.registry"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextChangedEvent",
                        "target_name": "event",
                        "target_method_name": "isCleared",
                        "target_params": [],
                        "usage": "event.isCleared()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "event",
                        "target_params": [
                            "Observation"
                        ],
                        "usage": "observation.event(Observation.Event.of(SECURITY_CONTEXT_CLEARED))"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextChangedEvent",
                        "target_name": "event",
                        "target_method_name": "getOldContext",
                        "target_params": [],
                        "usage": "event.getOldContext()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextChangedEvent",
                        "target_name": "event",
                        "target_method_name": "getNewContext",
                        "target_params": [],
                        "usage": "event.getNewContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "event",
                        "target_params": [
                            "Observation"
                        ],
                        "usage": "observation.event(Observation.Event.of(SECURITY_CONTEXT_CREATED,\"%s [%s]\").format(SECURITY_CONTEXT_CREATED,newAuthentication.getClass().getSimpleName()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "newAuthentication.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "newAuthentication.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "event",
                        "target_params": [
                            "Observation"
                        ],
                        "usage": "observation.event(Observation.Event.of(SECURITY_CONTEXT_CLEARED,\"%s [%s]\").format(SECURITY_CONTEXT_CLEARED,oldAuthentication.getClass().getSimpleName()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "oldAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "oldAuthentication.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "oldAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "oldAuthentication.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "oldAuthentication",
                        "target_method_name": "equals",
                        "target_params": [
                            "newAuthentication"
                        ],
                        "usage": "oldAuthentication.equals(newAuthentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": "observation",
                        "target_method_name": "event",
                        "target_params": [
                            "Observation"
                        ],
                        "usage": "observation.event(Observation.Event.of(SECURITY_CONTEXT_CHANGED,\"%s [%s] -> [%s]\").format(SECURITY_CONTEXT_CHANGED,oldAuthentication.getClass().getSimpleName(),newAuthentication.getClass().getSimpleName()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "oldAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "oldAuthentication.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "oldAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "oldAuthentication.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "newAuthentication.getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthentication",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "newAuthentication.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContext",
                        "target_name": "context",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "context.getAuthentication()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.observation.Observation",
            "io.micrometer.observation.ObservationRegistry",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.core.context.ReactiveSecurityContextHolder": {
        "type": "class",
        "class_name": "ReactiveSecurityContextHolder",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "SECURITY_CONTEXT_KEY",
                "field_type": "java.lang.Class",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ReactiveSecurityContextHolder",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [
                            "Mono::just"
                        ],
                        "usage": "Mono.deferContextual(Mono::just).cast(Context.class).filter(ReactiveSecurityContextHolder::hasSecurityContext).flatMap(ReactiveSecurityContextHolder::getSecurityContext)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [
                            "Mono::just"
                        ],
                        "usage": "Mono.deferContextual(Mono::just).cast(Context.class).filter(ReactiveSecurityContextHolder::hasSecurityContext)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [
                            "Mono::just"
                        ],
                        "usage": "Mono.deferContextual(Mono::just).cast(Context.class)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "deferContextual",
                        "target_params": [
                            "Mono::just"
                        ],
                        "usage": "Mono.deferContextual(Mono::just)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hasSecurityContext",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "reactor.util.context.Context"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.util.context.Context",
                        "target_name": "context",
                        "target_method_name": "hasKey",
                        "target_params": [
                            "SECURITY_CONTEXT_KEY"
                        ],
                        "usage": "context.hasKey(SECURITY_CONTEXT_KEY)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSecurityContext",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "reactor.util.context.Context"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.util.context.Context",
                        "target_name": "context",
                        "target_method_name": "<Mono<SecurityContext>>get",
                        "target_params": [
                            "SECURITY_CONTEXT_KEY"
                        ],
                        "usage": "context.<Mono<SecurityContext>>get(SECURITY_CONTEXT_KEY)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "java.util.function.Function",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "delete",
                        "target_params": [
                            "SECURITY_CONTEXT_KEY"
                        ],
                        "usage": "context.delete(SECURITY_CONTEXT_KEY)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withSecurityContext",
                "return_type": "reactor.util.context.Context",
                "formal_params": [
                    {
                        "param_name": "securityContext",
                        "param_type": "reactor.core.publisher.Mono"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.util.context.Context",
                        "target_name": "Context",
                        "target_method_name": "of",
                        "target_params": [
                            "SECURITY_CONTEXT_KEY",
                            "securityContext"
                        ],
                        "usage": "Context.of(SECURITY_CONTEXT_KEY,securityContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withAuthentication",
                "return_type": "reactor.util.context.Context",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "newSecurityContextImpl"
                        ],
                        "usage": "Mono.just(newSecurityContextImpl(authentication))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Function",
            "reactor.core.publisher.Mono",
            "reactor.util.context.Context",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.core.context.ReactiveSecurityContextHolderThreadLocalAccessor": {
        "type": "class",
        "class_name": "ReactiveSecurityContextHolderThreadLocalAccessor",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "io.micrometer.context.ThreadLocalAccessor"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "threadLocal",
                "field_type": "org.springframework.security.core.context.ThreadLocal",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "key",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getValue",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "threadLocal",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "threadLocal.get()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setValue",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContext",
                        "param_type": "reactor.core.publisher.Mono"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContext",
                            "\"securityContext cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContext,\"securityContext cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "threadLocal",
                        "target_method_name": "set",
                        "target_params": [
                            "securityContext"
                        ],
                        "usage": "threadLocal.set(securityContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setValue",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "threadLocal",
                        "target_method_name": "remove",
                        "target_params": [],
                        "usage": "threadLocal.remove()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.context.ThreadLocalAccessor",
            "reactor.core.publisher.Mono",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.SecurityContext": {
        "type": "interface",
        "class_name": "SecurityContext",
        "class_type": "interface",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setAuthentication",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.core.context.SecurityContextChangedEvent": {
        "type": "class",
        "class_name": "SecurityContextChangedEvent",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "NO_CONTEXT",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "oldContext",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "newContext",
                "field_type": "java.util.function.Supplier",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityContextChangedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "oldContext",
                        "param_type": "java.util.function.Supplier"
                    },
                    {
                        "param_name": "newContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oldContext"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.newContext"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "SecurityContextChangedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "oldContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    },
                    {
                        "param_name": "newContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOldContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "oldContext",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.oldContext.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.oldContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getNewContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "newContext",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "this.newContext.get()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.newContext"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isCleared",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.newContext"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.context.ApplicationEvent"
        ]
    },
    "org.springframework.security.core.context.SecurityContextChangedListener": {
        "type": "interface",
        "class_name": "SecurityContextChangedListener",
        "class_type": "interface",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "securityContextChanged",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.context.SecurityContextChangedEvent"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.context.SecurityContextHolder": {
        "type": "class",
        "class_name": "SecurityContextHolder",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "MODE_THREADLOCAL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "MODE_INHERITABLETHREADLOCAL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "MODE_GLOBAL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "MODE_PRE_INITIALIZED",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "SYSTEM_PROPERTY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "strategyName",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "strategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "initializeCount",
                "field_type": "int",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "initialize",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "initializeStrategy",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.MODE_PRE_INITIALIZED",
                        "target_name": "MODE_PRE_INITIALIZED",
                        "target_method_name": "equals",
                        "target_params": [
                            "strategyName"
                        ],
                        "usage": "MODE_PRE_INITIALIZED.equals(strategyName)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "strategy!=null",
                            "\"When using \"+MODE_PRE_INITIALIZED+\"",
                            " setContextHolderStrategy must be called with the fully constructed strategy\""
                        ],
                        "usage": "Assert.state(strategy!=null,\"When using \"+MODE_PRE_INITIALIZED+\", setContextHolderStrategy must be called with the fully constructed strategy\")"
                    },
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "hasText",
                        "target_params": [
                            "strategyName"
                        ],
                        "usage": "StringUtils.hasText(strategyName)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "strategyName",
                        "target_method_name": "equals",
                        "target_params": [
                            "MODE_THREADLOCAL"
                        ],
                        "usage": "strategyName.equals(MODE_THREADLOCAL)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "strategyName",
                        "target_method_name": "equals",
                        "target_params": [
                            "MODE_INHERITABLETHREADLOCAL"
                        ],
                        "usage": "strategyName.equals(MODE_INHERITABLETHREADLOCAL)"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "strategyName",
                        "target_method_name": "equals",
                        "target_params": [
                            "MODE_GLOBAL"
                        ],
                        "usage": "strategyName.equals(MODE_GLOBAL)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "Class",
                        "target_method_name": "forName",
                        "target_params": [
                            "strategyName"
                        ],
                        "usage": "Class.forName(strategyName)"
                    },
                    {
                        "target_type": null,
                        "target_name": "clazz",
                        "target_method_name": "getConstructor",
                        "target_params": [],
                        "usage": "clazz.getConstructor()"
                    },
                    {
                        "target_type": null,
                        "target_name": "customStrategy",
                        "target_method_name": "newInstance",
                        "target_params": [],
                        "usage": "customStrategy.newInstance()"
                    },
                    {
                        "target_type": "org.springframework.util.ReflectionUtils",
                        "target_name": "ReflectionUtils",
                        "target_method_name": "handleReflectionException",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "ReflectionUtils.handleReflectionException(ex)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "clearContext",
                        "target_params": [],
                        "usage": "strategy.clearContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "strategy.getContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDeferredContext",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "getDeferredContext",
                        "target_params": [],
                        "usage": "strategy.getDeferredContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getInitializeCount",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "strategy.setContext(context)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeferredContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deferredContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "setDeferredContext",
                        "target_params": [
                            "deferredContext"
                        ],
                        "usage": "strategy.setDeferredContext(deferredContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setStrategyName",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "strategyName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "strategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "strategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(strategy,\"securityContextHolderStrategy cannot be null\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getContextHolderStrategy",
                "return_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "strategy.createEmptyContext()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "strategy.getClass().getSimpleName()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "strategy",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "strategy.getClass()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "System.getProperty(SYSTEM_PROPERTY)"
        ],
        "imports": [
            "java.lang.reflect.Constructor",
            "java.util.function.Supplier",
            "org.springframework.util.Assert",
            "org.springframework.util.ReflectionUtils",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.core.context.SecurityContextHolderStrategy": {
        "type": "interface",
        "class_name": "SecurityContextHolderStrategy",
        "class_type": "interface",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getDeferredContext",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setDeferredContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deferredContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "deferredContext",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "deferredContext.get()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier"
        ]
    },
    "org.springframework.security.core.context.SecurityContextHolderThreadLocalAccessor": {
        "type": "class",
        "class_name": "SecurityContextHolderThreadLocalAccessor",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "io.micrometer.context.ThreadLocalAccessor"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "key",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getValue",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "SecurityContextHolder.getContext()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "SecurityContextHolder.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": "securityContext",
                        "target_method_name": "equals",
                        "target_params": [
                            "emptyContext"
                        ],
                        "usage": "securityContext.equals(emptyContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setValue",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContext",
                            "\"securityContext cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContext,\"securityContext cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "setContext",
                        "target_params": [
                            "securityContext"
                        ],
                        "usage": "SecurityContextHolder.setContext(securityContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setValue",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolder",
                        "target_name": "SecurityContextHolder",
                        "target_method_name": "clearContext",
                        "target_params": [],
                        "usage": "SecurityContextHolder.clearContext()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "io.micrometer.context.ThreadLocalAccessor",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.SecurityContextImpl": {
        "type": "class",
        "class_name": "SecurityContextImpl",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContext"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authentication",
                "field_type": "org.springframework.security.core.Authentication",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityContextImpl",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "SecurityContextImpl",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "other",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "other.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "other",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "other.getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextImpl",
                        "target_name": "this",
                        "target_method_name": "getAuthentication",
                        "target_params": [
                            ".equals"
                        ],
                        "usage": "this.getAuthentication().equals(other.getAuthentication())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.getAuthentication()"
                    },
                    {
                        "target_type": null,
                        "target_name": "other",
                        "target_method_name": "getAuthentication",
                        "target_params": [],
                        "usage": "other.getAuthentication()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.ObjectUtils",
                        "target_name": "ObjectUtils",
                        "target_method_name": "nullSafeHashCode",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "ObjectUtils.nullSafeHashCode(this.authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthentication",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getSimpleName()).append(\" [\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getSimpleName())"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextImpl",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getSimpleName"
                        ],
                        "usage": "getClass().getSimpleName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Null authentication\""
                        ],
                        "usage": "sb.append(\"Null authentication\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authentication=\""
                        ],
                        "usage": "sb.append(\"Authentication=\").append(this.authentication)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Authentication=\""
                        ],
                        "usage": "sb.append(\"Authentication=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authentication"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"]\""
                        ],
                        "usage": "sb.append(\"]\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.ObjectUtils"
        ]
    },
    "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy": {
        "type": "class",
        "class_name": "ThreadLocalSecurityContextHolderStrategy",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [
            "org.springframework.security.core.context.SecurityContextHolderStrategy"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "contextHolder",
                "field_type": "org.springframework.security.core.context.ThreadLocal",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "clearContext",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "remove",
                        "target_params": [],
                        "usage": "contextHolder.remove()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
                        "target_name": "this",
                        "target_method_name": "getDeferredContext",
                        "target_params": [
                            ".get"
                        ],
                        "usage": "getDeferredContext().get()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDeferredContext",
                "return_type": "java.util.function.Supplier",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "contextHolder.get()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [
                            "result"
                        ],
                        "usage": "contextHolder.set(result)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "context",
                            "\"Only non-null SecurityContext instances are permitted\""
                        ],
                        "usage": "Assert.notNull(context,\"Only non-null SecurityContext instances are permitted\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [],
                        "usage": "contextHolder.set(()->context)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeferredContext",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deferredContext",
                        "param_type": "java.util.function.Supplier"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "deferredContext",
                            "\"Only non-null Supplier instances are permitted\""
                        ],
                        "usage": "Assert.notNull(deferredContext,\"Only non-null Supplier instances are permitted\")"
                    },
                    {
                        "target_type": "java.util.function.Supplier",
                        "target_name": "deferredContext",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "deferredContext.get()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "result",
                            "\"A Supplier<SecurityContext> returned null and is not allowed"
                        ],
                        "usage": "Assert.notNull(result,\"A Supplier<SecurityContext> returned null and is not allowed.\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.ThreadLocal",
                        "target_name": "contextHolder",
                        "target_method_name": "set",
                        "target_params": [
                            "notNullDeferredContext"
                        ],
                        "usage": "contextHolder.set(notNullDeferredContext)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createEmptyContext",
                "return_type": "org.springframework.security.core.context.SecurityContext",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.function.Supplier",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.context.TransientSecurityContext": {
        "type": "class",
        "class_name": "TransientSecurityContext",
        "class_type": "class",
        "package": "org.springframework.security.core.context",
        "implementz": [],
        "extendz": "org.springframework.security.core.context.SecurityContextImpl",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "TransientSecurityContext",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "TransientSecurityContext",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.Authentication"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.Transient"
        ]
    },
    "org.springframework.security.core.parameters.AnnotationParameterNameDiscoverer": {
        "type": "class",
        "class_name": "AnnotationParameterNameDiscoverer",
        "class_type": "class",
        "package": "org.springframework.security.core.parameters",
        "implementz": [
            "org.springframework.core.ParameterNameDiscoverer"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "CONSTRUCTOR_METHODPARAM_FACTORY",
                "field_type": "org.springframework.security.core.parameters.ParameterNameFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "METHOD_METHODPARAM_FACTORY",
                "field_type": "org.springframework.security.core.parameters.ParameterNameFactory",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "annotationClassesToUse",
                "field_type": "java.util.Set",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AnnotationParameterNameDiscoverer",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "annotationClassToUse"
                        ],
                        "usage": "Arrays.asList(annotationClassToUse)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "AnnotationParameterNameDiscoverer",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "annotationClassesToUse",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "annotationClassesToUse",
                            "\"annotationClassesToUse cannot be null or empty\""
                        ],
                        "usage": "Assert.notEmpty(annotationClassesToUse,\"annotationClassesToUse cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationClassesToUse"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getParameterNames",
                "return_type": "org.springframework.security.core.parameters.String[]",
                "formal_params": [
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.core.BridgeMethodResolver",
                        "target_name": "BridgeMethodResolver",
                        "target_method_name": "findBridgedMethod",
                        "target_params": [
                            "method"
                        ],
                        "usage": "BridgeMethodResolver.findBridgedMethod(method)"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getDeclaringClass",
                        "target_params": [],
                        "usage": "method.getDeclaringClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "declaringClass",
                        "target_method_name": "getInterfaces",
                        "target_params": [],
                        "usage": "declaringClass.getInterfaces()"
                    },
                    {
                        "target_type": "org.springframework.util.ReflectionUtils",
                        "target_name": "ReflectionUtils",
                        "target_method_name": "findMethod",
                        "target_params": [
                            "intrfc",
                            "method"
                        ],
                        "usage": "ReflectionUtils.findMethod(intrfc,method.getName(),method.getParameterTypes())"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": "java.lang.reflect.Method",
                        "target_name": "method",
                        "target_method_name": "getParameterTypes",
                        "target_params": [],
                        "usage": "method.getParameterTypes()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getParameterNames",
                "return_type": "org.springframework.security.core.parameters.String[]",
                "formal_params": [
                    {
                        "param_name": "constructor",
                        "param_type": "java.lang.reflect.Constructor"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "lookupParameterNames",
                "return_type": "org.springframework.security.core.parameters.String[]",
                "formal_params": [
                    {
                        "param_name": "parameterNameFactory",
                        "param_type": "org.springframework.security.core.parameters.ParameterNameFactory"
                    },
                    {
                        "param_name": "t",
                        "param_type": "org.springframework.security.core.parameters.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.parameters.ParameterNameFactory",
                        "target_name": "parameterNameFactory",
                        "target_method_name": "findParameterAnnotations",
                        "target_params": [
                            "t"
                        ],
                        "usage": "parameterNameFactory.findParameterAnnotations(t)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "parameterAnnotations.length"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findParameterName",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "parameterAnnotations",
                        "param_type": "org.springframework.security.core.parameters.Annotation[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Set",
                        "target_name": "annotationClassesToUse",
                        "target_method_name": "contains",
                        "target_params": [
                            "paramAnnotation"
                        ],
                        "usage": "this.annotationClassesToUse.contains(paramAnnotation.annotationType().getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.annotationClassesToUse"
                    },
                    {
                        "target_type": null,
                        "target_name": "paramAnnotation",
                        "target_method_name": "annotationType",
                        "target_params": [],
                        "usage": "paramAnnotation.annotationType().getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "paramAnnotation",
                        "target_method_name": "annotationType",
                        "target_params": [],
                        "usage": "paramAnnotation.annotationType()"
                    },
                    {
                        "target_type": "org.springframework.core.annotation.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "getValue",
                        "target_params": [
                            "paramAnnotation",
                            "\"value\""
                        ],
                        "usage": "AnnotationUtils.getValue(paramAnnotation,\"value\")"
                    }
                ]
            }
        ],
        "methodCalls": [
            "constructor.getParameterAnnotations()"
        ],
        "imports": [
            "java.lang.annotation.Annotation",
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Constructor",
            "java.lang.reflect.Method",
            "java.util.Arrays",
            "java.util.HashSet",
            "java.util.Set",
            "org.springframework.core.BridgeMethodResolver",
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.core.PrioritizedParameterNameDiscoverer",
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.security.access.method.P",
            "org.springframework.util.Assert",
            "org.springframework.util.ReflectionUtils"
        ]
    },
    "org.springframework.security.core.parameters.ParameterNameFactory": {
        "type": "interface",
        "class_name": "ParameterNameFactory",
        "class_type": "interface",
        "package": "org.springframework.security.core.parameters",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "findParameterAnnotations",
                "return_type": "org.springframework.security.core.parameters.Annotation[][]",
                "formal_params": [
                    {
                        "param_name": "t",
                        "param_type": "org.springframework.security.core.parameters.T"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer": {
        "type": "class",
        "class_name": "DefaultSecurityParameterNameDiscoverer",
        "class_type": "class",
        "package": "org.springframework.security.core.parameters",
        "implementz": [],
        "extendz": "org.springframework.core.PrioritizedParameterNameDiscoverer",
        "fields": [
            {
                "type": "field",
                "field_name": "DATA_PARAM_CLASSNAME",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DATA_PARAM_PRESENT",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultSecurityParameterNameDiscoverer",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DefaultSecurityParameterNameDiscoverer",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "parameterNameDiscovers",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "parameterNameDiscovers",
                            "\"parameterNameDiscovers cannot be null\""
                        ],
                        "usage": "Assert.notNull(parameterNameDiscovers,\"parameterNameDiscovers cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationClassesToUse",
                        "target_method_name": "add",
                        "target_params": [
                            "\"org"
                        ],
                        "usage": "annotationClassesToUse.add(\"org.springframework.security.access.method.P\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationClassesToUse",
                        "target_method_name": "add",
                        "target_params": [],
                        "usage": "annotationClassesToUse.add(P.class.getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": "annotationClassesToUse",
                        "target_method_name": "add",
                        "target_params": [
                            "DATA_PARAM_CLASSNAME"
                        ],
                        "usage": "annotationClassesToUse.add(DATA_PARAM_CLASSNAME)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "ClassUtils.isPresent(DATA_PARAM_CLASSNAME,DefaultSecurityParameterNameDiscoverer.class.getClassLoader())",
            "DefaultSecurityParameterNameDiscoverer.class.getClassLoader()"
        ],
        "imports": [
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.core.DefaultParameterNameDiscoverer",
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.core.PrioritizedParameterNameDiscoverer",
            "org.springframework.util.Assert",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.core.session.AbstractSessionEvent": {
        "type": "class",
        "class_name": "AbstractSessionEvent",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": "org.springframework.context.ApplicationEvent",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AbstractSessionEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.context.ApplicationEvent"
        ]
    },
    "org.springframework.security.core.session.InMemoryReactiveSessionRegistry": {
        "type": "class",
        "class_name": "InMemoryReactiveSessionRegistry",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [
            "org.springframework.security.core.session.ReactiveSessionRegistry"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "sessionIdsByPrincipal",
                "field_type": "java.util.concurrent.ConcurrentMap",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "sessionById",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InMemoryReactiveSessionRegistry",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "InMemoryReactiveSessionRegistry",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "sessionIdsByPrincipal",
                        "param_type": "java.util.concurrent.ConcurrentMap"
                    },
                    {
                        "param_name": "sessionById",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllSessions",
                "return_type": "reactor.core.publisher.Flux",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "fromIterable",
                        "target_params": [
                            "sessionIdsByPrincipal"
                        ],
                        "usage": "Flux.fromIterable(this.sessionIdsByPrincipal.getOrDefault(principal,Collections.emptySet())).map(this.sessionById::get)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Flux",
                        "target_name": "Flux",
                        "target_method_name": "fromIterable",
                        "target_params": [
                            "sessionIdsByPrincipal"
                        ],
                        "usage": "Flux.fromIterable(this.sessionIdsByPrincipal.getOrDefault(principal,Collections.emptySet()))"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "sessionIdsByPrincipal",
                        "target_method_name": "getOrDefault",
                        "target_params": [
                            "principal",
                            "Collections"
                        ],
                        "usage": "this.sessionIdsByPrincipal.getOrDefault(principal,Collections.emptySet())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptySet",
                        "target_params": [],
                        "usage": "Collections.emptySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "saveSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "information",
                        "param_type": "org.springframework.security.core.session.ReactiveSessionInformation"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionById",
                        "target_method_name": "put",
                        "target_params": [
                            "information"
                        ],
                        "usage": "this.sessionById.put(information.getSessionId(),information)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    },
                    {
                        "target_type": "org.springframework.security.core.session.ReactiveSessionInformation",
                        "target_name": "information",
                        "target_method_name": "getSessionId",
                        "target_params": [],
                        "usage": "information.getSessionId()"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "sessionIdsByPrincipal",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "information"
                        ],
                        "usage": "this.sessionIdsByPrincipal.computeIfAbsent(information.getPrincipal(),(key)->newCopyOnWriteArraySet<>()).add(information.getSessionId())"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "sessionIdsByPrincipal",
                        "target_method_name": "computeIfAbsent",
                        "target_params": [
                            "information"
                        ],
                        "usage": "this.sessionIdsByPrincipal.computeIfAbsent(information.getPrincipal(),(key)->newCopyOnWriteArraySet<>())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": "org.springframework.security.core.session.ReactiveSessionInformation",
                        "target_name": "information",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "information.getPrincipal()"
                    },
                    {
                        "target_type": "org.springframework.security.core.session.ReactiveSessionInformation",
                        "target_name": "information",
                        "target_method_name": "getSessionId",
                        "target_params": [],
                        "usage": "information.getSessionId()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "justOrEmpty",
                        "target_params": [
                            "sessionById"
                        ],
                        "usage": "Mono.justOrEmpty(this.sessionById.get(sessionId))"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionById",
                        "target_method_name": "get",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "this.sessionById.get(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.session.InMemoryReactiveSessionRegistry",
                        "target_name": "this",
                        "target_method_name": "getSessionInformation",
                        "target_params": [
                            "sessionId.doOnNext"
                        ],
                        "usage": "getSessionInformation(sessionId).doOnNext((sessionInformation)->{this.sessionById.remove(sessionId);Set<String>sessionsUsedByPrincipal=this.sessionIdsByPrincipal.get(sessionInformation.getPrincipal());if(sessionsUsedByPrincipal!=null){sessionsUsedByPrincipal.remove(sessionId);if(sessionsUsedByPrincipal.isEmpty()){this.sessionIdsByPrincipal.remove(sessionInformation.getPrincipal());}}})"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionById",
                        "target_method_name": "remove",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "this.sessionById.remove(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "sessionIdsByPrincipal",
                        "target_method_name": "get",
                        "target_params": [
                            "sessionInformation"
                        ],
                        "usage": "this.sessionIdsByPrincipal.get(sessionInformation.getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionInformation",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "sessionInformation.getPrincipal()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "remove",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "sessionsUsedByPrincipal.remove(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "sessionsUsedByPrincipal.isEmpty()"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "sessionIdsByPrincipal",
                        "target_method_name": "remove",
                        "target_params": [
                            "sessionInformation"
                        ],
                        "usage": "this.sessionIdsByPrincipal.remove(sessionInformation.getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIdsByPrincipal"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionInformation",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "sessionInformation.getPrincipal()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "updateLastAccessTime",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionById",
                        "target_method_name": "get",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "this.sessionById.get(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionById"
                    },
                    {
                        "target_type": null,
                        "target_name": "session",
                        "target_method_name": "refreshLastRequest",
                        "target_params": [],
                        "usage": "session.refreshLastRequest().thenReturn(session)"
                    },
                    {
                        "target_type": null,
                        "target_name": "session",
                        "target_method_name": "refreshLastRequest",
                        "target_params": [],
                        "usage": "session.refreshLastRequest()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collections",
            "java.util.Map",
            "java.util.Set",
            "java.util.concurrent.ConcurrentHashMap",
            "java.util.concurrent.ConcurrentMap",
            "java.util.concurrent.CopyOnWriteArraySet",
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.core.session.ReactiveSessionInformation": {
        "type": "class",
        "class_name": "ReactiveSessionInformation",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [
            "java.io.Serializable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "lastAccessTime",
                "field_type": "java.time.Instant",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "sessionId",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expired",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "ReactiveSessionInformation",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "lastAccessTime",
                        "param_type": "java.time.Instant"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "principal",
                            "\"principal cannot be null\""
                        ],
                        "usage": "Assert.notNull(principal,\"principal cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"sessionId cannot be null\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"sessionId cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "lastAccessTime",
                            "\"lastAccessTime cannot be null\""
                        ],
                        "usage": "Assert.notNull(lastAccessTime,\"lastAccessTime cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionId"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastAccessTime"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withSessionId",
                "return_type": "org.springframework.security.core.session.ReactiveSessionInformation",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastAccessTime"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "invalidate",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "fromRunnable",
                        "target_params": [],
                        "usage": "Mono.fromRunnable(()->this.expired=true)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "refreshLastRequest",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastAccessTime"
                    },
                    {
                        "target_type": "java.time.Instant",
                        "target_name": "Instant",
                        "target_method_name": "now",
                        "target_params": [],
                        "usage": "Instant.now()"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLastAccessTime",
                "return_type": "java.time.Instant",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastAccessTime"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSessionId",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionId"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setLastAccessTime",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "lastAccessTime",
                        "param_type": "java.time.Instant"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastAccessTime"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.io.Serial",
            "java.io.Serializable",
            "java.time.Instant",
            "reactor.core.publisher.Mono",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.session.ReactiveSessionRegistry": {
        "type": "interface",
        "class_name": "ReactiveSessionRegistry",
        "class_type": "interface",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAllSessions",
                "return_type": "reactor.core.publisher.Flux",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "saveSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "information",
                        "param_type": "org.springframework.security.core.session.ReactiveSessionInformation"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeSessionInformation",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "updateLastAccessTime",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Flux",
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.core.session.SessionCreationEvent": {
        "type": "class",
        "class_name": "SessionCreationEvent",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": "org.springframework.security.core.session.AbstractSessionEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SessionCreationEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.session.SessionDestroyedEvent": {
        "type": "class",
        "class_name": "SessionDestroyedEvent",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": "org.springframework.security.core.session.AbstractSessionEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SessionDestroyedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getSecurityContexts",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getId",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List",
            "org.springframework.security.core.context.SecurityContext"
        ]
    },
    "org.springframework.security.core.session.SessionIdChangedEvent": {
        "type": "class",
        "class_name": "SessionIdChangedEvent",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": "org.springframework.security.core.session.AbstractSessionEvent",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SessionIdChangedEvent",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getOldSessionId",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getNewSessionId",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.session.SessionInformation": {
        "type": "class",
        "class_name": "SessionInformation",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [
            "java.io.Serializable"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "lastRequest",
                "field_type": "java.util.Date",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principal",
                "field_type": "java.lang.Object",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "sessionId",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "expired",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SessionInformation",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "lastRequest",
                        "param_type": "java.util.Date"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "principal",
                            "\"Principal required\""
                        ],
                        "usage": "Assert.notNull(principal,\"Principal required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"SessionId required\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"SessionId required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "lastRequest",
                            "\"LastRequest required\""
                        ],
                        "usage": "Assert.notNull(lastRequest,\"LastRequest required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionId"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastRequest"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "expireNow",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getLastRequest",
                "return_type": "java.util.Date",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastRequest"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principal"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSessionId",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionId"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.expired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "refreshLastRequest",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.lastRequest"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.io.Serializable",
            "java.util.Date",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.session.SessionRegistry": {
        "type": "interface",
        "class_name": "SessionRegistry",
        "class_type": "interface",
        "package": "org.springframework.security.core.session",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAllPrincipals",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getAllSessions",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "includeExpiredSessions",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getSessionInformation",
                "return_type": "org.springframework.security.core.session.SessionInformation",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "refreshLastRequest",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "registerNewSession",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeSessionInformation",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List"
        ]
    },
    "org.springframework.security.core.session.SessionRegistryImpl": {
        "type": "class",
        "class_name": "SessionRegistryImpl",
        "class_type": "class",
        "package": "org.springframework.security.core.session",
        "implementz": [
            "org.springframework.security.core.session.SessionRegistry,ApplicationListener"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "principals",
                "field_type": "java.util.concurrent.ConcurrentMap",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "sessionIds",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SessionRegistryImpl",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "SessionRegistryImpl",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "principals",
                        "param_type": "java.util.concurrent.ConcurrentMap"
                    },
                    {
                        "param_name": "sessionIds",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllPrincipals",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "principals",
                        "target_method_name": "keySet",
                        "target_params": [],
                        "usage": "this.principals.keySet()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAllSessions",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "includeExpiredSessions",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "principals",
                        "target_method_name": "get",
                        "target_params": [
                            "principal"
                        ],
                        "usage": "this.principals.get(principal)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "sessionsUsedByPrincipal.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionInformation",
                        "target_method_name": "isExpired",
                        "target_params": [],
                        "usage": "sessionInformation.isExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "list",
                        "target_method_name": "add",
                        "target_params": [
                            "sessionInformation"
                        ],
                        "usage": "list.add(sessionInformation)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getSessionInformation",
                "return_type": "org.springframework.security.core.session.SessionInformation",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"SessionId required as per interface contract\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"SessionId required as per interface contract\")"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "get",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "this.sessionIds.get(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "onApplicationEvent",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "event",
                        "param_type": "org.springframework.security.core.session.AbstractSessionEvent"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sessionDestroyedEvent",
                        "target_method_name": "getId",
                        "target_params": [],
                        "usage": "sessionDestroyedEvent.getId()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionIdChangedEvent",
                        "target_method_name": "getOldSessionId",
                        "target_params": [],
                        "usage": "sessionIdChangedEvent.getOldSessionId()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "oldSessionId"
                        ],
                        "usage": "this.sessionIds.containsKey(oldSessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "get",
                        "target_params": [
                            "oldSessionId"
                        ],
                        "usage": "this.sessionIds.get(oldSessionId).getPrincipal()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "get",
                        "target_params": [
                            "oldSessionId"
                        ],
                        "usage": "this.sessionIds.get(oldSessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionIdChangedEvent",
                        "target_method_name": "getNewSessionId",
                        "target_params": [],
                        "usage": "sessionIdChangedEvent.getNewSessionId()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "refreshLastRequest",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"SessionId required as per interface contract\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"SessionId required as per interface contract\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "info",
                        "target_method_name": "refreshLastRequest",
                        "target_params": [],
                        "usage": "info.refreshLastRequest()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "registerNewSession",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"SessionId required as per interface contract\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"SessionId required as per interface contract\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "principal",
                            "\"Principal required as per interface contract\""
                        ],
                        "usage": "Assert.notNull(principal,\"Principal required as per interface contract\")"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isDebugEnabled",
                        "target_params": [],
                        "usage": "this.logger.isDebugEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Registering session %s, for principal %s\",sessionId,principal))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Registering session %s",
                            " for principal %s\"",
                            "sessionId",
                            "principal"
                        ],
                        "usage": "LogMessage.format(\"Registering session %s, for principal %s\",sessionId,principal)"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "put",
                        "target_params": [
                            "sessionId",
                            "newSessionInformation"
                        ],
                        "usage": "this.sessionIds.put(sessionId,newSessionInformation(principal,sessionId,newDate()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "principals",
                        "target_method_name": "compute",
                        "target_params": [
                            "principal",
                            ""
                        ],
                        "usage": "this.principals.compute(principal,(key,sessionsUsedByPrincipal)->{if(sessionsUsedByPrincipal==null){sessionsUsedByPrincipal=newCopyOnWriteArraySet<>();}sessionsUsedByPrincipal.add(sessionId);this.logger.trace(LogMessage.format(\"Sessions used by '%s' : %s\",principal,sessionsUsedByPrincipal));returnsessionsUsedByPrincipal;})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "add",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "sessionsUsedByPrincipal.add(sessionId)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Sessions used by '%s' : %s\",principal,sessionsUsedByPrincipal))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Sessions used by '%s' : %s\"",
                            "principal",
                            "sessionsUsedByPrincipal"
                        ],
                        "usage": "LogMessage.format(\"Sessions used by '%s' : %s\",principal,sessionsUsedByPrincipal)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeSessionInformation",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "sessionId",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "sessionId",
                            "\"SessionId required as per interface contract\""
                        ],
                        "usage": "Assert.hasText(sessionId,\"SessionId required as per interface contract\")"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "isTraceEnabled",
                        "target_params": [],
                        "usage": "this.logger.isTraceEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Removing session \"+sessionId+\" from set of registered sessions\""
                        ],
                        "usage": "this.logger.debug(\"Removing session \"+sessionId+\" from set of registered sessions\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "sessionIds",
                        "target_method_name": "remove",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "this.sessionIds.remove(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.sessionIds"
                    },
                    {
                        "target_type": "java.util.concurrent.ConcurrentMap",
                        "target_name": "principals",
                        "target_method_name": "computeIfPresent",
                        "target_params": [
                            "info"
                        ],
                        "usage": "this.principals.computeIfPresent(info.getPrincipal(),(key,sessionsUsedByPrincipal)->{this.logger.debug(LogMessage.format(\"Removing session %s from principal's set of registered sessions\",sessionId));sessionsUsedByPrincipal.remove(sessionId);if(sessionsUsedByPrincipal.isEmpty()){this.logger.debug(LogMessage.format(\"Removing principal %s from registry\",info.getPrincipal()));sessionsUsedByPrincipal=null;}this.logger.trace(LogMessage.format(\"Sessions used by '%s' : %s\",info.getPrincipal(),sessionsUsedByPrincipal));returnsessionsUsedByPrincipal;})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.principals"
                    },
                    {
                        "target_type": null,
                        "target_name": "info",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "info.getPrincipal()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Removing session %s from principal's set of registered sessions\",sessionId))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Removing session %s from principal's set of registered sessions\"",
                            "sessionId"
                        ],
                        "usage": "LogMessage.format(\"Removing session %s from principal's set of registered sessions\",sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "remove",
                        "target_params": [
                            "sessionId"
                        ],
                        "usage": "sessionsUsedByPrincipal.remove(sessionId)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sessionsUsedByPrincipal",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "sessionsUsedByPrincipal.isEmpty()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Removing principal %s from registry\",info.getPrincipal()))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Removing principal %s from registry\"",
                            "info"
                        ],
                        "usage": "LogMessage.format(\"Removing principal %s from registry\",info.getPrincipal())"
                    },
                    {
                        "target_type": null,
                        "target_name": "info",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "info.getPrincipal()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "trace",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.trace(LogMessage.format(\"Sessions used by '%s' : %s\",info.getPrincipal(),sessionsUsedByPrincipal))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Sessions used by '%s' : %s\"",
                            "info"
                        ],
                        "usage": "LogMessage.format(\"Sessions used by '%s' : %s\",info.getPrincipal(),sessionsUsedByPrincipal)"
                    },
                    {
                        "target_type": null,
                        "target_name": "info",
                        "target_method_name": "getPrincipal",
                        "target_params": [],
                        "usage": "info.getPrincipal()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(SessionRegistryImpl.class)"
        ],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collections",
            "java.util.Date",
            "java.util.List",
            "java.util.Map",
            "java.util.Set",
            "java.util.concurrent.ConcurrentHashMap",
            "java.util.concurrent.ConcurrentMap",
            "java.util.concurrent.CopyOnWriteArraySet",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.ApplicationListener",
            "org.springframework.core.log.LogMessage",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.token.DefaultToken": {
        "type": "class",
        "class_name": "DefaultToken",
        "class_type": "class",
        "package": "org.springframework.security.core.token",
        "implementz": [
            "org.springframework.security.core.token.Token"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "key",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "keyCreationTime",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "extendedInformation",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DefaultToken",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "keyCreationTime",
                        "param_type": "long"
                    },
                    {
                        "param_name": "extendedInformation",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "key",
                            "\"Key required\""
                        ],
                        "usage": "Assert.hasText(key,\"Key required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "extendedInformation",
                            "\"Extended information cannot be null\""
                        ],
                        "usage": "Assert.notNull(extendedInformation,\"Extended information cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyCreationTime"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.extendedInformation"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKeyCreationTime",
                "return_type": "long",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyCreationTime"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getExtendedInformation",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.extendedInformation"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "equals",
                        "target_params": [
                            "rhs"
                        ],
                        "usage": "this.key.equals(rhs.key)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "rhs.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyCreationTime"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "rhs.keyCreationTime"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "extendedInformation",
                        "target_method_name": "equals",
                        "target_params": [
                            "rhs"
                        ],
                        "usage": "this.extendedInformation.equals(rhs.extendedInformation)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.extendedInformation"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "rhs.extendedInformation"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "key",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.key.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "keyCreationTime"
                        ],
                        "usage": "Long.valueOf(this.keyCreationTime).hashCode()"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "keyCreationTime"
                        ],
                        "usage": "Long.valueOf(this.keyCreationTime)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyCreationTime"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "extendedInformation",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.extendedInformation.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.extendedInformation"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.key"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.keyCreationTime"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.extendedInformation"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Date",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.token.KeyBasedPersistenceTokenService": {
        "type": "class",
        "class_name": "KeyBasedPersistenceTokenService",
        "class_type": "class",
        "package": "org.springframework.security.core.token",
        "implementz": [
            "org.springframework.security.core.token.TokenService,InitializingBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "pseudoRandomNumberBytes",
                "field_type": "int",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "serverSecret",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "serverInteger",
                "field_type": "java.lang.Integer",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "secureRandom",
                "field_type": "java.security.SecureRandom",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "allocateToken",
                "return_type": "org.springframework.security.core.token.Token",
                "formal_params": [
                    {
                        "param_name": "extendedInformation",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "extendedInformation",
                            "\"Must provided non-null extendedInformation"
                        ],
                        "usage": "Assert.notNull(extendedInformation,\"Must provided non-null extendedInformation (but it can be empty)\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.token.System",
                        "target_name": "System",
                        "target_method_name": "currentTimeMillis",
                        "target_params": [],
                        "usage": "System.currentTimeMillis()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "computeKey",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "serverSecret",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "content",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.token.Sha512DigestUtils",
                        "target_name": "Sha512DigestUtils",
                        "target_method_name": "shaHex",
                        "target_params": [
                            "content+\":\"+serverSecret"
                        ],
                        "usage": "Sha512DigestUtils.shaHex(content+\":\"+serverSecret)"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.codec.Utf8",
                        "target_name": "Utf8",
                        "target_method_name": "decode",
                        "target_params": [
                            "Base64"
                        ],
                        "usage": "Utf8.decode(Base64.getEncoder().encode(Utf8.encode(keyPayload)))"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getEncoder",
                        "target_params": [],
                        "usage": "Base64.getEncoder().encode(Utf8.encode(keyPayload))"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getEncoder",
                        "target_params": [],
                        "usage": "Base64.getEncoder()"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.codec.Utf8",
                        "target_name": "Utf8",
                        "target_method_name": "encode",
                        "target_params": [
                            "keyPayload"
                        ],
                        "usage": "Utf8.encode(keyPayload)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "verifyToken",
                "return_type": "org.springframework.security.core.token.Token",
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "\"\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "key"
                        ],
                        "usage": "\"\".equals(key)"
                    },
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "delimitedListToStringArray",
                        "target_params": [
                            "Utf8"
                        ],
                        "usage": "StringUtils.delimitedListToStringArray(Utf8.decode(Base64.getDecoder().decode(Utf8.encode(key))),\":\")"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.codec.Utf8",
                        "target_name": "Utf8",
                        "target_method_name": "decode",
                        "target_params": [
                            "Base64"
                        ],
                        "usage": "Utf8.decode(Base64.getDecoder().decode(Utf8.encode(key)))"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder().decode(Utf8.encode(key))"
                    },
                    {
                        "target_type": "java.util.Base64",
                        "target_name": "Base64",
                        "target_method_name": "getDecoder",
                        "target_params": [],
                        "usage": "Base64.getDecoder()"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.codec.Utf8",
                        "target_name": "Utf8",
                        "target_method_name": "encode",
                        "target_params": [
                            "key"
                        ],
                        "usage": "Utf8.encode(key)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "tokens"
                        ],
                        "usage": "Assert.isTrue(tokens.length>=4,()->\"Expected 4 or more tokens but found \"+tokens.length)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "tokens.length"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "tokens.length"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "decode",
                        "target_params": [
                            "tokens[0]"
                        ],
                        "usage": "Long.decode(tokens[0])"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "tokens.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "extendedInfo",
                        "target_method_name": "append",
                        "target_params": [
                            "\":\""
                        ],
                        "usage": "extendedInfo.append(\":\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "extendedInfo",
                        "target_method_name": "append",
                        "target_params": [
                            "tokens[i]"
                        ],
                        "usage": "extendedInfo.append(tokens[i])"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "tokens.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "extendedInfo",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "extendedInfo.toString()"
                    },
                    {
                        "target_type": "org.springframework.security.core.token.Sha512DigestUtils",
                        "target_name": "Sha512DigestUtils",
                        "target_method_name": "shaHex",
                        "target_params": [
                            "content+\":\"+serverSecret"
                        ],
                        "usage": "Sha512DigestUtils.shaHex(content+\":\"+serverSecret)"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "expectedSha512Hex"
                        ],
                        "usage": "Assert.isTrue(expectedSha512Hex.equals(sha1Hex),\"Key verification failure\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "expectedSha512Hex",
                        "target_method_name": "equals",
                        "target_params": [
                            "sha1Hex"
                        ],
                        "usage": "expectedSha512Hex.equals(sha1Hex)"
                    },
                    {
                        "target_type": null,
                        "target_name": "extendedInfo",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "extendedInfo.toString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "generatePseudoRandomNumber",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pseudoRandomNumberBytes"
                    },
                    {
                        "target_type": "java.security.SecureRandom",
                        "target_name": "secureRandom",
                        "target_method_name": "nextBytes",
                        "target_params": [
                            "randomBytes"
                        ],
                        "usage": "this.secureRandom.nextBytes(randomBytes)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.secureRandom"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.codec.Hex",
                        "target_name": "Hex",
                        "target_method_name": "encode",
                        "target_params": [
                            "randomBytes"
                        ],
                        "usage": "Hex.encode(randomBytes)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "computeServerSecretApplicableAt",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "time",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverSecret"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "time%serverInteger"
                        ],
                        "usage": "Long.valueOf(time%this.serverInteger).intValue()"
                    },
                    {
                        "target_type": "java.lang.Long",
                        "target_name": "Long",
                        "target_method_name": "valueOf",
                        "target_params": [
                            "time%serverInteger"
                        ],
                        "usage": "Long.valueOf(time%this.serverInteger)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverInteger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setServerSecret",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "serverSecret",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverSecret"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecureRandom",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "secureRandom",
                        "param_type": "java.security.SecureRandom"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.secureRandom"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPseudoRandomNumberBytes",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "pseudoRandomNumberBytes",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "pseudoRandomNumberBytes>=0",
                            "\"Must have a positive pseudo random number bit size\""
                        ],
                        "usage": "Assert.isTrue(pseudoRandomNumberBytes>=0,\"Must have a positive pseudo random number bit size\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.pseudoRandomNumberBytes"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setServerInteger",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "serverInteger",
                        "param_type": "java.lang.Integer"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverInteger"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "serverSecret",
                            "\"Server secret required\""
                        ],
                        "usage": "Assert.hasText(this.serverSecret,\"Server secret required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverSecret"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "serverInteger",
                            "\"Server integer required\""
                        ],
                        "usage": "Assert.notNull(this.serverInteger,\"Server integer required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.serverInteger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "secureRandom",
                            "\"SecureRandom instance required\""
                        ],
                        "usage": "Assert.notNull(this.secureRandom,\"SecureRandom instance required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.secureRandom"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.security.SecureRandom",
            "java.util.Base64",
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.crypto.codec.Hex",
            "org.springframework.security.crypto.codec.Utf8",
            "org.springframework.util.Assert",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.core.token.SecureRandomFactoryBean": {
        "type": "class",
        "class_name": "SecureRandomFactoryBean",
        "class_type": "class",
        "package": "org.springframework.security.core.token",
        "implementz": [
            "org.springframework.beans.factory.FactoryBean"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "algorithm",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "seed",
                "field_type": "org.springframework.core.io.Resource",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "getObject",
                "return_type": "java.security.SecureRandom",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.SecureRandom",
                        "target_name": "SecureRandom",
                        "target_method_name": "getInstance",
                        "target_params": [
                            "algorithm"
                        ],
                        "usage": "SecureRandom.getInstance(this.algorithm)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.algorithm"
                    },
                    {
                        "target_type": null,
                        "target_name": "random",
                        "target_method_name": "nextBytes",
                        "target_params": [
                            "newbyte[1]"
                        ],
                        "usage": "random.nextBytes(newbyte[1])"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.seed"
                    },
                    {
                        "target_type": "org.springframework.util.FileCopyUtils",
                        "target_name": "FileCopyUtils",
                        "target_method_name": "copyToByteArray",
                        "target_params": [
                            "seed"
                        ],
                        "usage": "FileCopyUtils.copyToByteArray(this.seed.getInputStream())"
                    },
                    {
                        "target_type": "org.springframework.core.io.Resource",
                        "target_name": "seed",
                        "target_method_name": "getInputStream",
                        "target_params": [],
                        "usage": "this.seed.getInputStream()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.seed"
                    },
                    {
                        "target_type": null,
                        "target_name": "random",
                        "target_method_name": "setSeed",
                        "target_params": [
                            "seedBytes"
                        ],
                        "usage": "random.setSeed(seedBytes)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getObjectType",
                "return_type": "java.lang.Class",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isSingleton",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setAlgorithm",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "algorithm",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "algorithm",
                            "\"Algorithm required\""
                        ],
                        "usage": "Assert.hasText(algorithm,\"Algorithm required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.algorithm"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSeed",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "seed",
                        "param_type": "org.springframework.core.io.Resource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.seed"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.InputStream",
            "java.security.SecureRandom",
            "org.springframework.beans.factory.FactoryBean",
            "org.springframework.core.io.Resource",
            "org.springframework.util.Assert",
            "org.springframework.util.FileCopyUtils"
        ]
    },
    "org.springframework.security.core.token.Sha512DigestUtils": {
        "type": "class",
        "class_name": "Sha512DigestUtils",
        "class_type": "class",
        "package": "org.springframework.security.core.token",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getSha512Digest",
                "return_type": "java.security.MessageDigest",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.security.MessageDigest",
                        "target_name": "MessageDigest",
                        "target_method_name": "getInstance",
                        "target_params": [
                            "\"SHA-512\""
                        ],
                        "usage": "MessageDigest.getInstance(\"SHA-512\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "ex",
                        "target_method_name": "getMessage",
                        "target_params": [],
                        "usage": "ex.getMessage()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "sha",
                "return_type": "org.springframework.security.core.token.byte[]",
                "formal_params": [
                    {
                        "param_name": "data",
                        "param_type": "org.springframework.security.core.token.byte[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.token.Sha512DigestUtils",
                        "target_name": "this",
                        "target_method_name": "getSha512Digest",
                        "target_params": [
                            ".digest"
                        ],
                        "usage": "getSha512Digest().digest(data)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "sha",
                "return_type": "org.springframework.security.core.token.byte[]",
                "formal_params": [
                    {
                        "param_name": "data",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "data",
                        "target_method_name": "getBytes",
                        "target_params": [],
                        "usage": "data.getBytes()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "shaHex",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "data",
                        "param_type": "org.springframework.security.core.token.byte[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.crypto.codec.Hex",
                        "target_name": "Hex",
                        "target_method_name": "encode",
                        "target_params": [
                            "sha"
                        ],
                        "usage": "Hex.encode(sha(data))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "shaHex",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "data",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.crypto.codec.Hex",
                        "target_name": "Hex",
                        "target_method_name": "encode",
                        "target_params": [
                            "sha"
                        ],
                        "usage": "Hex.encode(sha(data))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.security.MessageDigest",
            "java.security.NoSuchAlgorithmException",
            "org.springframework.security.crypto.codec.Hex"
        ]
    },
    "org.springframework.security.core.token.Token": {
        "type": "interface",
        "class_name": "Token",
        "class_type": "interface",
        "package": "org.springframework.security.core.token",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getKeyCreationTime",
                "return_type": "long",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getExtendedInformation",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.token.TokenService": {
        "type": "interface",
        "class_name": "TokenService",
        "class_type": "interface",
        "package": "org.springframework.security.core.token",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "allocateToken",
                "return_type": "org.springframework.security.core.token.Token",
                "formal_params": [
                    {
                        "param_name": "extendedInformation",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "verifyToken",
                "return_type": "org.springframework.security.core.token.Token",
                "formal_params": [
                    {
                        "param_name": "key",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.AuthenticationUserDetailsService": {
        "type": "interface",
        "class_name": "AuthenticationUserDetailsService",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "loadUserDetails",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "token",
                        "param_type": "org.springframework.security.core.userdetails.T"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.Authentication"
        ]
    },
    "org.springframework.security.core.userdetails.MapReactiveUserDetailsService": {
        "type": "class",
        "class_name": "MapReactiveUserDetailsService",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [
            "org.springframework.security.core.userdetails.ReactiveUserDetailsService,ReactiveUserDetailsPasswordService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "users",
                "field_type": "java.util.Map",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MapReactiveUserDetailsService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "users",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "MapReactiveUserDetailsService",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "users"
                        ],
                        "usage": "Arrays.asList(users)"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "MapReactiveUserDetailsService",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "users",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notEmpty",
                        "target_params": [
                            "users",
                            "\"users cannot be null or empty\""
                        ],
                        "usage": "Assert.notEmpty(users,\"users cannot be null or empty\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "getKey"
                        ],
                        "usage": "this.users.put(getKey(user.getUsername()),user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findByUsername",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "get",
                        "target_params": [
                            "key"
                        ],
                        "usage": "this.users.get(key)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "User"
                        ],
                        "usage": "Mono.just(User.withUserDetails(result).build())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "User",
                        "target_method_name": "withUserDetails",
                        "target_params": [
                            "result"
                        ],
                        "usage": "User.withUserDetails(result).build()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "User",
                        "target_method_name": "withUserDetails",
                        "target_params": [
                            "result"
                        ],
                        "usage": "User.withUserDetails(result)"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "empty",
                        "target_params": [],
                        "usage": "Mono.empty()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "updatePassword",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "user"
                        ],
                        "usage": "Mono.just(user).map((userDetails)->withNewPassword(userDetails,newPassword)).doOnNext((userDetails)->{Stringkey=getKey(user.getUsername());this.users.put(key,userDetails);})"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "user"
                        ],
                        "usage": "Mono.just(user).map((userDetails)->withNewPassword(userDetails,newPassword))"
                    },
                    {
                        "target_type": "reactor.core.publisher.Mono",
                        "target_name": "Mono",
                        "target_method_name": "just",
                        "target_params": [
                            "user"
                        ],
                        "usage": "Mono.just(user)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "key",
                            "userDetails"
                        ],
                        "usage": "this.users.put(key,userDetails)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withNewPassword",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "User",
                        "target_method_name": "withUserDetails",
                        "target_params": [
                            "userDetails"
                        ],
                        "usage": "User.withUserDetails(userDetails).password(newPassword).build()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "User",
                        "target_method_name": "withUserDetails",
                        "target_params": [
                            "userDetails"
                        ],
                        "usage": "User.withUserDetails(userDetails).password(newPassword)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "User",
                        "target_method_name": "withUserDetails",
                        "target_params": [
                            "userDetails"
                        ],
                        "usage": "User.withUserDetails(userDetails)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getKey",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "username.toLowerCase(Locale.ROOT)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Locale",
            "java.util.Map",
            "java.util.concurrent.ConcurrentHashMap",
            "reactor.core.publisher.Mono",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService": {
        "type": "interface",
        "class_name": "ReactiveUserDetailsPasswordService",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "updatePassword",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.core.userdetails.ReactiveUserDetailsService": {
        "type": "interface",
        "class_name": "ReactiveUserDetailsService",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "findByUsername",
                "return_type": "reactor.core.publisher.Mono",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "reactor.core.publisher.Mono"
        ]
    },
    "org.springframework.security.core.userdetails.User": {
        "type": "class",
        "class_name": "User",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [
            "org.springframework.security.core.userdetails.UserDetails,CredentialsContainer"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "password",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "username",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.Set",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "accountNonExpired",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "accountNonLocked",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "credentialsNonExpired",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "enabled",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "User",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "User",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "enabled",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "accountNonExpired",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "credentialsNonExpired",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "accountNonLocked",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "username!=null&&!\"\""
                        ],
                        "usage": "Assert.isTrue(username!=null&&!\"\".equals(username)&&password!=null,\"Cannot pass null or empty values to constructor\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "\"\"",
                        "target_method_name": "equals",
                        "target_params": [
                            "username"
                        ],
                        "usage": "\"\".equals(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enabled"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsNonExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonLocked"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "sortAuthorities"
                        ],
                        "usage": "Collections.unmodifiableSet(sortAuthorities(authorities))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPassword",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isEnabled",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enabled"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAccountNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonExpired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAccountNonLocked",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonLocked"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isCredentialsNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsNonExpired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "eraseCredentials",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "sortAuthorities",
                "return_type": "java.util.SortedSet",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"Cannot pass a null GrantedAuthority collection\""
                        ],
                        "usage": "Assert.notNull(authorities,\"Cannot pass a null GrantedAuthority collection\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "grantedAuthority",
                            "\"GrantedAuthority list cannot contain any null elements\""
                        ],
                        "usage": "Assert.notNull(grantedAuthority,\"GrantedAuthority list cannot contain any null elements\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sortedAuthorities",
                        "target_method_name": "add",
                        "target_params": [
                            "grantedAuthority"
                        ],
                        "usage": "sortedAuthorities.add(grantedAuthority)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "obj",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "equals",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.username.equals(user.getUsername())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "hashCode",
                        "target_params": [],
                        "usage": "this.username.hashCode()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getName()).append(\" [\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "getClass"
                        ],
                        "usage": "sb.append(getClass().getName())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "getClass",
                        "target_params": [
                            ".getName"
                        ],
                        "usage": "getClass().getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Username=\""
                        ],
                        "usage": "sb.append(\"Username=\").append(this.username).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Username=\""
                        ],
                        "usage": "sb.append(\"Username=\").append(this.username)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Username=\""
                        ],
                        "usage": "sb.append(\"Username=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Password=[PROTECTED]",
                            " \""
                        ],
                        "usage": "sb.append(\"Password=[PROTECTED], \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Enabled=\""
                        ],
                        "usage": "sb.append(\"Enabled=\").append(this.enabled).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Enabled=\""
                        ],
                        "usage": "sb.append(\"Enabled=\").append(this.enabled)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Enabled=\""
                        ],
                        "usage": "sb.append(\"Enabled=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enabled"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonExpired=\""
                        ],
                        "usage": "sb.append(\"AccountNonExpired=\").append(this.accountNonExpired).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonExpired=\""
                        ],
                        "usage": "sb.append(\"AccountNonExpired=\").append(this.accountNonExpired)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonExpired=\""
                        ],
                        "usage": "sb.append(\"AccountNonExpired=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"CredentialsNonExpired=\""
                        ],
                        "usage": "sb.append(\"CredentialsNonExpired=\").append(this.credentialsNonExpired).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"CredentialsNonExpired=\""
                        ],
                        "usage": "sb.append(\"CredentialsNonExpired=\").append(this.credentialsNonExpired)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"CredentialsNonExpired=\""
                        ],
                        "usage": "sb.append(\"CredentialsNonExpired=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsNonExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonLocked=\""
                        ],
                        "usage": "sb.append(\"AccountNonLocked=\").append(this.accountNonLocked).append(\", \")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonLocked=\""
                        ],
                        "usage": "sb.append(\"AccountNonLocked=\").append(this.accountNonLocked)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"AccountNonLocked=\""
                        ],
                        "usage": "sb.append(\"AccountNonLocked=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountNonLocked"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Granted Authorities=\""
                        ],
                        "usage": "sb.append(\"Granted Authorities=\").append(this.authorities).append(\"]\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Granted Authorities=\""
                        ],
                        "usage": "sb.append(\"Granted Authorities=\").append(this.authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "append",
                        "target_params": [
                            "\"Granted Authorities=\""
                        ],
                        "usage": "sb.append(\"Granted Authorities=\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    },
                    {
                        "target_type": null,
                        "target_name": "sb",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "sb.toString()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withUsername",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "builder",
                        "target_params": [
                            ".username"
                        ],
                        "usage": "builder().username(username)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "builder",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "withDefaultPasswordEncoder",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "warn",
                        "target_params": [
                            "\"User"
                        ],
                        "usage": "logger.warn(\"User.withDefaultPasswordEncoder() is considered unsafe for production \"+\"and is only intended for sample applications.\")"
                    },
                    {
                        "target_type": "org.springframework.security.crypto.factory.PasswordEncoderFactories",
                        "target_name": "PasswordEncoderFactories",
                        "target_method_name": "createDelegatingPasswordEncoder",
                        "target_params": [],
                        "usage": "PasswordEncoderFactories.createDelegatingPasswordEncoder()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "builder",
                        "target_params": [
                            ".passwordEncoder"
                        ],
                        "usage": "builder().passwordEncoder(encoder::encode)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "withUserDetails",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "userDetails",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired()).accountLocked(!userDetails.isAccountNonLocked()).authorities(userDetails.getAuthorities()).credentialsExpired(!userDetails.isCredentialsNonExpired()).disabled(!userDetails.isEnabled())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired()).accountLocked(!userDetails.isAccountNonLocked()).authorities(userDetails.getAuthorities()).credentialsExpired(!userDetails.isCredentialsNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired()).accountLocked(!userDetails.isAccountNonLocked()).authorities(userDetails.getAuthorities())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired()).accountLocked(!userDetails.isAccountNonLocked())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword()).accountExpired(!userDetails.isAccountNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.User",
                        "target_name": "this",
                        "target_method_name": "withUsername",
                        "target_params": [
                            "userDetails.getUsername"
                        ],
                        "usage": "withUsername(userDetails.getUsername()).password(userDetails.getPassword())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "userDetails.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userDetails.getPassword()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "userDetails.isAccountNonExpired()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "userDetails.isAccountNonLocked()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "userDetails.getAuthorities()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "userDetails.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userDetails",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "userDetails.isEnabled()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID",
            "LogFactory.getLog(User.class)"
        ],
        "imports": [
            "java.io.Serializable",
            "java.util.ArrayList",
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.Comparator",
            "java.util.List",
            "java.util.Set",
            "java.util.SortedSet",
            "java.util.TreeSet",
            "java.util.function.Function",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.security.core.CredentialsContainer",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.crypto.factory.PasswordEncoderFactories",
            "org.springframework.security.crypto.password.PasswordEncoder",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.userdetails.AuthorityComparator": {
        "type": "class",
        "class_name": "AuthorityComparator",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [
            "org.springframework.security.core.userdetails.Comparator"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "compare",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "g1",
                        "param_type": "org.springframework.security.core.userdetails.GrantedAuthority"
                    },
                    {
                        "param_name": "g2",
                        "param_type": "org.springframework.security.core.userdetails.GrantedAuthority"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.GrantedAuthority",
                        "target_name": "g2",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "g2.getAuthority()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.GrantedAuthority",
                        "target_name": "g1",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "g1.getAuthority()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.GrantedAuthority",
                        "target_name": "g1",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "g1.getAuthority().compareTo(g2.getAuthority())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.GrantedAuthority",
                        "target_name": "g1",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "g1.getAuthority()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.GrantedAuthority",
                        "target_name": "g2",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "g2.getAuthority()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UserBuilder": {
        "type": "class",
        "class_name": "UserBuilder",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "username",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "password",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "org.springframework.security.core.userdetails.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "accountExpired",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "accountLocked",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "credentialsExpired",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "disabled",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "passwordEncoder",
                "field_type": "org.springframework.security.core.userdetails.Function",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UserBuilder",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "username",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "username",
                            "\"username cannot be null\""
                        ],
                        "usage": "Assert.notNull(username,\"username cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "password",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "password",
                            "\"password cannot be null\""
                        ],
                        "usage": "Assert.notNull(password,\"password cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "passwordEncoder",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "encoder",
                        "param_type": "org.springframework.security.core.userdetails.Function"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "encoder",
                            "\"encoder cannot be null\""
                        ],
                        "usage": "Assert.notNull(encoder,\"encoder cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "roles",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "roles.length"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!role"
                        ],
                        "usage": "Assert.isTrue(!role.startsWith(\"ROLE_\"),()->role+\" cannot start with ROLE_ (it is automatically added)\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "role",
                        "target_method_name": "startsWith",
                        "target_params": [
                            "\"ROLE_\""
                        ],
                        "usage": "role.startsWith(\"ROLE_\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.List",
                        "target_name": "authorities",
                        "target_method_name": "add",
                        "target_params": [
                            "newSimpleGrantedAuthority"
                        ],
                        "usage": "authorities.add(newSimpleGrantedAuthority(\"ROLE_\"+role))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorities",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"authorities cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "asList",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "Arrays.asList(authorities)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorities",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "org.springframework.security.core.userdetails.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"authorities cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "authorities",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"authorities cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "createAuthorityList",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "AuthorityUtils.createAuthorityList(authorities)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "accountExpired",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "accountExpired",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountExpired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "accountLocked",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "accountLocked",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountLocked"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "credentialsExpired",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "credentialsExpired",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsExpired"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "disabled",
                "return_type": "org.springframework.security.core.userdetails.UserBuilder",
                "formal_params": [
                    {
                        "param_name": "disabled",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.disabled"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "build",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.Function",
                        "target_name": "passwordEncoder",
                        "target_method_name": "apply",
                        "target_params": [
                            "password"
                        ],
                        "usage": "this.passwordEncoder.apply(this.password)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.passwordEncoder"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.username"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.disabled"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.credentialsExpired"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.accountLocked"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UserCache": {
        "type": "interface",
        "class_name": "UserCache",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getUserFromCache",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "putUserInCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeUserFromCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UserDetails": {
        "type": "interface",
        "class_name": "UserDetails",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getPassword",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAccountNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isAccountNonLocked",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isCredentialsNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "isEnabled",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serializable",
            "java.util.Collection",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper": {
        "type": "class",
        "class_name": "UserDetailsByNameServiceWrapper",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [
            "org.springframework.security.core.userdetails.AuthenticationUserDetailsService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "userDetailsService",
                "field_type": "org.springframework.security.core.userdetails.UserDetailsService",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UserDetailsByNameServiceWrapper",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "UserDetailsByNameServiceWrapper",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "userDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"userDetailsService cannot be null"
                        ],
                        "usage": "Assert.notNull(userDetailsService,\"userDetailsService cannot be null.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "afterPropertiesSet",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userDetailsService",
                            "\"UserDetailsService must be set\""
                        ],
                        "usage": "Assert.notNull(this.userDetailsService,\"UserDetailsService must be set\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUserDetails",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "authentication",
                        "param_type": "org.springframework.security.core.userdetails.T"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetailsService",
                        "target_name": "userDetailsService",
                        "target_method_name": "loadUserByUsername",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "this.userDetailsService.loadUserByUsername(authentication.getName())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.T",
                        "target_name": "authentication",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "authentication.getName()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserDetailsService",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "aUserDetailsService",
                        "param_type": "org.springframework.security.core.userdetails.UserDetailsService"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsService"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.beans.factory.InitializingBean",
            "org.springframework.security.core.Authentication",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.userdetails.UserDetailsChecker": {
        "type": "interface",
        "class_name": "UserDetailsChecker",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "check",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "toCheck",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UserDetailsPasswordService": {
        "type": "interface",
        "class_name": "UserDetailsPasswordService",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "updatePassword",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UserDetailsService": {
        "type": "interface",
        "class_name": "UserDetailsService",
        "class_type": "interface",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "loadUserByUsername",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.core.userdetails.UsernameNotFoundException": {
        "type": "class",
        "class_name": "UsernameNotFoundException",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails",
        "implementz": [],
        "extendz": "org.springframework.security.core.AuthenticationException",
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UsernameNotFoundException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "UsernameNotFoundException",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "msg",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "cause",
                        "param_type": "java.lang.Throwable"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.Serial",
            "org.springframework.security.core.AuthenticationException"
        ]
    },
    "org.springframework.security.core.userdetails.cache.NullUserCache": {
        "type": "class",
        "class_name": "NullUserCache",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails.cache",
        "implementz": [
            "org.springframework.security.core.userdetails.UserCache"
        ],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "getUserFromCache",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "putUserInCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeUserFromCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.userdetails.UserCache",
            "org.springframework.security.core.userdetails.UserDetails"
        ]
    },
    "org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache": {
        "type": "class",
        "class_name": "SpringCacheBasedUserCache",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails.cache",
        "implementz": [
            "org.springframework.security.core.userdetails.UserCache"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "cache",
                "field_type": "org.springframework.cache.Cache",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SpringCacheBasedUserCache",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "cache",
                        "param_type": "org.springframework.cache.Cache"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "cache",
                            "\"cache mandatory\""
                        ],
                        "usage": "Assert.notNull(cache,\"cache mandatory\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUserFromCache",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.cache.Cache",
                        "target_name": "cache",
                        "target_method_name": "get",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.cache.get(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cache"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.of(()->\"Cache hit: \"+(element!=null)+\"; username: \"+username))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Cache hit: \"+(element!=null)+\"; username: \"+username)"
                    },
                    {
                        "target_type": null,
                        "target_name": "element",
                        "target_method_name": "get",
                        "target_params": [],
                        "usage": "element.get()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "putUserInCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.of(()->\"Cache put: \"+user.getUsername()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Cache put: \"+user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.cache.Cache",
                        "target_name": "cache",
                        "target_method_name": "put",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.cache.put(user.getUsername(),user)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cache"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeUserFromCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.of(()->\"Cache remove: \"+user.getUsername()))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "of",
                        "target_params": [],
                        "usage": "LogMessage.of(()->\"Cache remove: \"+user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache",
                        "target_name": "this",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "user.getUsername"
                        ],
                        "usage": "this.removeUserFromCache(user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeUserFromCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.cache.Cache",
                        "target_name": "cache",
                        "target_method_name": "evict",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.cache.evict(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.cache"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(SpringCacheBasedUserCache.class)"
        ],
        "imports": [
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.cache.Cache",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.core.userdetails.UserCache",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl": {
        "type": "class",
        "class_name": "JdbcDaoImpl",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails.jdbc",
        "implementz": [
            "org.springframework.security.core.userdetails.jdbc.UserDetailsService,MessageSourceAware"
        ],
        "extendz": "org.springframework.jdbc.core.support.JdbcDaoSupport",
        "fields": [
            {
                "type": "field",
                "field_name": "DEFAULT_USER_SCHEMA_DDL_LOCATION",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_USERS_BY_USERNAME_QUERY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_AUTHORITIES_BY_USERNAME_QUERY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "messages",
                "field_type": "org.springframework.context.support.MessageSourceAccessor",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authoritiesByUsernameQuery",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "groupAuthoritiesByUsernameQuery",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "usersByUsernameQuery",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "rolePrefix",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "usernameBasedPrimaryKey",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "enableAuthorities",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "enableGroups",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JdbcDaoImpl",
                "return_type": null,
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usersByUsernameQuery"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesByUsernameQuery"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.groupAuthoritiesByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMessages",
                "return_type": "org.springframework.context.support.MessageSourceAccessor",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addCustomAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getUsersByUsernameQuery",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usersByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "initDao",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "enableAuthorities||enableGroups",
                            "\"Use of either authorities or groups must be enabled\""
                        ],
                        "usage": "Assert.isTrue(this.enableAuthorities||this.enableGroups,\"Use of either authorities or groups must be enabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableAuthorities"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableGroups"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUserByUsername",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "users",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "users.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Query returned no results for user '\"+username+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Query returned no results for user '\"+username+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"JdbcDaoImpl"
                        ],
                        "usage": "this.messages.getMessage(\"JdbcDaoImpl.notFound\",newObject[]{username},\"Username {0} not found\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    },
                    {
                        "target_type": null,
                        "target_name": "users",
                        "target_method_name": "get",
                        "target_params": [
                            "0"
                        ],
                        "usage": "users.get(0)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableAuthorities"
                    },
                    {
                        "target_type": null,
                        "target_name": "dbAuthsSet",
                        "target_method_name": "addAll",
                        "target_params": [
                            "loadUserAuthorities"
                        ],
                        "usage": "dbAuthsSet.addAll(loadUserAuthorities(user.getUsername()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableGroups"
                    },
                    {
                        "target_type": null,
                        "target_name": "dbAuthsSet",
                        "target_method_name": "addAll",
                        "target_params": [
                            "loadGroupAuthorities"
                        ],
                        "usage": "dbAuthsSet.addAll(loadGroupAuthorities(user.getUsername()))"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "dbAuths",
                        "target_method_name": "isEmpty",
                        "target_params": [],
                        "usage": "dbAuths.isEmpty()"
                    },
                    {
                        "target_type": null,
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"User '\"+username+\"' has no authorities and will be treated as 'not found'\""
                        ],
                        "usage": "this.logger.debug(\"User '\"+username+\"' has no authorities and will be treated as 'not found'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.context.support.MessageSourceAccessor",
                        "target_name": "messages",
                        "target_method_name": "getMessage",
                        "target_params": [
                            "\"JdbcDaoImpl"
                        ],
                        "usage": "this.messages.getMessage(\"JdbcDaoImpl.noAuthority\",newObject[]{username},\"User {0} has no GrantedAuthority\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUsersByUsername",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "1"
                        ],
                        "usage": "rs.getString(1)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "2"
                        ],
                        "usage": "rs.getString(2)"
                    },
                    {
                        "target_type": null,
                        "target_name": "rs",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "3"
                        ],
                        "usage": "rs.getBoolean(3)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".query"
                        ],
                        "usage": "getJdbcTemplate().query(this.usersByUsernameQuery,mapper,username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usersByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUserAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".query"
                        ],
                        "usage": "getJdbcTemplate().query(this.authoritiesByUsernameQuery,newString[]{username},(rs,rowNum)->{StringroleName=JdbcDaoImpl.this.rolePrefix+rs.getString(2);returnnewSimpleGrantedAuthority(roleName);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesByUsernameQuery"
                    },
                    {
                        "target_type": null,
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "2"
                        ],
                        "usage": "rs.getString(2)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadGroupAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".query"
                        ],
                        "usage": "getJdbcTemplate().query(this.groupAuthoritiesByUsernameQuery,newString[]{username},(rs,rowNum)->{StringroleName=getRolePrefix()+rs.getString(3);returnnewSimpleGrantedAuthority(roleName);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.groupAuthoritiesByUsernameQuery"
                    },
                    {
                        "target_type": null,
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "3"
                        ],
                        "usage": "rs.getString(3)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUserDetails",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "userFromUserQuery",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "combinedAuthorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "userFromUserQuery.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usernameBasedPrimaryKey"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "userFromUserQuery.getPassword()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "userFromUserQuery.isEnabled()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "userFromUserQuery.isAccountNonExpired()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "userFromUserQuery.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "userFromUserQuery",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "userFromUserQuery.isAccountNonLocked()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthoritiesByUsernameQuery",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "queryString",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthoritiesByUsernameQuery",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authoritiesByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setGroupAuthoritiesByUsernameQuery",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "queryString",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.groupAuthoritiesByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRolePrefix",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "rolePrefix",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getRolePrefix",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.rolePrefix"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUsernameBasedPrimaryKey",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "usernameBasedPrimaryKey",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usernameBasedPrimaryKey"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isUsernameBasedPrimaryKey",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usernameBasedPrimaryKey"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUsersByUsernameQuery",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "usersByUsernameQueryString",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.usersByUsernameQuery"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getEnableAuthorities",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableAuthorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setEnableAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "enableAuthorities",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableAuthorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getEnableGroups",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableGroups"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setEnableGroups",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "enableGroups",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enableGroups"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setMessageSource",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "messageSource",
                        "param_type": "org.springframework.context.MessageSource"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "messageSource",
                            "\"messageSource cannot be null\""
                        ],
                        "usage": "Assert.notNull(messageSource,\"messageSource cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.messages"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityMessageSource.getAccessor()"
        ],
        "imports": [
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "org.springframework.context.ApplicationContextException",
            "org.springframework.context.MessageSource",
            "org.springframework.context.MessageSourceAware",
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.jdbc.core.RowMapper",
            "org.springframework.jdbc.core.support.JdbcDaoSupport",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityMessageSource",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.core.userdetails.User",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.core.userdetails.memory.UserAttribute": {
        "type": "class",
        "class_name": "UserAttribute",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails.memory",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "authorities",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "password",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "enabled",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "addAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "newAuthority",
                        "param_type": "org.springframework.security.core.GrantedAuthority"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "authorities",
                        "target_method_name": "add",
                        "target_params": [
                            "newAuthority"
                        ],
                        "usage": "this.authorities.add(newAuthority)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthoritiesAsString",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authoritiesAsStrings",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "authoritiesAsStrings",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "authoritiesAsStrings.size()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPassword",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isEnabled",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enabled"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isValid",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    },
                    {
                        "target_type": "java.util.List",
                        "target_name": "authorities",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "this.authorities.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authorities"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setEnabled",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "enabled",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.enabled"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.List",
            "java.util.Vector",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority"
        ]
    },
    "org.springframework.security.core.userdetails.memory.UserAttributeEditor": {
        "type": "class",
        "class_name": "UserAttributeEditor",
        "class_type": "class",
        "package": "org.springframework.security.core.userdetails.memory",
        "implementz": [],
        "extendz": "java.beans.PropertyEditorSupport",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "setAsText",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "s",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "hasText",
                        "target_params": [
                            "s"
                        ],
                        "usage": "StringUtils.hasText(s)"
                    },
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "commaDelimitedListToStringArray",
                        "target_params": [
                            "s"
                        ],
                        "usage": "StringUtils.commaDelimitedListToStringArray(s)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "tokens.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "tokens[i]",
                        "target_method_name": "trim",
                        "target_params": [],
                        "usage": "tokens[i].trim()"
                    },
                    {
                        "target_type": null,
                        "target_name": "userAttrib",
                        "target_method_name": "setPassword",
                        "target_params": [
                            "currentToken"
                        ],
                        "usage": "userAttrib.setPassword(currentToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentToken",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "currentToken.toLowerCase(Locale.ENGLISH).equals(\"enabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentToken",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "currentToken.toLowerCase(Locale.ENGLISH)"
                    },
                    {
                        "target_type": null,
                        "target_name": "userAttrib",
                        "target_method_name": "setEnabled",
                        "target_params": [
                            "true"
                        ],
                        "usage": "userAttrib.setEnabled(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentToken",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "currentToken.toLowerCase(Locale.ENGLISH).equals(\"disabled\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentToken",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "currentToken.toLowerCase(Locale.ENGLISH)"
                    },
                    {
                        "target_type": null,
                        "target_name": "userAttrib",
                        "target_method_name": "setEnabled",
                        "target_params": [
                            "false"
                        ],
                        "usage": "userAttrib.setEnabled(false)"
                    },
                    {
                        "target_type": null,
                        "target_name": "authoritiesAsStrings",
                        "target_method_name": "add",
                        "target_params": [
                            "currentToken"
                        ],
                        "usage": "authoritiesAsStrings.add(currentToken)"
                    },
                    {
                        "target_type": null,
                        "target_name": "userAttrib",
                        "target_method_name": "setAuthoritiesAsString",
                        "target_params": [
                            "authoritiesAsStrings"
                        ],
                        "usage": "userAttrib.setAuthoritiesAsString(authoritiesAsStrings)"
                    },
                    {
                        "target_type": null,
                        "target_name": "userAttrib",
                        "target_method_name": "isValid",
                        "target_params": [],
                        "usage": "userAttrib.isValid()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.beans.PropertyEditorSupport",
            "java.util.ArrayList",
            "java.util.List",
            "java.util.Locale",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer": {
        "type": "class",
        "class_name": "AbstractUnmodifiableCollectionDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "com.fasterxml.jackson.databind.JsonDeserializer",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "deserialize",
                "return_type": "org.springframework.security.jackson2.T",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "com.fasterxml.jackson.core.JsonParser"
                    },
                    {
                        "param_name": "ctxt",
                        "param_type": "com.fasterxml.jackson.databind.DeserializationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.core.JsonParser",
                        "target_name": "jp",
                        "target_method_name": "getCodec",
                        "target_params": [],
                        "usage": "jp.getCodec()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readTree",
                        "target_params": [
                            "jp"
                        ],
                        "usage": "mapper.readTree(jp)"
                    },
                    {
                        "target_type": null,
                        "target_name": "values",
                        "target_method_name": "add",
                        "target_params": [
                            "mapper"
                        ],
                        "usage": "values.add(mapper.readValue(elementNode.traverse(mapper),Object.class))"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "elementNode"
                        ],
                        "usage": "mapper.readValue(elementNode.traverse(mapper),Object.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "elementNode",
                        "target_method_name": "traverse",
                        "target_params": [
                            "mapper"
                        ],
                        "usage": "elementNode.traverse(mapper)"
                    },
                    {
                        "target_type": null,
                        "target_name": "values",
                        "target_method_name": "add",
                        "target_params": [
                            "mapper"
                        ],
                        "usage": "values.add(mapper.readValue(node.traverse(mapper),Object.class))"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "node"
                        ],
                        "usage": "mapper.readValue(node.traverse(mapper),Object.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "node",
                        "target_method_name": "traverse",
                        "target_params": [
                            "mapper"
                        ],
                        "usage": "node.traverse(mapper)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUnmodifiableCollection",
                "return_type": "org.springframework.security.jackson2.T",
                "formal_params": [
                    {
                        "param_name": "values",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.List",
            "java.util.Set",
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.databind.JsonDeserializer",
            "com.fasterxml.jackson.databind.JsonNode",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.node.ArrayNode"
        ]
    },
    "org.springframework.security.jackson2.AnonymousAuthenticationTokenMixin": {
        "type": "class",
        "class_name": "AnonymousAuthenticationTokenMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AnonymousAuthenticationTokenMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "keyHash",
                        "param_type": "java.lang.Integer"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonIgnoreProperties",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.jackson2.BadCredentialsExceptionMixin": {
        "type": "class",
        "class_name": "BadCredentialsExceptionMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "BadCredentialsExceptionMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "message",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonIgnoreProperties",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "com.fasterxml.jackson.annotation.JsonTypeInfo"
        ]
    },
    "org.springframework.security.jackson2.CoreJackson2Module": {
        "type": "class",
        "class_name": "CoreJackson2Module",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "com.fasterxml.jackson.databind.module.SimpleModule",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "CoreJackson2Module",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setupModule",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.jackson2.SetupContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.SecurityJackson2Modules",
                        "target_name": "SecurityJackson2Modules",
                        "target_method_name": "enableDefaultTyping",
                        "target_params": [
                            "context"
                        ],
                        "usage": "SecurityJackson2Modules.enableDefaultTyping(context.getOwner())"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "getOwner",
                        "target_params": [],
                        "usage": "context.getOwner()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "AnonymousAuthenticationToken"
                        ],
                        "usage": "context.setMixInAnnotations(AnonymousAuthenticationToken.class,AnonymousAuthenticationTokenMixin.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "RememberMeAuthenticationToken"
                        ],
                        "usage": "context.setMixInAnnotations(RememberMeAuthenticationToken.class,RememberMeAuthenticationTokenMixin.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "SimpleGrantedAuthority"
                        ],
                        "usage": "context.setMixInAnnotations(SimpleGrantedAuthority.class,SimpleGrantedAuthorityMixin.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "context.setMixInAnnotations(Collections.unmodifiableSet(Collections.emptySet()).getClass(),UnmodifiableSetMixin.class)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableSet(Collections.emptySet()).getClass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableSet(Collections.emptySet())"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptySet",
                        "target_params": [],
                        "usage": "Collections.emptySet()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "context.setMixInAnnotations(Collections.unmodifiableList(Collections.emptyList()).getClass(),UnmodifiableListMixin.class)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableList",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableList(Collections.emptyList()).getClass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableList",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableList(Collections.emptyList())"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyList",
                        "target_params": [],
                        "usage": "Collections.emptyList()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "context.setMixInAnnotations(Collections.unmodifiableMap(Collections.emptyMap()).getClass(),UnmodifiableMapMixin.class)"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableMap",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableMap(Collections.emptyMap()).getClass()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableMap",
                        "target_params": [
                            "Collections"
                        ],
                        "usage": "Collections.unmodifiableMap(Collections.emptyMap())"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "emptyMap",
                        "target_params": [],
                        "usage": "Collections.emptyMap()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "User"
                        ],
                        "usage": "context.setMixInAnnotations(User.class,UserMixin.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "UsernamePasswordAuthenticationToken"
                        ],
                        "usage": "context.setMixInAnnotations(UsernamePasswordAuthenticationToken.class,UsernamePasswordAuthenticationTokenMixin.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.SetupContext",
                        "target_name": "context",
                        "target_method_name": "setMixInAnnotations",
                        "target_params": [
                            "BadCredentialsException"
                        ],
                        "usage": "context.setMixInAnnotations(BadCredentialsException.class,BadCredentialsExceptionMixin.class)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collections",
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.databind.module.SimpleModule",
            "org.springframework.security.authentication.AnonymousAuthenticationToken",
            "org.springframework.security.authentication.BadCredentialsException",
            "org.springframework.security.authentication.RememberMeAuthenticationToken",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.core.userdetails.User"
        ]
    },
    "org.springframework.security.jackson2.RememberMeAuthenticationTokenMixin": {
        "type": "class",
        "class_name": "RememberMeAuthenticationTokenMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "RememberMeAuthenticationTokenMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "keyHash",
                        "param_type": "java.lang.Integer"
                    },
                    {
                        "param_name": "principal",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonIgnoreProperties",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.jackson2.SecurityJackson2Modules": {
        "type": "class",
        "class_name": "SecurityJackson2Modules",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityJackson2ModuleClasses",
                "field_type": "java.util.List",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "webServletJackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "oauth2ClientJackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "javaTimeJackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "ldapJackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "saml2Jackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "casJackson2ModuleClass",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "webServletPresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "oauth2ClientPresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "javaTimeJacksonPresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "ldapJacksonPresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "saml2JacksonPresent",
                "field_type": "boolean",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "casJacksonPresent",
                "field_type": "boolean",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SecurityJackson2Modules",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "enableDefaultTyping",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "mapper",
                        "param_type": "com.fasterxml.jackson.databind.ObjectMapper"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.databind.ObjectMapper",
                        "target_name": "mapper",
                        "target_method_name": "getDeserializationConfig",
                        "target_params": [],
                        "usage": "mapper.getDeserializationConfig().getDefaultTyper(null)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.ObjectMapper",
                        "target_name": "mapper",
                        "target_method_name": "getDeserializationConfig",
                        "target_params": [],
                        "usage": "mapper.getDeserializationConfig()"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.ObjectMapper",
                        "target_name": "mapper",
                        "target_method_name": "setDefaultTyping",
                        "target_params": [
                            "createAllowlistedDefaultTyping"
                        ],
                        "usage": "mapper.setDefaultTyping(createAllowlistedDefaultTyping())"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadAndGetInstance",
                "return_type": "com.fasterxml.jackson.databind.Module",
                "formal_params": [
                    {
                        "param_name": "className",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "loader",
                        "param_type": "org.springframework.security.jackson2.ClassLoader"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.ClassUtils",
                        "target_name": "ClassUtils",
                        "target_method_name": "forName",
                        "target_params": [
                            "className",
                            "loader"
                        ],
                        "usage": "ClassUtils.forName(className,loader)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Loaded module %s, now registering\",className))"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Loaded module %s",
                            " now registering\"",
                            "className"
                        ],
                        "usage": "LogMessage.format(\"Loaded module %s, now registering\",className)"
                    },
                    {
                        "target_type": null,
                        "target_name": "securityModule",
                        "target_method_name": "getConstructor",
                        "target_params": [],
                        "usage": "securityModule.getConstructor().newInstance()"
                    },
                    {
                        "target_type": null,
                        "target_name": "securityModule",
                        "target_method_name": "getConstructor",
                        "target_params": [],
                        "usage": "securityModule.getConstructor()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "logger.debug(LogMessage.format(\"Cannot load module %s\",className),ex)"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Cannot load module %s\"",
                            "className"
                        ],
                        "usage": "LogMessage.format(\"Cannot load module %s\",className)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getModules",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "loader",
                        "param_type": "org.springframework.security.jackson2.ClassLoader"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addToModulesList",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "loader",
                        "param_type": "org.springframework.security.jackson2.ClassLoader"
                    },
                    {
                        "param_name": "modules",
                        "param_type": "java.util.List"
                    },
                    {
                        "param_name": "className",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.List",
                        "target_name": "modules",
                        "target_method_name": "add",
                        "target_params": [
                            "module"
                        ],
                        "usage": "modules.add(module)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createAllowlistedDefaultTyping",
                "return_type": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "init",
                        "target_params": [
                            "JsonTypeInfo"
                        ],
                        "usage": "result.init(JsonTypeInfo.Id.CLASS,null)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "inclusion",
                        "target_params": [
                            "JsonTypeInfo"
                        ],
                        "usage": "result.inclusion(JsonTypeInfo.As.PROPERTY)"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(SecurityJackson2Modules.class)",
            "Arrays.asList(\"org.springframework.security.jackson2.CoreJackson2Module\",\"org.springframework.security.web.jackson2.WebJackson2Module\",\"org.springframework.security.web.server.jackson2.WebServerJackson2Module\")",
            "SecurityJackson2Modules.class.getClassLoader()",
            "ClassUtils.isPresent(\"jakarta.servlet.http.Cookie\",classLoader)",
            "ClassUtils.isPresent(\"org.springframework.security.oauth2.client.OAuth2AuthorizedClient\",classLoader)",
            "ClassUtils.isPresent(javaTimeJackson2ModuleClass,classLoader)",
            "ClassUtils.isPresent(ldapJackson2ModuleClass,classLoader)",
            "ClassUtils.isPresent(saml2Jackson2ModuleClass,classLoader)",
            "ClassUtils.isPresent(casJackson2ModuleClass,classLoader)"
        ],
        "imports": [
            "java.io.IOException",
            "java.util.ArrayList",
            "java.util.Arrays",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.List",
            "java.util.Set",
            "com.fasterxml.jackson.annotation.JacksonAnnotation",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.DatabindContext",
            "com.fasterxml.jackson.databind.DeserializationConfig",
            "com.fasterxml.jackson.databind.JavaType",
            "com.fasterxml.jackson.databind.Module",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.cfg.MapperConfig",
            "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator",
            "com.fasterxml.jackson.databind.jsontype.NamedType",
            "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator",
            "com.fasterxml.jackson.databind.jsontype.TypeIdResolver",
            "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.annotation.AnnotationUtils",
            "org.springframework.core.log.LogMessage",
            "org.springframework.util.ClassUtils"
        ]
    },
    "org.springframework.security.jackson2.AllowlistTypeResolverBuilder": {
        "type": "class",
        "class_name": "AllowlistTypeResolverBuilder",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "org.springframework.security.jackson2.ObjectMapper.DefaultTypeResolverBuilder",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AllowlistTypeResolverBuilder",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "defaultTyping",
                        "param_type": "org.springframework.security.jackson2.ObjectMapper.DefaultTyping"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.BasicPolymorphicTypeValidator",
                        "target_name": "BasicPolymorphicTypeValidator",
                        "target_method_name": "builder",
                        "target_params": [],
                        "usage": "BasicPolymorphicTypeValidator.builder().allowIfSubType(Object.class).build()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.BasicPolymorphicTypeValidator",
                        "target_name": "BasicPolymorphicTypeValidator",
                        "target_method_name": "builder",
                        "target_params": [],
                        "usage": "BasicPolymorphicTypeValidator.builder().allowIfSubType(Object.class)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.BasicPolymorphicTypeValidator",
                        "target_name": "BasicPolymorphicTypeValidator",
                        "target_method_name": "builder",
                        "target_params": [],
                        "usage": "BasicPolymorphicTypeValidator.builder()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "idResolver",
                "return_type": "org.springframework.security.jackson2.TypeIdResolver",
                "formal_params": [
                    {
                        "param_name": "config",
                        "param_type": "org.springframework.security.jackson2.MapperConfig"
                    },
                    {
                        "param_name": "baseType",
                        "param_type": "org.springframework.security.jackson2.JavaType"
                    },
                    {
                        "param_name": "subtypeValidator",
                        "param_type": "org.springframework.security.jackson2.PolymorphicTypeValidator"
                    },
                    {
                        "param_name": "subtypes",
                        "param_type": "org.springframework.security.jackson2.Collection"
                    },
                    {
                        "param_name": "forSer",
                        "param_type": "boolean"
                    },
                    {
                        "param_name": "forDeser",
                        "param_type": "boolean"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "idResolver",
                        "target_params": [
                            "config",
                            "baseType",
                            "subtypeValidator",
                            "subtypes",
                            "forSer",
                            "forDeser"
                        ],
                        "usage": "super.idResolver(config,baseType,subtypeValidator,subtypes,forSer,forDeser)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": []
    },
    "org.springframework.security.jackson2.AllowlistTypeIdResolver": {
        "type": "class",
        "class_name": "AllowlistTypeIdResolver",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [
            "org.springframework.security.jackson2.TypeIdResolver"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "ALLOWLIST_CLASS_NAMES",
                "field_type": "org.springframework.security.jackson2.Set",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.jackson2.TypeIdResolver",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "AllowlistTypeIdResolver",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.jackson2.TypeIdResolver"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "init",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "baseType",
                        "param_type": "org.springframework.security.jackson2.JavaType"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "init",
                        "target_params": [
                            "baseType"
                        ],
                        "usage": "this.delegate.init(baseType)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "idFromValue",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "value",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "idFromValue",
                        "target_params": [
                            "value"
                        ],
                        "usage": "this.delegate.idFromValue(value)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "idFromValueAndType",
                "return_type": "java.lang.String",
                "formal_params": [
                    {
                        "param_name": "value",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "suggestedType",
                        "param_type": "java.lang.Class"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "idFromValueAndType",
                        "target_params": [
                            "value",
                            "suggestedType"
                        ],
                        "usage": "this.delegate.idFromValueAndType(value,suggestedType)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "idFromBaseType",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "idFromBaseType",
                        "target_params": [],
                        "usage": "this.delegate.idFromBaseType()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "typeFromId",
                "return_type": "org.springframework.security.jackson2.JavaType",
                "formal_params": [
                    {
                        "param_name": "context",
                        "param_type": "org.springframework.security.jackson2.DatabindContext"
                    },
                    {
                        "param_name": "id",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.DatabindContext",
                        "target_name": "context",
                        "target_method_name": "getConfig",
                        "target_params": [],
                        "usage": "context.getConfig()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "typeFromId",
                        "target_params": [
                            "context",
                            "id"
                        ],
                        "usage": "this.delegate.typeFromId(context,id)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "getRawClass",
                        "target_params": [],
                        "usage": "result.getRawClass().getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "getRawClass",
                        "target_params": [],
                        "usage": "result.getRawClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "config",
                        "target_method_name": "findMixInClassFor",
                        "target_params": [
                            "result"
                        ],
                        "usage": "config.findMixInClassFor(result.getRawClass())"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "getRawClass",
                        "target_params": [],
                        "usage": "result.getRawClass()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.AnnotationUtils",
                        "target_name": "AnnotationUtils",
                        "target_method_name": "findAnnotation",
                        "target_params": [
                            "result"
                        ],
                        "usage": "AnnotationUtils.findAnnotation(result.getRawClass(),JacksonAnnotation.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "getRawClass",
                        "target_params": [],
                        "usage": "result.getRawClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isInAllowlist",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "id",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.ALLOWLIST_CLASS_NAMES",
                        "target_name": "ALLOWLIST_CLASS_NAMES",
                        "target_method_name": "contains",
                        "target_params": [
                            "id"
                        ],
                        "usage": "ALLOWLIST_CLASS_NAMES.contains(id)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDescForKnownTypeIds",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "getDescForKnownTypeIds",
                        "target_params": [],
                        "usage": "this.delegate.getDescForKnownTypeIds()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMechanism",
                "return_type": "org.springframework.security.jackson2.JsonTypeInfo.Id",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.jackson2.TypeIdResolver",
                        "target_name": "delegate",
                        "target_method_name": "getMechanism",
                        "target_params": [],
                        "usage": "this.delegate.getMechanism()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            }
        ],
        "methodCalls": [
            "names.add(\"java.util.ArrayList\")",
            "names.add(\"java.util.Collections$EmptyList\")",
            "names.add(\"java.util.Collections$EmptyMap\")",
            "names.add(\"java.util.Collections$UnmodifiableRandomAccessList\")",
            "names.add(\"java.util.Collections$SingletonList\")",
            "names.add(\"java.util.Date\")",
            "names.add(\"java.time.Instant\")",
            "names.add(\"java.net.URL\")",
            "names.add(\"java.util.TreeMap\")",
            "names.add(\"java.util.HashMap\")",
            "names.add(\"java.util.LinkedHashMap\")",
            "names.add(\"org.springframework.security.core.context.SecurityContextImpl\")",
            "names.add(\"java.util.Arrays$ArrayList\")",
            "Collections.unmodifiableSet(names)"
        ],
        "imports": []
    },
    "org.springframework.security.jackson2.SimpleGrantedAuthorityMixin": {
        "type": "class",
        "class_name": "SimpleGrantedAuthorityMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SimpleGrantedAuthorityMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "role",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonIgnoreProperties",
            "com.fasterxml.jackson.annotation.JsonProperty",
            "com.fasterxml.jackson.annotation.JsonTypeInfo"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableListDeserializer": {
        "type": "class",
        "class_name": "UnmodifiableListDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "createUnmodifiableCollection",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "values",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableList",
                        "target_params": [
                            "newArrayList<>"
                        ],
                        "usage": "Collections.unmodifiableList(newArrayList<>(values))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.ArrayList",
            "java.util.Collection",
            "java.util.Collections",
            "java.util.List"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableListMixin": {
        "type": "class",
        "class_name": "UnmodifiableListMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UnmodifiableListMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "s",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Set",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableMapDeserializer": {
        "type": "class",
        "class_name": "UnmodifiableMapDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "com.fasterxml.jackson.databind.JsonDeserializer",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "deserialize",
                "return_type": "java.util.Map",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "com.fasterxml.jackson.core.JsonParser"
                    },
                    {
                        "param_name": "ctxt",
                        "param_type": "com.fasterxml.jackson.databind.DeserializationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.core.JsonParser",
                        "target_name": "jp",
                        "target_method_name": "getCodec",
                        "target_params": [],
                        "usage": "jp.getCodec()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readTree",
                        "target_params": [
                            "jp"
                        ],
                        "usage": "mapper.readTree(jp)"
                    },
                    {
                        "target_type": null,
                        "target_name": "node",
                        "target_method_name": "isObject",
                        "target_params": [],
                        "usage": "node.isObject()"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "put",
                        "target_params": [
                            "field"
                        ],
                        "usage": "result.put(field.getKey(),mapper.readValue(field.getValue().traverse(mapper),Object.class))"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "getKey",
                        "target_params": [],
                        "usage": "field.getKey()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "field"
                        ],
                        "usage": "mapper.readValue(field.getValue().traverse(mapper),Object.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "field.getValue().traverse(mapper)"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "field.getValue()"
                    },
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableMap",
                        "target_params": [
                            "result"
                        ],
                        "usage": "Collections.unmodifiableMap(result)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "java.util.Collections",
            "java.util.LinkedHashMap",
            "java.util.Map",
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.databind.JsonDeserializer",
            "com.fasterxml.jackson.databind.JsonNode",
            "com.fasterxml.jackson.databind.ObjectMapper"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableMapMixin": {
        "type": "class",
        "class_name": "UnmodifiableMapMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UnmodifiableMapMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "map",
                        "param_type": "java.util.Map"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Map",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableSetDeserializer": {
        "type": "class",
        "class_name": "UnmodifiableSetDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer",
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "createUnmodifiableCollection",
                "return_type": "java.util.Set",
                "formal_params": [
                    {
                        "param_name": "values",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Collections",
                        "target_name": "Collections",
                        "target_method_name": "unmodifiableSet",
                        "target_params": [
                            "newHashSet<>"
                        ],
                        "usage": "Collections.unmodifiableSet(newHashSet<>(values))"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Collection",
            "java.util.Collections",
            "java.util.HashSet",
            "java.util.Set"
        ]
    },
    "org.springframework.security.jackson2.UnmodifiableSetMixin": {
        "type": "class",
        "class_name": "UnmodifiableSetMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "UnmodifiableSetMixin",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "s",
                        "param_type": "java.util.Set"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.Set",
            "com.fasterxml.jackson.annotation.JsonCreator",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize"
        ]
    },
    "org.springframework.security.jackson2.UserDeserializer": {
        "type": "class",
        "class_name": "UserDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "com.fasterxml.jackson.databind.JsonDeserializer",
        "fields": [
            {
                "type": "field",
                "field_name": "SIMPLE_GRANTED_AUTHORITY_SET",
                "field_type": "com.fasterxml.jackson.core.type.TypeReference",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "deserialize",
                "return_type": "org.springframework.security.core.userdetails.User",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "com.fasterxml.jackson.core.JsonParser"
                    },
                    {
                        "param_name": "ctxt",
                        "param_type": "com.fasterxml.jackson.databind.DeserializationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.core.JsonParser",
                        "target_name": "jp",
                        "target_method_name": "getCodec",
                        "target_params": [],
                        "usage": "jp.getCodec()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readTree",
                        "target_params": [
                            "jp"
                        ],
                        "usage": "mapper.readTree(jp)"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "convertValue",
                        "target_params": [
                            "jsonNode"
                        ],
                        "usage": "mapper.convertValue(jsonNode.get(\"authorities\"),SIMPLE_GRANTED_AUTHORITY_SET)"
                    },
                    {
                        "target_type": null,
                        "target_name": "jsonNode",
                        "target_method_name": "get",
                        "target_params": [
                            "\"authorities\""
                        ],
                        "usage": "jsonNode.get(\"authorities\")"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UserDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"username\".asText"
                        ],
                        "usage": "readJsonNode(jsonNode,\"username\").asText()"
                    },
                    {
                        "target_type": null,
                        "target_name": "passwordNode",
                        "target_method_name": "asText",
                        "target_params": [
                            "\"\""
                        ],
                        "usage": "passwordNode.asText(\"\")"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UserDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"enabled\".asBoolean"
                        ],
                        "usage": "readJsonNode(jsonNode,\"enabled\").asBoolean()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UserDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"accountNonExpired\".asBoolean"
                        ],
                        "usage": "readJsonNode(jsonNode,\"accountNonExpired\").asBoolean()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UserDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"credentialsNonExpired\".asBoolean"
                        ],
                        "usage": "readJsonNode(jsonNode,\"credentialsNonExpired\").asBoolean()"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UserDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"accountNonLocked\".asBoolean"
                        ],
                        "usage": "readJsonNode(jsonNode,\"accountNonLocked\").asBoolean()"
                    },
                    {
                        "target_type": null,
                        "target_name": "passwordNode",
                        "target_method_name": "asText",
                        "target_params": [
                            "null"
                        ],
                        "usage": "passwordNode.asText(null)"
                    },
                    {
                        "target_type": null,
                        "target_name": "result",
                        "target_method_name": "eraseCredentials",
                        "target_params": [],
                        "usage": "result.eraseCredentials()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "readJsonNode",
                "return_type": "com.fasterxml.jackson.databind.JsonNode",
                "formal_params": [
                    {
                        "param_name": "jsonNode",
                        "param_type": "com.fasterxml.jackson.databind.JsonNode"
                    },
                    {
                        "param_name": "field",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "jsonNode",
                        "target_method_name": "has",
                        "target_params": [
                            "field"
                        ],
                        "usage": "jsonNode.has(field)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "jsonNode",
                        "target_method_name": "get",
                        "target_params": [
                            "field"
                        ],
                        "usage": "jsonNode.get(field)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.node.MissingNode",
                        "target_name": "MissingNode",
                        "target_method_name": "getInstance",
                        "target_params": [],
                        "usage": "MissingNode.getInstance()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "java.util.Set",
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonProcessingException",
            "com.fasterxml.jackson.core.type.TypeReference",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.databind.JsonDeserializer",
            "com.fasterxml.jackson.databind.JsonNode",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.node.MissingNode",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.core.userdetails.User"
        ]
    },
    "org.springframework.security.jackson2.UserMixin": {
        "type": "class",
        "class_name": "UserMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "com.fasterxml.jackson.annotation.JsonIgnoreProperties",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize"
        ]
    },
    "org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer": {
        "type": "class",
        "class_name": "UsernamePasswordAuthenticationTokenDeserializer",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": "com.fasterxml.jackson.databind.JsonDeserializer",
        "fields": [
            {
                "type": "field",
                "field_name": "GRANTED_AUTHORITY_LIST",
                "field_type": "com.fasterxml.jackson.core.type.TypeReference",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "OBJECT",
                "field_type": "com.fasterxml.jackson.core.type.TypeReference",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "method",
                "method_name": "deserialize",
                "return_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                "formal_params": [
                    {
                        "param_name": "jp",
                        "param_type": "com.fasterxml.jackson.core.JsonParser"
                    },
                    {
                        "param_name": "ctxt",
                        "param_type": "com.fasterxml.jackson.databind.DeserializationContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.core.JsonParser",
                        "target_name": "jp",
                        "target_method_name": "getCodec",
                        "target_params": [],
                        "usage": "jp.getCodec()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readTree",
                        "target_params": [
                            "jp"
                        ],
                        "usage": "mapper.readTree(jp)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"authenticated\".asBoolean"
                        ],
                        "usage": "readJsonNode(jsonNode,\"authenticated\").asBoolean()"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "readJsonNode"
                        ],
                        "usage": "mapper.readValue(readJsonNode(jsonNode,\"authorities\").traverse(mapper),GRANTED_AUTHORITY_LIST)"
                    },
                    {
                        "target_type": "org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer",
                        "target_name": "this",
                        "target_method_name": "readJsonNode",
                        "target_params": [
                            "jsonNode",
                            "\"authorities\".traverse"
                        ],
                        "usage": "readJsonNode(jsonNode,\"authorities\").traverse(mapper)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "unauthenticated",
                        "target_params": [
                            "principal",
                            "credentials"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.unauthenticated(principal,credentials)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "principal",
                            "credentials",
                            "authorities"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.authenticated(principal,credentials,authorities)"
                    },
                    {
                        "target_type": null,
                        "target_name": "detailsNode",
                        "target_method_name": "isNull",
                        "target_params": [],
                        "usage": "detailsNode.isNull()"
                    },
                    {
                        "target_type": null,
                        "target_name": "detailsNode",
                        "target_method_name": "isMissingNode",
                        "target_params": [],
                        "usage": "detailsNode.isMissingNode()"
                    },
                    {
                        "target_type": null,
                        "target_name": "token",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "null"
                        ],
                        "usage": "token.setDetails(null)"
                    },
                    {
                        "target_type": null,
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "detailsNode"
                        ],
                        "usage": "mapper.readValue(detailsNode.toString(),OBJECT)"
                    },
                    {
                        "target_type": null,
                        "target_name": "detailsNode",
                        "target_method_name": "toString",
                        "target_params": [],
                        "usage": "detailsNode.toString()"
                    },
                    {
                        "target_type": null,
                        "target_name": "token",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "details"
                        ],
                        "usage": "token.setDetails(details)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getCredentials",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "credentialsNode",
                        "param_type": "com.fasterxml.jackson.databind.JsonNode"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "credentialsNode",
                        "target_method_name": "isNull",
                        "target_params": [],
                        "usage": "credentialsNode.isNull()"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "credentialsNode",
                        "target_method_name": "isMissingNode",
                        "target_params": [],
                        "usage": "credentialsNode.isMissingNode()"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "credentialsNode",
                        "target_method_name": "asText",
                        "target_params": [],
                        "usage": "credentialsNode.asText()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPrincipal",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "mapper",
                        "param_type": "com.fasterxml.jackson.databind.ObjectMapper"
                    },
                    {
                        "param_name": "principalNode",
                        "param_type": "com.fasterxml.jackson.databind.JsonNode"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "principalNode",
                        "target_method_name": "isObject",
                        "target_params": [],
                        "usage": "principalNode.isObject()"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.ObjectMapper",
                        "target_name": "mapper",
                        "target_method_name": "readValue",
                        "target_params": [
                            "principalNode"
                        ],
                        "usage": "mapper.readValue(principalNode.traverse(mapper),Object.class)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "principalNode",
                        "target_method_name": "traverse",
                        "target_params": [
                            "mapper"
                        ],
                        "usage": "principalNode.traverse(mapper)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "principalNode",
                        "target_method_name": "asText",
                        "target_params": [],
                        "usage": "principalNode.asText()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "readJsonNode",
                "return_type": "com.fasterxml.jackson.databind.JsonNode",
                "formal_params": [
                    {
                        "param_name": "jsonNode",
                        "param_type": "com.fasterxml.jackson.databind.JsonNode"
                    },
                    {
                        "param_name": "field",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "jsonNode",
                        "target_method_name": "has",
                        "target_params": [
                            "field"
                        ],
                        "usage": "jsonNode.has(field)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.JsonNode",
                        "target_name": "jsonNode",
                        "target_method_name": "get",
                        "target_params": [
                            "field"
                        ],
                        "usage": "jsonNode.get(field)"
                    },
                    {
                        "target_type": "com.fasterxml.jackson.databind.node.MissingNode",
                        "target_name": "MissingNode",
                        "target_method_name": "getInstance",
                        "target_params": [],
                        "usage": "MissingNode.getInstance()"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.IOException",
            "java.util.List",
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonProcessingException",
            "com.fasterxml.jackson.core.type.TypeReference",
            "com.fasterxml.jackson.databind.DeserializationContext",
            "com.fasterxml.jackson.databind.JsonDeserializer",
            "com.fasterxml.jackson.databind.JsonMappingException",
            "com.fasterxml.jackson.databind.JsonNode",
            "com.fasterxml.jackson.databind.ObjectMapper",
            "com.fasterxml.jackson.databind.node.MissingNode",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenMixin": {
        "type": "class",
        "class_name": "UsernamePasswordAuthenticationTokenMixin",
        "class_type": "class",
        "package": "org.springframework.security.jackson2",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [],
        "methodCalls": [],
        "imports": [
            "com.fasterxml.jackson.annotation.JsonAutoDetect",
            "com.fasterxml.jackson.annotation.JsonTypeInfo",
            "com.fasterxml.jackson.databind.annotation.JsonDeserialize"
        ]
    },
    "org.springframework.security.provisioning.GroupManager": {
        "type": "interface",
        "class_name": "GroupManager",
        "class_type": "interface",
        "package": "org.springframework.security.provisioning",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "findAllGroups",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findUsersInGroup",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "createGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "deleteGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "renameGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oldName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "newName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addUserToGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "group",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeUserFromGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "findGroupAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "addGroupAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authority",
                        "param_type": "org.springframework.security.core.GrantedAuthority"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "removeGroupAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authority",
                        "param_type": "org.springframework.security.core.GrantedAuthority"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.List",
            "org.springframework.security.core.GrantedAuthority"
        ]
    },
    "org.springframework.security.provisioning.InMemoryUserDetailsManager": {
        "type": "class",
        "class_name": "InMemoryUserDetailsManager",
        "class_type": "class",
        "package": "org.springframework.security.provisioning",
        "implementz": [
            "org.springframework.security.provisioning.UserDetailsManager,UserDetailsPasswordService"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "users",
                "field_type": "java.util.Map",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationManager",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InMemoryUserDetailsManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InMemoryUserDetailsManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "users",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InMemoryUserDetailsManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InMemoryUserDetailsManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "users",
                        "param_type": "java.util.Properties"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "propertyNames",
                        "target_params": [],
                        "usage": "users.propertyNames()"
                    },
                    {
                        "target_type": null,
                        "target_name": "names",
                        "target_method_name": "hasMoreElements",
                        "target_params": [],
                        "usage": "names.hasMoreElements()"
                    },
                    {
                        "target_type": null,
                        "target_name": "names",
                        "target_method_name": "nextElement",
                        "target_params": [],
                        "usage": "names.nextElement()"
                    },
                    {
                        "target_type": null,
                        "target_name": "editor",
                        "target_method_name": "setAsText",
                        "target_params": [
                            "users"
                        ],
                        "usage": "editor.setAsText(users.getProperty(name))"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "getProperty",
                        "target_params": [
                            "name"
                        ],
                        "usage": "users.getProperty(name)"
                    },
                    {
                        "target_type": null,
                        "target_name": "editor",
                        "target_method_name": "getValue",
                        "target_params": [],
                        "usage": "editor.getValue()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "attr",
                            ""
                        ],
                        "usage": "Assert.notNull(attr,()->\"The entry with username '\"+name+\"' could not be converted to an UserDetails\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUserDetails",
                "return_type": "org.springframework.security.core.userdetails.User",
                "formal_params": [
                    {
                        "param_name": "name",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "attr",
                        "param_type": "org.springframework.security.core.userdetails.memory.UserAttribute"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.memory.UserAttribute",
                        "target_name": "attr",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "attr.getPassword()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.memory.UserAttribute",
                        "target_name": "attr",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "attr.isEnabled()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.memory.UserAttribute",
                        "target_name": "attr",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "attr.getAuthorities()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "!userExists"
                        ],
                        "usage": "Assert.isTrue(!userExists(user.getUsername()),\"user should not exist\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.users.put(user.getUsername().toLowerCase(Locale.ROOT),mutable)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername().toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.users.put(user.getUsername().toLowerCase(Locale.ROOT),newMutableUser(user))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername().toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "deleteUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "remove",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.users.remove(username.toLowerCase(Locale.ROOT))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "username.toLowerCase(Locale.ROOT)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "updateUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "userExists"
                        ],
                        "usage": "Assert.isTrue(userExists(user.getUsername()),\"user should exist\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.users.put(user.getUsername().toLowerCase(Locale.ROOT),mutable)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername().toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "put",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.users.put(user.getUsername().toLowerCase(Locale.ROOT),newMutableUser(user))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername().toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "userExists",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "containsKey",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.users.containsKey(username.toLowerCase(Locale.ROOT))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "username.toLowerCase(Locale.ROOT)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "changePassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oldPassword",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentUser",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "currentUser.getName()"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Changing password for user '%s'\",username))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Changing password for user '%s'\"",
                            "username"
                        ],
                        "usage": "LogMessage.format(\"Changing password for user '%s'\",username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Reauthenticating user '%s' for password change request.\",username))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Reauthenticating user '%s' for password change request"
                        ],
                        "usage": "LogMessage.format(\"Reauthenticating user '%s' for password change request.\",username)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "authenticationManager",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "UsernamePasswordAuthenticationToken"
                        ],
                        "usage": "this.authenticationManager.authenticate(UsernamePasswordAuthenticationToken.unauthenticated(username,oldPassword))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "unauthenticated",
                        "target_params": [
                            "username",
                            "oldPassword"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.unauthenticated(username,oldPassword)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"No authentication manager set"
                        ],
                        "usage": "this.logger.debug(\"No authentication manager set. Password won't be re-checked.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "get",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.users.get(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "state",
                        "target_params": [
                            "user!=null",
                            "\"Current user doesn't exist in database"
                        ],
                        "usage": "Assert.state(user!=null,\"Current user doesn't exist in database.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "setPassword",
                        "target_params": [
                            "newPassword"
                        ],
                        "usage": "user.setPassword(newPassword)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "updatePassword",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "get",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.users.get(username.toLowerCase(Locale.ROOT))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": null,
                        "target_name": "username",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "username.toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": null,
                        "target_name": "mutableUser",
                        "target_method_name": "setPassword",
                        "target_params": [
                            "newPassword"
                        ],
                        "usage": "mutableUser.setPassword(newPassword)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUserByUsername",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Map",
                        "target_name": "users",
                        "target_method_name": "get",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.users.get(username.toLowerCase(Locale.ROOT))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.users"
                    },
                    {
                        "target_type": "java.lang.String",
                        "target_name": "username",
                        "target_method_name": "toLowerCase",
                        "target_params": [
                            "Locale"
                        ],
                        "usage": "username.toLowerCase(Locale.ROOT)"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "user.getPassword()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationManager",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.util.Collection",
            "java.util.Enumeration",
            "java.util.HashMap",
            "java.util.Locale",
            "java.util.Map",
            "java.util.Properties",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.core.log.LogMessage",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.CredentialsContainer",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.security.core.userdetails.User",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsPasswordService",
            "org.springframework.security.core.userdetails.UsernameNotFoundException",
            "org.springframework.security.core.userdetails.memory.UserAttribute",
            "org.springframework.security.core.userdetails.memory.UserAttributeEditor",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.provisioning.JdbcUserDetailsManager": {
        "type": "class",
        "class_name": "JdbcUserDetailsManager",
        "class_type": "class",
        "package": "org.springframework.security.provisioning",
        "implementz": [
            "org.springframework.security.provisioning.UserDetailsManager,GroupManager"
        ],
        "extendz": "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl",
        "fields": [
            {
                "type": "field",
                "field_name": "DEF_CREATE_USER_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_USER_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_UPDATE_USER_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_INSERT_AUTHORITY_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_USER_AUTHORITIES_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_USER_EXISTS_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_CHANGE_PASSWORD_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_FIND_GROUPS_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_FIND_USERS_IN_GROUP_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_INSERT_GROUP_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_FIND_GROUP_ID_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_INSERT_GROUP_AUTHORITY_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_GROUP_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_GROUP_AUTHORITIES_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_GROUP_MEMBERS_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_RENAME_GROUP_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_INSERT_GROUP_MEMBER_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_GROUP_MEMBER_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_GROUP_AUTHORITIES_QUERY_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "DEF_DELETE_GROUP_AUTHORITY_SQL",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "logger",
                "field_type": "org.apache.commons.logging.Log",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContextHolderStrategy",
                "field_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "createUserSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteUserSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "updateUserSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "createAuthoritySql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteUserAuthoritiesSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userExistsSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "changePasswordSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "findAllGroupsSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "findUsersInGroupSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "insertGroupSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "findGroupIdSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "insertGroupAuthoritySql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteGroupSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteGroupAuthoritiesSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteGroupMembersSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "renameGroupSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "insertGroupMemberSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteGroupMemberSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "groupAuthoritiesSql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "deleteGroupAuthoritySql",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "authenticationManager",
                "field_type": "org.springframework.security.authentication.AuthenticationManager",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userCache",
                "field_type": "org.springframework.security.core.userdetails.UserCache",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "userDetailsMapper",
                "field_type": "org.springframework.jdbc.core.RowMapper",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "grantedAuthorityMapper",
                "field_type": "org.springframework.jdbc.core.RowMapper",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "JdbcUserDetailsManager",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "JdbcUserDetailsManager",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "dataSource",
                        "param_type": "javax.sql.DataSource"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "setUserDetailsMapper",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "mapper",
                        "param_type": "org.springframework.jdbc.core.RowMapper"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "mapper",
                            "\"userDetailsMapper cannot be null\""
                        ],
                        "usage": "Assert.notNull(mapper,\"userDetailsMapper cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsMapper"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setGrantedAuthorityMapper",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "mapper",
                        "param_type": "org.springframework.jdbc.core.RowMapper"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "mapper",
                            "\"grantedAuthorityMapper cannot be null\""
                        ],
                        "usage": "Assert.notNull(mapper,\"grantedAuthorityMapper cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.grantedAuthorityMapper"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "initDao",
                "return_type": "void",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "info",
                        "target_params": [
                            "\"No authentication manager set"
                        ],
                        "usage": "this.logger.info(\"No authentication manager set. Reauthentication of users when changing passwords will not be performed.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": null,
                        "target_name": "super",
                        "target_method_name": "initDao",
                        "target_params": [],
                        "usage": "super.initDao()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "loadUsersByUsername",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".query"
                        ],
                        "usage": "getJdbcTemplate().query(getUsersByUsernameQuery(),this.userDetailsMapper,username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userDetailsMapper"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mapToUser",
                "return_type": "org.springframework.security.core.userdetails.UserDetails",
                "formal_params": [
                    {
                        "param_name": "rs",
                        "param_type": "java.sql.ResultSet"
                    },
                    {
                        "param_name": "rowNum",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "1"
                        ],
                        "usage": "rs.getString(1)"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "2"
                        ],
                        "usage": "rs.getString(2)"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "3"
                        ],
                        "usage": "rs.getBoolean(3)"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getMetaData",
                        "target_params": [],
                        "usage": "rs.getMetaData().getColumnCount()"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getMetaData",
                        "target_params": [],
                        "usage": "rs.getMetaData()"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "4"
                        ],
                        "usage": "rs.getBoolean(4)"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "5"
                        ],
                        "usage": "rs.getBoolean(5)"
                    },
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getBoolean",
                        "target_params": [
                            "6"
                        ],
                        "usage": "rs.getBoolean(6)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.createUserSql,(ps)->{ps.setString(1,user.getUsername());ps.setString(2,user.getPassword());ps.setBoolean(3,user.isEnabled());intparamCount=ps.getParameterMetaData().getParameterCount();if(paramCount>3){ps.setBoolean(4,!user.isAccountNonLocked());ps.setBoolean(5,!user.isAccountNonExpired());ps.setBoolean(6,!user.isCredentialsNonExpired());}})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.createUserSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "1",
                            "user"
                        ],
                        "usage": "ps.setString(1,user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "user"
                        ],
                        "usage": "ps.setString(2,user.getPassword())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "user.getPassword()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "3",
                            "user"
                        ],
                        "usage": "ps.setBoolean(3,user.isEnabled())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "getParameterMetaData",
                        "target_params": [],
                        "usage": "ps.getParameterMetaData().getParameterCount()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "getParameterMetaData",
                        "target_params": [],
                        "usage": "ps.getParameterMetaData()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "4",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(4,!user.isAccountNonLocked())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "5",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(5,!user.isAccountNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "6",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(6,!user.isCredentialsNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "updateUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.updateUserSql,(ps)->{ps.setString(1,user.getPassword());ps.setBoolean(2,user.isEnabled());intparamCount=ps.getParameterMetaData().getParameterCount();if(paramCount==3){ps.setString(3,user.getUsername());}else{ps.setBoolean(3,!user.isAccountNonLocked());ps.setBoolean(4,!user.isAccountNonExpired());ps.setBoolean(5,!user.isCredentialsNonExpired());ps.setString(6,user.getUsername());}})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.updateUserSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "1",
                            "user"
                        ],
                        "usage": "ps.setString(1,user.getPassword())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "user.getPassword()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "2",
                            "user"
                        ],
                        "usage": "ps.setBoolean(2,user.isEnabled())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "user.isEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "getParameterMetaData",
                        "target_params": [],
                        "usage": "ps.getParameterMetaData().getParameterCount()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "getParameterMetaData",
                        "target_params": [],
                        "usage": "ps.getParameterMetaData()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "3",
                            "user"
                        ],
                        "usage": "ps.setString(3,user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "3",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(3,!user.isAccountNonLocked())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "user.isAccountNonLocked()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "4",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(4,!user.isAccountNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "user.isAccountNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setBoolean",
                        "target_params": [
                            "5",
                            "!user"
                        ],
                        "usage": "ps.setBoolean(5,!user.isCredentialsNonExpired())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "user.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "6",
                            "user"
                        ],
                        "usage": "ps.setString(6,user.getUsername())"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "user"
                        ],
                        "usage": "this.userCache.removeUserFromCache(user.getUsername())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "insertUserAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.createAuthoritySql,user.getUsername(),auth.getAuthority())"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.createAuthoritySql"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": "auth",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "auth.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "deleteUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteUserSql,username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteUserSql"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.removeUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "deleteUserAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteUserAuthoritiesSql,username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteUserAuthoritiesSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "changePassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oldPassword",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext().getAuthentication()"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "getContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.getContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "currentUser",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "currentUser.getName()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "LogMessage"
                        ],
                        "usage": "this.logger.debug(LogMessage.format(\"Reauthenticating user '%s' for password change request.\",username))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.core.log.LogMessage",
                        "target_name": "LogMessage",
                        "target_method_name": "format",
                        "target_params": [
                            "\"Reauthenticating user '%s' for password change request"
                        ],
                        "usage": "LogMessage.format(\"Reauthenticating user '%s' for password change request.\",username)"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.AuthenticationManager",
                        "target_name": "authenticationManager",
                        "target_method_name": "authenticate",
                        "target_params": [
                            "UsernamePasswordAuthenticationToken"
                        ],
                        "usage": "this.authenticationManager.authenticate(UsernamePasswordAuthenticationToken.unauthenticated(username,oldPassword))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "unauthenticated",
                        "target_params": [
                            "username",
                            "oldPassword"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.unauthenticated(username,oldPassword)"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"No authentication manager set"
                        ],
                        "usage": "this.logger.debug(\"No authentication manager set. Password won't be re-checked.\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Changing password for user '\"+username+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Changing password for user '\"+username+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.changePasswordSql,newPassword,username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.changePasswordSql"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "createEmptyContext",
                        "target_params": [],
                        "usage": "this.securityContextHolderStrategy.createEmptyContext()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": null,
                        "target_name": "context",
                        "target_method_name": "setAuthentication",
                        "target_params": [
                            "authentication"
                        ],
                        "usage": "context.setAuthentication(authentication)"
                    },
                    {
                        "target_type": "org.springframework.security.core.context.SecurityContextHolderStrategy",
                        "target_name": "securityContextHolderStrategy",
                        "target_method_name": "setContext",
                        "target_params": [
                            "context"
                        ],
                        "usage": "this.securityContextHolderStrategy.setContext(context)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.removeUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createNewAuthentication",
                "return_type": "org.springframework.security.core.Authentication",
                "formal_params": [
                    {
                        "param_name": "currentAuth",
                        "param_type": "org.springframework.security.core.Authentication"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "currentAuth",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "currentAuth.getName()"
                    },
                    {
                        "target_type": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
                        "target_name": "UsernamePasswordAuthenticationToken",
                        "target_method_name": "authenticated",
                        "target_params": [
                            "user",
                            "null",
                            "user"
                        ],
                        "usage": "UsernamePasswordAuthenticationToken.authenticated(user,null,user.getAuthorities())"
                    },
                    {
                        "target_type": null,
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": "newAuthentication",
                        "target_method_name": "setDetails",
                        "target_params": [
                            "currentAuth"
                        ],
                        "usage": "newAuthentication.setDetails(currentAuth.getDetails())"
                    },
                    {
                        "target_type": "org.springframework.security.core.Authentication",
                        "target_name": "currentAuth",
                        "target_method_name": "getDetails",
                        "target_params": [],
                        "usage": "currentAuth.getDetails()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "userExists",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".queryForList"
                        ],
                        "usage": "getJdbcTemplate().queryForList(this.userExistsSql,newString[]{username},String.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userExistsSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "users",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "users.size()"
                    },
                    {
                        "target_type": null,
                        "target_name": "users",
                        "target_method_name": "size",
                        "target_params": [],
                        "usage": "users.size()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findAllGroups",
                "return_type": "java.util.List",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".queryForList"
                        ],
                        "usage": "getJdbcTemplate().queryForList(this.findAllGroupsSql,String.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findAllGroupsSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findUsersInGroup",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".queryForList"
                        ],
                        "usage": "getJdbcTemplate().queryForList(this.findUsersInGroupSql,newString[]{groupName},String.class)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findUsersInGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.List"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"authorities cannot be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"authorities cannot be null\")"
                    },
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Creating new group '\"+groupName+\"' with authorities \"+AuthorityUtils"
                        ],
                        "usage": "this.logger.debug(\"Creating new group '\"+groupName+\"' with authorities \"+AuthorityUtils.authorityListToSet(authorities))"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.security.core.authority.AuthorityUtils",
                        "target_name": "AuthorityUtils",
                        "target_method_name": "authorityListToSet",
                        "target_params": [
                            "authorities"
                        ],
                        "usage": "AuthorityUtils.authorityListToSet(authorities)"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.insertGroupSql,groupName)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "a",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "a.getAuthority()"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.insertGroupAuthoritySql,(ps)->{ps.setInt(1,groupId);ps.setString(2,authority);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupAuthoritySql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "groupId"
                        ],
                        "usage": "ps.setInt(1,groupId)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "authority"
                        ],
                        "usage": "ps.setString(2,authority)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "deleteGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Deleting group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Deleting group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "id"
                        ],
                        "usage": "ps.setInt(1,id)"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteGroupMembersSql,groupIdPSS)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupMembersSql"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteGroupAuthoritiesSql,groupIdPSS)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupAuthoritiesSql"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteGroupSql,groupIdPSS)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "renameGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oldName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "newName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Changing group name from '\"+oldName+\"' to '\"+newName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Changing group name from '\"+oldName+\"' to '\"+newName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "oldName",
                            "\"oldName should have text\""
                        ],
                        "usage": "Assert.hasText(oldName,\"oldName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "newName",
                            "\"newName should have text\""
                        ],
                        "usage": "Assert.hasText(newName,\"newName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.renameGroupSql,newName,oldName)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.renameGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addUserToGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Adding user '\"+username+\"' to group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Adding user '\"+username+\"' to group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "username",
                            "\"username should have text\""
                        ],
                        "usage": "Assert.hasText(username,\"username should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.insertGroupMemberSql,(ps)->{ps.setInt(1,id);ps.setString(2,username);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupMemberSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "id"
                        ],
                        "usage": "ps.setInt(1,id)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "username"
                        ],
                        "usage": "ps.setString(2,username)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.removeUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeUserFromGroup",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Removing user '\"+username+\"' to group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Removing user '\"+username+\"' to group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "username",
                            "\"username should have text\""
                        ],
                        "usage": "Assert.hasText(username,\"username should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteGroupMemberSql,(ps)->{ps.setInt(1,id);ps.setString(2,username);})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupMemberSql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "id"
                        ],
                        "usage": "ps.setInt(1,id)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "username"
                        ],
                        "usage": "ps.setString(2,username)"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserCache",
                        "target_name": "userCache",
                        "target_method_name": "removeUserFromCache",
                        "target_params": [
                            "username"
                        ],
                        "usage": "this.userCache.removeUserFromCache(username)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findGroupAuthorities",
                "return_type": "java.util.List",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Loading authorities for group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Loading authorities for group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".query"
                        ],
                        "usage": "getJdbcTemplate().query(this.groupAuthoritiesSql,newString[]{groupName},this.grantedAuthorityMapper)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.groupAuthoritiesSql"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.grantedAuthorityMapper"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "mapToGrantedAuthority",
                "return_type": "org.springframework.security.core.GrantedAuthority",
                "formal_params": [
                    {
                        "param_name": "rs",
                        "param_type": "java.sql.ResultSet"
                    },
                    {
                        "param_name": "rowNum",
                        "param_type": "int"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.sql.ResultSet",
                        "target_name": "rs",
                        "target_method_name": "getString",
                        "target_params": [
                            "3"
                        ],
                        "usage": "rs.getString(3)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "removeGroupAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authority",
                        "param_type": "org.springframework.security.core.GrantedAuthority"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Removing authority '\"+authority+\"' from group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Removing authority '\"+authority+\"' from group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"authority cannot be null\""
                        ],
                        "usage": "Assert.notNull(authority,\"authority cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.deleteGroupAuthoritySql,(ps)->{ps.setInt(1,id);ps.setString(2,authority.getAuthority());})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupAuthoritySql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "id"
                        ],
                        "usage": "ps.setInt(1,id)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "authority"
                        ],
                        "usage": "ps.setString(2,authority.getAuthority())"
                    },
                    {
                        "target_type": "org.springframework.security.core.GrantedAuthority",
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "addGroupAuthority",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "authority",
                        "param_type": "org.springframework.security.core.GrantedAuthority"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.apache.commons.logging.Log",
                        "target_name": "logger",
                        "target_method_name": "debug",
                        "target_params": [
                            "\"Adding authority '\"+authority+\"' to group '\"+groupName+\"'\""
                        ],
                        "usage": "this.logger.debug(\"Adding authority '\"+authority+\"' to group '\"+groupName+\"'\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.logger"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupName",
                            "\"groupName should have text\""
                        ],
                        "usage": "Assert.hasText(groupName,\"groupName should have text\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"authority cannot be null\""
                        ],
                        "usage": "Assert.notNull(authority,\"authority cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".update"
                        ],
                        "usage": "getJdbcTemplate().update(this.insertGroupAuthoritySql,(ps)->{ps.setInt(1,id);ps.setString(2,authority.getAuthority());})"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupAuthoritySql"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setInt",
                        "target_params": [
                            "1",
                            "id"
                        ],
                        "usage": "ps.setInt(1,id)"
                    },
                    {
                        "target_type": null,
                        "target_name": "ps",
                        "target_method_name": "setString",
                        "target_params": [
                            "2",
                            "authority"
                        ],
                        "usage": "ps.setString(2,authority.getAuthority())"
                    },
                    {
                        "target_type": "org.springframework.security.core.GrantedAuthority",
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "findGroupId",
                "return_type": "int",
                "formal_params": [
                    {
                        "param_name": "group",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.provisioning.JdbcUserDetailsManager",
                        "target_name": "this",
                        "target_method_name": "getJdbcTemplate",
                        "target_params": [
                            ".queryForObject"
                        ],
                        "usage": "getJdbcTemplate().queryForObject(this.findGroupIdSql,Integer.class,group)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findGroupIdSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setSecurityContextHolderStrategy",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "securityContextHolderStrategy",
                        "param_type": "org.springframework.security.core.context.SecurityContextHolderStrategy"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "securityContextHolderStrategy",
                            "\"securityContextHolderStrategy cannot be null\""
                        ],
                        "usage": "Assert.notNull(securityContextHolderStrategy,\"securityContextHolderStrategy cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContextHolderStrategy"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setAuthenticationManager",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authenticationManager",
                        "param_type": "org.springframework.security.authentication.AuthenticationManager"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.authenticationManager"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCreateUserSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "createUserSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "createUserSql",
                            "\"createUserSql should have text\""
                        ],
                        "usage": "Assert.hasText(createUserSql,\"createUserSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.createUserSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteUserSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteUserSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteUserSql",
                            "\"deleteUserSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteUserSql,\"deleteUserSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteUserSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUpdateUserSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "updateUserSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "updateUserSql",
                            "\"updateUserSql should have text\""
                        ],
                        "usage": "Assert.hasText(updateUserSql,\"updateUserSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.updateUserSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setCreateAuthoritySql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "createAuthoritySql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "createAuthoritySql",
                            "\"createAuthoritySql should have text\""
                        ],
                        "usage": "Assert.hasText(createAuthoritySql,\"createAuthoritySql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.createAuthoritySql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteUserAuthoritiesSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteUserAuthoritiesSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteUserAuthoritiesSql",
                            "\"deleteUserAuthoritiesSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteUserAuthoritiesSql,\"deleteUserAuthoritiesSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteUserAuthoritiesSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserExistsSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userExistsSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "userExistsSql",
                            "\"userExistsSql should have text\""
                        ],
                        "usage": "Assert.hasText(userExistsSql,\"userExistsSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userExistsSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setChangePasswordSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "changePasswordSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "changePasswordSql",
                            "\"changePasswordSql should have text\""
                        ],
                        "usage": "Assert.hasText(changePasswordSql,\"changePasswordSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.changePasswordSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setFindAllGroupsSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "findAllGroupsSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "findAllGroupsSql",
                            "\"findAllGroupsSql should have text\""
                        ],
                        "usage": "Assert.hasText(findAllGroupsSql,\"findAllGroupsSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findAllGroupsSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setFindUsersInGroupSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "findUsersInGroupSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "findUsersInGroupSql",
                            "\"findUsersInGroupSql should have text\""
                        ],
                        "usage": "Assert.hasText(findUsersInGroupSql,\"findUsersInGroupSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findUsersInGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setInsertGroupSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "insertGroupSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "insertGroupSql",
                            "\"insertGroupSql should have text\""
                        ],
                        "usage": "Assert.hasText(insertGroupSql,\"insertGroupSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setFindGroupIdSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "findGroupIdSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "findGroupIdSql",
                            "\"findGroupIdSql should have text\""
                        ],
                        "usage": "Assert.hasText(findGroupIdSql,\"findGroupIdSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.findGroupIdSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setInsertGroupAuthoritySql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "insertGroupAuthoritySql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "insertGroupAuthoritySql",
                            "\"insertGroupAuthoritySql should have text\""
                        ],
                        "usage": "Assert.hasText(insertGroupAuthoritySql,\"insertGroupAuthoritySql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupAuthoritySql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteGroupSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteGroupSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteGroupSql",
                            "\"deleteGroupSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteGroupSql,\"deleteGroupSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteGroupAuthoritiesSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteGroupAuthoritiesSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteGroupAuthoritiesSql",
                            "\"deleteGroupAuthoritiesSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteGroupAuthoritiesSql,\"deleteGroupAuthoritiesSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupAuthoritiesSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteGroupMembersSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteGroupMembersSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteGroupMembersSql",
                            "\"deleteGroupMembersSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteGroupMembersSql,\"deleteGroupMembersSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupMembersSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setRenameGroupSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "renameGroupSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "renameGroupSql",
                            "\"renameGroupSql should have text\""
                        ],
                        "usage": "Assert.hasText(renameGroupSql,\"renameGroupSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.renameGroupSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setInsertGroupMemberSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "insertGroupMemberSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "insertGroupMemberSql",
                            "\"insertGroupMemberSql should have text\""
                        ],
                        "usage": "Assert.hasText(insertGroupMemberSql,\"insertGroupMemberSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.insertGroupMemberSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteGroupMemberSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteGroupMemberSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteGroupMemberSql",
                            "\"deleteGroupMemberSql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteGroupMemberSql,\"deleteGroupMemberSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupMemberSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setGroupAuthoritiesSql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "groupAuthoritiesSql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "groupAuthoritiesSql",
                            "\"groupAuthoritiesSql should have text\""
                        ],
                        "usage": "Assert.hasText(groupAuthoritiesSql,\"groupAuthoritiesSql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.groupAuthoritiesSql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setDeleteGroupAuthoritySql",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "deleteGroupAuthoritySql",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "deleteGroupAuthoritySql",
                            "\"deleteGroupAuthoritySql should have text\""
                        ],
                        "usage": "Assert.hasText(deleteGroupAuthoritySql,\"deleteGroupAuthoritySql should have text\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.deleteGroupAuthoritySql"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setUserCache",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "userCache",
                        "param_type": "org.springframework.security.core.userdetails.UserCache"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "userCache",
                            "\"userCache cannot be null\""
                        ],
                        "usage": "Assert.notNull(userCache,\"userCache cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.userCache"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "validateUserDetails",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "user"
                        ],
                        "usage": "Assert.hasText(user.getUsername(),\"Username may not be empty or null\")"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "user.getUsername()"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "user.getAuthorities()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "validateAuthorities",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "authorities",
                        "param_type": "java.util.Collection"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authorities",
                            "\"Authorities list must not be null\""
                        ],
                        "usage": "Assert.notNull(authorities,\"Authorities list must not be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "authority",
                            "\"Authorities list contains a null entry\""
                        ],
                        "usage": "Assert.notNull(authority,\"Authorities list contains a null entry\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "authority"
                        ],
                        "usage": "Assert.hasText(authority.getAuthority(),\"getAuthority() method must return a non-empty string\")"
                    },
                    {
                        "target_type": null,
                        "target_name": "authority",
                        "target_method_name": "getAuthority",
                        "target_params": [],
                        "usage": "authority.getAuthority()"
                    }
                ]
            }
        ],
        "methodCalls": [
            "LogFactory.getLog(getClass())",
            "SecurityContextHolder.getContextHolderStrategy()"
        ],
        "imports": [
            "java.sql.ResultSet",
            "java.sql.SQLException",
            "java.util.Collection",
            "java.util.List",
            "javax.sql.DataSource",
            "org.apache.commons.logging.Log",
            "org.apache.commons.logging.LogFactory",
            "org.springframework.context.ApplicationContextException",
            "org.springframework.core.log.LogMessage",
            "org.springframework.dao.IncorrectResultSizeDataAccessException",
            "org.springframework.jdbc.core.PreparedStatementSetter",
            "org.springframework.jdbc.core.RowMapper",
            "org.springframework.security.access.AccessDeniedException",
            "org.springframework.security.authentication.AuthenticationManager",
            "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
            "org.springframework.security.core.Authentication",
            "org.springframework.security.core.AuthenticationException",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.authority.AuthorityUtils",
            "org.springframework.security.core.authority.SimpleGrantedAuthority",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.security.core.context.SecurityContextHolderStrategy",
            "org.springframework.security.core.userdetails.User",
            "org.springframework.security.core.userdetails.UserCache",
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.cache.NullUserCache",
            "org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.provisioning.MutableUser": {
        "type": "class",
        "class_name": "MutableUser",
        "class_type": "class",
        "package": "org.springframework.security.provisioning",
        "implementz": [
            "org.springframework.security.provisioning.MutableUserDetails"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "serialVersionUID",
                "field_type": "long",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "password",
                "field_type": "java.lang.String",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.security.core.userdetails.UserDetails",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MutableUser",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    },
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "user",
                        "target_method_name": "getPassword",
                        "target_params": [],
                        "usage": "user.getPassword()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getPassword",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setPassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.password"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getAuthorities",
                "return_type": "java.util.Collection",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "getAuthorities",
                        "target_params": [],
                        "usage": "this.delegate.getAuthorities()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getUsername",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "getUsername",
                        "target_params": [],
                        "usage": "this.delegate.getUsername()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAccountNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "isAccountNonExpired",
                        "target_params": [],
                        "usage": "this.delegate.isAccountNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isAccountNonLocked",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "isAccountNonLocked",
                        "target_params": [],
                        "usage": "this.delegate.isAccountNonLocked()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isCredentialsNonExpired",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "isCredentialsNonExpired",
                        "target_params": [],
                        "usage": "this.delegate.isCredentialsNonExpired()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "isEnabled",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.core.userdetails.UserDetails",
                        "target_name": "delegate",
                        "target_method_name": "isEnabled",
                        "target_params": [],
                        "usage": "this.delegate.isEnabled()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            }
        ],
        "methodCalls": [
            "SpringSecurityCoreVersion.SERIAL_VERSION_UID"
        ],
        "imports": [
            "java.util.Collection",
            "org.springframework.security.core.GrantedAuthority",
            "org.springframework.security.core.SpringSecurityCoreVersion",
            "org.springframework.security.core.userdetails.UserDetails"
        ]
    },
    "org.springframework.security.provisioning.MutableUserDetails": {
        "type": "interface",
        "class_name": "MutableUserDetails",
        "class_type": "interface",
        "package": "org.springframework.security.provisioning",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "setPassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "password",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.userdetails.UserDetails"
        ]
    },
    "org.springframework.security.provisioning.UserDetailsManager": {
        "type": "interface",
        "class_name": "UserDetailsManager",
        "class_type": "interface",
        "package": "org.springframework.security.provisioning",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "method",
                "method_name": "createUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "updateUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "user",
                        "param_type": "org.springframework.security.core.userdetails.UserDetails"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "deleteUser",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "changePassword",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "oldPassword",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "newPassword",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "userExists",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "username",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.security.core.userdetails.UserDetails",
            "org.springframework.security.core.userdetails.UserDetailsService"
        ]
    },
    "org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor": {
        "type": "class",
        "class_name": "DelegatingSecurityContextSchedulingTaskExecutor",
        "class_type": "class",
        "package": "org.springframework.security.scheduling",
        "implementz": [
            "org.springframework.scheduling.SchedulingTaskExecutor"
        ],
        "extendz": "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextSchedulingTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateSchedulingTaskExecutor",
                        "param_type": "org.springframework.scheduling.SchedulingTaskExecutor"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextSchedulingTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateAsyncTaskExecutor",
                        "param_type": "org.springframework.scheduling.SchedulingTaskExecutor"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "prefersShortLivedTasks",
                "return_type": "boolean",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".prefersShortLivedTasks"
                        ],
                        "usage": "getDelegate().prefersShortLivedTasks()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDelegate",
                "return_type": "org.springframework.scheduling.SchedulingTaskExecutor",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.concurrent.Callable",
            "org.springframework.core.task.AsyncTaskExecutor",
            "org.springframework.scheduling.SchedulingTaskExecutor",
            "org.springframework.security.concurrent.DelegatingSecurityContextCallable",
            "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor"
        ]
    },
    "org.springframework.security.scheduling.DelegatingSecurityContextTaskScheduler": {
        "type": "class",
        "class_name": "DelegatingSecurityContextTaskScheduler",
        "class_type": "class",
        "package": "org.springframework.security.scheduling",
        "implementz": [
            "org.springframework.scheduling.TaskScheduler"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "delegate",
                "field_type": "org.springframework.scheduling.TaskScheduler",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "securityContext",
                "field_type": "org.springframework.security.core.context.SecurityContext",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextTaskScheduler",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateTaskScheduler",
                        "param_type": "org.springframework.scheduling.TaskScheduler"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "delegateTaskScheduler",
                            "\"delegateTaskScheduler cannot be null\""
                        ],
                        "usage": "Assert.notNull(delegateTaskScheduler,\"delegateTaskScheduler cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextTaskScheduler",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.scheduling.TaskScheduler"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "schedule",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "trigger",
                        "param_type": "org.springframework.scheduling.Trigger"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "schedule",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.schedule(wrap(task),trigger)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "schedule",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.util.Date"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "schedule",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.schedule(wrap(task),startTime)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleAtFixedRate",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.util.Date"
                    },
                    {
                        "param_name": "period",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleAtFixedRate",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleAtFixedRate(wrap(task),startTime,period)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleAtFixedRate",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "period",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleAtFixedRate",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleAtFixedRate(wrap(task),period)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleWithFixedDelay",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.util.Date"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleWithFixedDelay",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleWithFixedDelay(wrap(task),startTime,delay)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleWithFixedDelay",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleWithFixedDelay",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleWithFixedDelay(wrap(task),delay)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "schedule",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.time.Instant"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "schedule",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.schedule(wrap(task),startTime)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleAtFixedRate",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.time.Instant"
                    },
                    {
                        "param_name": "period",
                        "param_type": "java.time.Duration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleAtFixedRate",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleAtFixedRate(wrap(task),startTime,period)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleAtFixedRate",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "period",
                        "param_type": "java.time.Duration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleAtFixedRate",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleAtFixedRate(wrap(task),period)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleWithFixedDelay",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "startTime",
                        "param_type": "java.time.Instant"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "java.time.Duration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleWithFixedDelay",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleWithFixedDelay(wrap(task),startTime,delay)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "scheduleWithFixedDelay",
                "return_type": "java.util.concurrent.ScheduledFuture",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    },
                    {
                        "param_name": "delay",
                        "param_type": "java.time.Duration"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "scheduleWithFixedDelay",
                        "target_params": [
                            "wrap"
                        ],
                        "usage": "this.delegate.scheduleWithFixedDelay(wrap(task),delay)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getClock",
                "return_type": "java.time.Clock",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.scheduling.TaskScheduler",
                        "target_name": "delegate",
                        "target_method_name": "getClock",
                        "target_params": [],
                        "usage": "this.delegate.getClock()"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.delegate"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "wrap",
                "return_type": "org.springframework.security.scheduling.Runnable",
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.security.scheduling.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
                        "target_name": "DelegatingSecurityContextRunnable",
                        "target_method_name": "create",
                        "target_params": [
                            "delegate",
                            "securityContext"
                        ],
                        "usage": "DelegatingSecurityContextRunnable.create(delegate,this.securityContext)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.securityContext"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.time.Clock",
            "java.time.Duration",
            "java.time.Instant",
            "java.util.Date",
            "java.util.concurrent.ScheduledFuture",
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.scheduling.Trigger",
            "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor": {
        "type": "class",
        "class_name": "DelegatingSecurityContextAsyncTaskExecutor",
        "class_type": "class",
        "package": "org.springframework.security.task",
        "implementz": [
            "org.springframework.core.task.AsyncTaskExecutor"
        ],
        "extendz": "org.springframework.security.task.DelegatingSecurityContextTaskExecutor",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextAsyncTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateAsyncTaskExecutor",
                        "param_type": "org.springframework.core.task.AsyncTaskExecutor"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextAsyncTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateAsyncTaskExecutor",
                        "param_type": "org.springframework.core.task.AsyncTaskExecutor"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "execute",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.task.Runnable"
                    },
                    {
                        "param_name": "startTimeout",
                        "param_type": "long"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".execute"
                        ],
                        "usage": "getDelegate().execute(wrap(task),startTimeout)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "submit",
                "return_type": "java.util.concurrent.Future",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "org.springframework.security.task.Runnable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".submit"
                        ],
                        "usage": "getDelegate().submit(wrap(task))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "submit",
                "return_type": "java.util.concurrent.Future",
                "formal_params": [
                    {
                        "param_name": "task",
                        "param_type": "java.util.concurrent.Callable"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor",
                        "target_name": "this",
                        "target_method_name": "getDelegate",
                        "target_params": [
                            ".submit"
                        ],
                        "usage": "getDelegate().submit(wrap(task))"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDelegate",
                "return_type": "org.springframework.core.task.AsyncTaskExecutor",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.util.concurrent.Callable",
            "java.util.concurrent.Future",
            "org.springframework.core.task.AsyncTaskExecutor",
            "org.springframework.security.concurrent.DelegatingSecurityContextCallable",
            "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
            "org.springframework.security.core.context.SecurityContext"
        ]
    },
    "org.springframework.security.task.DelegatingSecurityContextTaskExecutor": {
        "type": "class",
        "class_name": "DelegatingSecurityContextTaskExecutor",
        "class_type": "class",
        "package": "org.springframework.security.task",
        "implementz": [
            "org.springframework.core.task.TaskExecutor"
        ],
        "extendz": "org.springframework.security.concurrent.DelegatingSecurityContextExecutor",
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegateTaskExecutor",
                        "param_type": "org.springframework.core.task.TaskExecutor"
                    },
                    {
                        "param_name": "securityContext",
                        "param_type": "org.springframework.security.core.context.SecurityContext"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "DelegatingSecurityContextTaskExecutor",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "delegate",
                        "param_type": "org.springframework.core.task.TaskExecutor"
                    }
                ],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.security.concurrent.DelegatingSecurityContextExecutor",
            "org.springframework.security.concurrent.DelegatingSecurityContextRunnable",
            "org.springframework.security.core.context.SecurityContext",
            "org.springframework.security.core.context.SecurityContextHolder"
        ]
    },
    "org.springframework.security.util.FieldUtils": {
        "type": "class",
        "class_name": "FieldUtils",
        "class_type": "class",
        "package": "org.springframework.security.util",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "FieldUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getField",
                "return_type": "java.lang.reflect.Field",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "fieldName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "clazz",
                            "\"Class required\""
                        ],
                        "usage": "Assert.notNull(clazz,\"Class required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "fieldName",
                            "\"Field name required\""
                        ],
                        "usage": "Assert.hasText(fieldName,\"Field name required\")"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredField",
                        "target_params": [
                            "fieldName"
                        ],
                        "usage": "clazz.getDeclaredField(fieldName)"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "clazz.getSuperclass()"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getSuperclass",
                        "target_params": [],
                        "usage": "clazz.getSuperclass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getFieldValue",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "bean",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "fieldName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "bean",
                            "\"Bean cannot be null\""
                        ],
                        "usage": "Assert.notNull(bean,\"Bean cannot be null\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "fieldName",
                            "\"Field name required\""
                        ],
                        "usage": "Assert.hasText(fieldName,\"Field name required\")"
                    },
                    {
                        "target_type": "org.springframework.util.StringUtils",
                        "target_name": "StringUtils",
                        "target_method_name": "tokenizeToStringArray",
                        "target_params": [
                            "fieldName",
                            "\""
                        ],
                        "usage": "StringUtils.tokenizeToStringArray(fieldName,\".\")"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "bean",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "bean.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "setAccessible",
                        "target_params": [
                            "true"
                        ],
                        "usage": "field.setAccessible(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "get",
                        "target_params": [
                            "value"
                        ],
                        "usage": "field.get(value)"
                    },
                    {
                        "target_type": null,
                        "target_name": "value",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "value.getClass()"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getProtectedFieldValue",
                "return_type": "java.lang.Object",
                "formal_params": [
                    {
                        "param_name": "protectedField",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.util.FieldUtils",
                        "target_name": "FieldUtils",
                        "target_method_name": "getField",
                        "target_params": [
                            "object"
                        ],
                        "usage": "FieldUtils.getField(object.getClass(),protectedField)"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "setAccessible",
                        "target_params": [
                            "true"
                        ],
                        "usage": "field.setAccessible(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "get",
                        "target_params": [
                            "object"
                        ],
                        "usage": "field.get(object)"
                    },
                    {
                        "target_type": "org.springframework.util.ReflectionUtils",
                        "target_name": "ReflectionUtils",
                        "target_method_name": "handleReflectionException",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "ReflectionUtils.handleReflectionException(ex)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "setProtectedFieldValue",
                "return_type": "void",
                "formal_params": [
                    {
                        "param_name": "protectedField",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "newValue",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.util.FieldUtils",
                        "target_name": "FieldUtils",
                        "target_method_name": "getField",
                        "target_params": [
                            "object"
                        ],
                        "usage": "FieldUtils.getField(object.getClass(),protectedField)"
                    },
                    {
                        "target_type": "java.lang.Object",
                        "target_name": "object",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "object.getClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "setAccessible",
                        "target_params": [
                            "true"
                        ],
                        "usage": "field.setAccessible(true)"
                    },
                    {
                        "target_type": null,
                        "target_name": "field",
                        "target_method_name": "set",
                        "target_params": [
                            "object",
                            "newValue"
                        ],
                        "usage": "field.set(object,newValue)"
                    },
                    {
                        "target_type": "org.springframework.util.ReflectionUtils",
                        "target_name": "ReflectionUtils",
                        "target_method_name": "handleReflectionException",
                        "target_params": [
                            "ex"
                        ],
                        "usage": "ReflectionUtils.handleReflectionException(ex)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Field",
            "org.springframework.util.Assert",
            "org.springframework.util.ReflectionUtils",
            "org.springframework.util.StringUtils"
        ]
    },
    "org.springframework.security.util.InMemoryResource": {
        "type": "class",
        "class_name": "InMemoryResource",
        "class_type": "class",
        "package": "org.springframework.security.util",
        "implementz": [],
        "extendz": "org.springframework.core.io.AbstractResource",
        "fields": [
            {
                "type": "field",
                "field_name": "source",
                "field_type": "org.springframework.security.util.byte[]",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "description",
                "field_type": "java.lang.String",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "InMemoryResource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.security.util.byte[]",
                        "target_name": "source",
                        "target_method_name": "getBytes",
                        "target_params": [],
                        "usage": "source.getBytes()"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "InMemoryResource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "org.springframework.security.util.byte[]"
                    }
                ],
                "methodCalls": []
            },
            {
                "type": "constructor",
                "method_name": "InMemoryResource",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "source",
                        "param_type": "org.springframework.security.util.byte[]"
                    },
                    {
                        "param_name": "description",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "source",
                            "\"source cannot be null\""
                        ],
                        "usage": "Assert.notNull(source,\"source cannot be null\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.source"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.description"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getDescription",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.description"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getInputStream",
                "return_type": "java.io.InputStream",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.source"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "equals",
                "return_type": "boolean",
                "formal_params": [
                    {
                        "param_name": "res",
                        "param_type": "java.lang.Object"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.util.Arrays",
                        "target_name": "Arrays",
                        "target_method_name": "equals",
                        "target_params": [
                            "source",
                            ""
                        ],
                        "usage": "Arrays.equals(this.source,((InMemoryResource)res).source)"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.source"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "((InMemoryResource)res).source"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "hashCode",
                "return_type": "int",
                "formal_params": [],
                "methodCalls": []
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.io.ByteArrayInputStream",
            "java.io.InputStream",
            "java.util.Arrays",
            "org.springframework.core.io.AbstractResource",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.util.MethodInvocationUtils": {
        "type": "class",
        "class_name": "MethodInvocationUtils",
        "class_type": "class",
        "package": "org.springframework.security.util",
        "implementz": [],
        "extendz": null,
        "fields": [],
        "methods": [
            {
                "type": "constructor",
                "method_name": "MethodInvocationUtils",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "create",
                "return_type": "org.aopalliance.intercept.MethodInvocation",
                "formal_params": [
                    {
                        "param_name": "object",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "methodName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "object",
                            "\"Object required\""
                        ],
                        "usage": "Assert.notNull(object,\"Object required\")"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "args.length"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "args.length"
                    },
                    {
                        "target_type": null,
                        "target_name": "args[i]",
                        "target_method_name": "getClass",
                        "target_params": [],
                        "usage": "args[i].getClass()"
                    },
                    {
                        "target_type": "org.springframework.aop.support.AopUtils",
                        "target_name": "AopUtils",
                        "target_method_name": "getTargetClass",
                        "target_params": [
                            "object"
                        ],
                        "usage": "AopUtils.getTargetClass(object)"
                    },
                    {
                        "target_type": null,
                        "target_name": "a",
                        "target_method_name": "isProxyTargetClass",
                        "target_params": [],
                        "usage": "a.isProxyTargetClass()"
                    },
                    {
                        "target_type": null,
                        "target_name": "a",
                        "target_method_name": "getProxiedInterfaces",
                        "target_params": [],
                        "usage": "a.getProxiedInterfaces()"
                    },
                    {
                        "target_type": null,
                        "target_name": "possibleInterface",
                        "target_method_name": "getMethod",
                        "target_params": [
                            "methodName",
                            "classArgs"
                        ],
                        "usage": "possibleInterface.getMethod(methodName,classArgs)"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createFromClass",
                "return_type": "org.aopalliance.intercept.MethodInvocation",
                "formal_params": [
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "methodName",
                        "param_type": "java.lang.String"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getDeclaredMethods",
                        "target_params": [],
                        "usage": "clazz.getDeclaredMethods()"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName().equals(methodName)"
                    },
                    {
                        "target_type": null,
                        "target_name": "method",
                        "target_method_name": "getName",
                        "target_params": [],
                        "usage": "method.getName()"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "isTrue",
                        "target_params": [
                            "invocation==null",
                            ""
                        ],
                        "usage": "Assert.isTrue(invocation==null,()->\"The class \"+clazz+\" has more than one method named\"+\" '\"+methodName+\"'\")"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "createFromClass",
                "return_type": "org.aopalliance.intercept.MethodInvocation",
                "formal_params": [
                    {
                        "param_name": "targetObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "clazz",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "methodName",
                        "param_type": "java.lang.String"
                    },
                    {
                        "param_name": "classArgs",
                        "param_type": "java.lang.Class"
                    },
                    {
                        "param_name": "args",
                        "param_type": "org.springframework.security.util.Object[]"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "notNull",
                        "target_params": [
                            "clazz",
                            "\"Class required\""
                        ],
                        "usage": "Assert.notNull(clazz,\"Class required\")"
                    },
                    {
                        "target_type": "org.springframework.util.Assert",
                        "target_name": "Assert",
                        "target_method_name": "hasText",
                        "target_params": [
                            "methodName",
                            "\"MethodName required\""
                        ],
                        "usage": "Assert.hasText(methodName,\"MethodName required\")"
                    },
                    {
                        "target_type": "java.lang.Class",
                        "target_name": "clazz",
                        "target_method_name": "getMethod",
                        "target_params": [
                            "methodName",
                            "classArgs"
                        ],
                        "usage": "clazz.getMethod(methodName,classArgs)"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.Method",
            "org.aopalliance.intercept.MethodInvocation",
            "org.springframework.aop.framework.Advised",
            "org.springframework.aop.support.AopUtils",
            "org.springframework.util.Assert"
        ]
    },
    "org.springframework.security.util.SimpleMethodInvocation": {
        "type": "class",
        "class_name": "SimpleMethodInvocation",
        "class_type": "class",
        "package": "org.springframework.security.util",
        "implementz": [
            "org.aopalliance.intercept.MethodInvocation"
        ],
        "extendz": null,
        "fields": [
            {
                "type": "field",
                "field_name": "method",
                "field_type": "java.lang.reflect.Method",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "arguments",
                "field_type": "org.springframework.security.util.Object[]",
                "methodCalls": []
            },
            {
                "type": "field",
                "field_name": "targetObject",
                "field_type": "java.lang.Object",
                "methodCalls": []
            }
        ],
        "methods": [
            {
                "type": "constructor",
                "method_name": "SimpleMethodInvocation",
                "return_type": null,
                "formal_params": [
                    {
                        "param_name": "targetObject",
                        "param_type": "java.lang.Object"
                    },
                    {
                        "param_name": "method",
                        "param_type": "java.lang.reflect.Method"
                    }
                ],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetObject"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    },
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.arguments"
                    }
                ]
            },
            {
                "type": "constructor",
                "method_name": "SimpleMethodInvocation",
                "return_type": null,
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getArguments",
                "return_type": "org.springframework.security.util.Object[]",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.arguments"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getMethod",
                "return_type": "java.lang.reflect.Method",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "getStaticPart",
                "return_type": "java.lang.reflect.AccessibleObject",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "getThis",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.targetObject"
                    }
                ]
            },
            {
                "type": "method",
                "method_name": "proceed",
                "return_type": "java.lang.Object",
                "formal_params": [],
                "methodCalls": []
            },
            {
                "type": "method",
                "method_name": "toString",
                "return_type": "java.lang.String",
                "formal_params": [],
                "methodCalls": [
                    {
                        "target_type": null,
                        "target_name": null,
                        "target_method_name": null,
                        "target_params": null,
                        "usage": "this.method"
                    }
                ]
            }
        ],
        "methodCalls": [],
        "imports": [
            "java.lang.reflect.AccessibleObject",
            "java.lang.reflect.Method",
            "org.aopalliance.intercept.MethodInvocation"
        ]
    }
}