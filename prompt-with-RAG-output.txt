
running load_class_diagram_and_ast_json ...
class diagram size:  765428
ast json size : 1652466

running get_call_chain_from_llm ...
files considerations response :
 Unfortunately, the provided plantuml code does not contain a method named `SecurityConfig::getAttribute`. However, based on the given plantuml code, I can provide you with a list of classes that are involved in the data flow. Here is the list:

- org.springframework.security.util.FieldUtils 
- org.springframework.core.io.AbstractResource
- org.aopalliance.intercept.MethodInvocation
- org.springframework.util.ReflectionUtils
- org.springframework.util.StringUtils
- org.springframework.util.Assert
- java.lang.Object
- java.io.InputStream
- java.lang.String
- java.lang.Class
- org.springframework.security.util.InMemoryResource
- org.springframework.security.util.MethodInvocationUtils
- org.springframework.security.util.SimpleMethodInvocation
files_list from llm : ['org.springframework.security.util.FieldUtils', 'org.springframework.core.io.AbstractResource', 'org.aopalliance.intercept.MethodInvocation', 'org.springframework.util.ReflectionUtils', 'org.springframework.util.StringUtils', 'org.springframework.util.Assert', 'java.lang.Object', 'java.io.InputStream', 'java.lang.String', 'java.lang.Class', 'org.springframework.security.util.InMemoryResource', 'org.springframework.security.util.MethodInvocationUtils', 'org.springframework.security.util.SimpleMethodInvocation']

running get_call_chain_from_graphdb ...

parent_and_interface_map : {'org.springframework.security.access.RuntimeException': {'org.springframework.security.access.AccessDeniedException': {}}, 'org.springframework.security.access.AccessDeniedException': {'org.springframework.security.access.AuthorizationServiceException': {}, 'org.springframework.security.authorization.AuthorizationDeniedException': {}}, 'org.springframework.security.access.ConfigAttribute': {'org.springframework.security.access.SecurityConfig': {}, 'org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute': {}}, 'org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource': {'org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource': {}, 'org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource': {}, 'org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource': {}}, 'org.springframework.security.access.SecurityConfig': {'org.springframework.security.access.annotation.Jsr250SecurityConfig': {}}, 'org.springframework.security.access.AccessDecisionVoter': {'org.springframework.security.access.annotation.Jsr250Voter': {}, 'org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter': {}, 'org.springframework.security.access.vote.AbstractAclVoter': {}, 'org.springframework.security.access.vote.AuthenticatedVoter': {}, 'org.springframework.security.access.vote.RoleVoter': {}}, 'org.springframework.security.access.annotation.AnnotationMetadataExtractor': {'org.springframework.security.access.annotation.SecuredAnnotationMetadataExtractor': {}}, 'org.springframework.context.ApplicationEvent': {'org.springframework.security.access.event.AbstractAuthorizationEvent': {}, 'org.springframework.security.authentication.event.AbstractAuthenticationEvent': {}, 'org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent': {}, 'org.springframework.security.authorization.event.AuthorizationEvent': {}, 'org.springframework.security.core.context.SecurityContextChangedEvent': {}, 'org.springframework.security.core.session.AbstractSessionEvent': {}}, 'org.springframework.security.access.event.AbstractAuthorizationEvent': {'org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent': {}, 'org.springframework.security.access.event.AuthorizationFailureEvent': {}, 'org.springframework.security.access.event.AuthorizedEvent': {}, 'org.springframework.security.access.event.PublicInvocationEvent': {}}, 'org.springframework.context.ApplicationListener': {'org.springframework.security.access.event.LoggerListener': {}, 'org.springframework.security.authentication.event.LoggerListener': {}, 'org.springframework.security.context.DelegatingApplicationListener': {}}, 'org.springframework.security.access.expression.SecurityExpressionHandler': {'org.springframework.security.access.expression.AbstractSecurityExpressionHandler': {}}, 'org.springframework.security.access.PermissionEvaluator': {'org.springframework.security.access.expression.DenyAllPermissionEvaluator': {}}, 'org.springframework.security.access.expression.SecurityExpressionOperations': {'org.springframework.security.access.expression.SecurityExpressionRoot': {}}, 'org.springframework.security.access.expression.AbstractSecurityExpressionHandler': {'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler': {}}, 'org.springframework.security.access.expression.method.MethodSecurityExpressionHandler': {'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler': {}}, 'org.springframework.security.access.prepost.PrePostInvocationAttributeFactory': {'org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory': {}}, 'org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice': {'org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice': {}}, 'org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice': {'org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice': {}}, 'org.springframework.context.expression.MethodBasedEvaluationContext': {'org.springframework.security.access.expression.method.MethodSecurityEvaluationContext': {}}, 'org.springframework.security.access.expression.SecurityExpressionRoot': {'org.springframework.security.access.expression.method.MethodSecurityExpressionRoot': {}}, 'org.springframework.security.access.expression.method.MethodSecurityExpressionOperations': {'org.springframework.security.access.expression.method.MethodSecurityExpressionRoot': {}}, 'org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute': {'org.springframework.security.access.expression.method.PostInvocationExpressionAttribute': {}, 'org.springframework.security.access.expression.method.PreInvocationExpressionAttribute': {}}, 'org.springframework.security.access.prepost.PostInvocationAttribute': {'org.springframework.security.access.expression.method.PostInvocationExpressionAttribute': {}}, 'org.springframework.security.access.prepost.PreInvocationAttribute': {'org.springframework.security.access.expression.method.PreInvocationExpressionAttribute': {}}, 'org.springframework.security.access.hierarchicalroles.RuntimeException': {'org.springframework.security.access.hierarchicalroles.CycleInRoleHierarchyException': {}}, 'org.springframework.security.access.hierarchicalroles.RoleHierarchy': {'org.springframework.security.access.hierarchicalroles.NullRoleHierarchy': {}, 'org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl': {}}, 'org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper': {'org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper': {}, 'org.springframework.security.core.authority.mapping.NullAuthoritiesMapper': {}}, 'org.springframework.security.access.intercept.InitializingBean,ApplicationEventPublisherAware,MessageSourceAware': {'org.springframework.security.access.intercept.AbstractSecurityInterceptor': {}}, 'org.springframework.security.access.intercept.AuthenticationManager': {'org.springframework.security.access.intercept.NoOpAuthenticationManager': {}}, 'org.springframework.security.access.intercept.AfterInvocationManager,InitializingBean': {'org.springframework.security.access.intercept.AfterInvocationProviderManager': {}}, 'org.springframework.beans.factory.InitializingBean': {'org.springframework.security.access.intercept.MethodInvocationPrivilegeEvaluator': {}}, 'org.springframework.security.access.intercept.RunAsManager': {'org.springframework.security.access.intercept.NullRunAsManager': {}}, 'org.springframework.security.access.intercept.InitializingBean,AuthenticationProvider,MessageSourceAware': {'org.springframework.security.access.intercept.RunAsImplAuthenticationProvider': {}}, 'org.springframework.security.access.intercept.RunAsManager,InitializingBean': {'org.springframework.security.access.intercept.RunAsManagerImpl': {}}, 'org.springframework.security.authentication.AbstractAuthenticationToken': {'org.springframework.security.access.intercept.RunAsUserToken': {}, 'org.springframework.security.authentication.AnonymousAuthenticationToken': {}, 'org.springframework.security.authentication.RememberMeAuthenticationToken': {}, 'org.springframework.security.authentication.TestingAuthenticationToken': {}, 'org.springframework.security.authentication.UsernamePasswordAuthenticationToken': {}, 'org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken': {}}, 'org.springframework.security.access.intercept.AbstractSecurityInterceptor': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor': {}}, 'org.aopalliance.intercept.MethodInterceptor': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor': {}, 'org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor': {}}, 'org.springframework.aop.support.AbstractPointcutAdvisor': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor': {}}, 'org.springframework.beans.factory.BeanFactoryAware': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor': {}}, 'org.springframework.security.access.intercept.aopalliance.StaticMethodMatcherPointcut': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourcePointcut': {}}, 'org.springframework.security.access.intercept.aopalliance.Serializable': {'org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourcePointcut': {}}, 'org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor': {'org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor': {}}, 'org.aopalliance.intercept.MethodInvocation': {'org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter': {}, 'org.springframework.security.util.SimpleMethodInvocation': {}}, 'org.springframework.security.access.method.AbstractMethodSecurityMetadataSource': {'org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource': {}, 'org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource': {}, 'org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource': {}}, 'org.springframework.security.access.method.MethodSecurityMetadataSource': {'org.springframework.security.access.method.AbstractMethodSecurityMetadataSource': {}}, 'org.springframework.beans.factory.BeanClassLoaderAware': {'org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource': {}}, 'org.springframework.security.access.AfterInvocationProvider': {'org.springframework.security.access.prepost.PostInvocationAdviceProvider': {}}, 'org.springframework.security.access.vote.AccessDecisionManager,InitializingBean,MessageSourceAware': {'org.springframework.security.access.vote.AbstractAccessDecisionManager': {}}, 'org.springframework.security.access.vote.AbstractAccessDecisionManager': {'org.springframework.security.access.vote.AffirmativeBased': {}, 'org.springframework.security.access.vote.ConsensusBased': {}, 'org.springframework.security.access.vote.UnanimousBased': {}}, 'org.springframework.security.access.vote.RoleVoter': {'org.springframework.security.access.vote.RoleHierarchyVoter': {}}, 'org.springframework.security.aot.hint.SecurityHintsRegistrar': {'org.springframework.security.aot.hint.AuthorizeReturnObjectCoreHintsRegistrar': {}, 'org.springframework.security.aot.hint.AuthorizeReturnObjectHintsRegistrar': {}, 'org.springframework.security.aot.hint.PrePostAuthorizeExpressionBeanHintsRegistrar': {}, 'org.springframework.security.aot.hint.PrePostAuthorizeHintsRegistrar': {}}, 'org.springframework.aot.hint.RuntimeHintsRegistrar': {'org.springframework.security.aot.hint.CoreSecurityRuntimeHints': {}, 'org.springframework.security.aot.hint.OneTimeTokenRuntimeHints': {}}, 'org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor': {'org.springframework.security.aot.hint.SecurityHintsAotProcessor': {}}, 'org.springframework.security.aot.hint.BeanFactoryInitializationAotContribution': {'org.springframework.security.aot.hint.AuthorizationProxyFactoryAotContribution': {}}, 'org.springframework.security.authentication.Authentication,CredentialsContainer': {'org.springframework.security.authentication.AbstractAuthenticationToken': {}}, 'org.springframework.security.authentication.ReactiveAuthenticationManager,MessageSourceAware': {'org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager': {}}, 'org.springframework.security.authentication.AccountStatusException': {'org.springframework.security.authentication.AccountExpiredException': {}, 'org.springframework.security.authentication.CredentialsExpiredException': {}, 'org.springframework.security.authentication.DisabledException': {}, 'org.springframework.security.authentication.LockedException': {}}, 'org.springframework.security.core.AuthenticationException': {'org.springframework.security.authentication.AccountStatusException': {}, 'org.springframework.security.authentication.AuthenticationCredentialsNotFoundException': {}, 'org.springframework.security.authentication.AuthenticationServiceException': {}, 'org.springframework.security.authentication.BadCredentialsException': {}, 'org.springframework.security.authentication.InsufficientAuthenticationException': {}, 'org.springframework.security.authentication.ProviderNotFoundException': {}, 'org.springframework.security.authentication.ott.InvalidOneTimeTokenException': {}, 'org.springframework.security.authentication.password.CompromisedPasswordException': {}, 'org.springframework.security.core.userdetails.UsernameNotFoundException': {}}, 'org.springframework.security.authentication.UserDetailsChecker,MessageSourceAware': {'org.springframework.security.authentication.AccountStatusUserDetailsChecker': {}}, 'org.springframework.security.authentication.AuthenticationProvider,MessageSourceAware': {'org.springframework.security.authentication.AnonymousAuthenticationProvider': {}}, 'java.io.Serializable': {'org.springframework.security.authentication.AnonymousAuthenticationToken': {}, 'org.springframework.security.core.session.ReactiveSessionInformation': {}, 'org.springframework.security.core.session.SessionInformation': {}}, 'org.springframework.security.authentication.Observation.Context': {'org.springframework.security.authentication.AuthenticationObservationContext': {}}, 'io.micrometer.observation.ObservationConvention': {'org.springframework.security.authentication.AuthenticationObservationConvention': {}, 'org.springframework.security.authorization.AuthorizationObservationConvention': {}}, 'org.springframework.security.authentication.AuthenticationTrustResolver': {'org.springframework.security.authentication.AuthenticationTrustResolverImpl': {}}, 'org.springframework.security.core.userdetails.UserDetailsService': {'org.springframework.security.authentication.CachingUserDetailsService': {}}, 'org.springframework.security.authentication.AuthenticationEventPublisher,ApplicationEventPublisherAware': {'org.springframework.security.authentication.DefaultAuthenticationEventPublisher': {}}, 'org.springframework.security.authentication.ReactiveAuthenticationManager': {'org.springframework.security.authentication.DelegatingReactiveAuthenticationManager': {}, 'org.springframework.security.authentication.ObservationReactiveAuthenticationManager': {}, 'org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter': {}, 'org.springframework.security.authentication.ott.reactive.OneTimeTokenReactiveAuthenticationManager': {}}, 'org.springframework.security.authentication.AuthenticationServiceException': {'org.springframework.security.authentication.InternalAuthenticationServiceException': {}}, 'org.springframework.security.authentication.AuthenticationManager': {'org.springframework.security.authentication.ObservationAuthenticationManager': {}}, 'org.springframework.security.authentication.AuthenticationManager,MessageSourceAware,InitializingBean': {'org.springframework.security.authentication.ProviderManager': {}}, 'org.springframework.security.authentication.AuthenticationEventPublisher': {'org.springframework.security.authentication.NullEventPublisher': {}}, 'org.springframework.security.authentication.AuthenticationProvider,InitializingBean,MessageSourceAware': {'org.springframework.security.authentication.RememberMeAuthenticationProvider': {}}, 'org.springframework.security.authentication.AuthenticationProvider': {'org.springframework.security.authentication.TestingAuthenticationProvider': {}, 'org.springframework.security.authentication.ott.OneTimeTokenAuthenticationProvider': {}}, 'org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager': {'org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager': {}}, 'org.springframework.security.authentication.dao.AuthenticationProvider,InitializingBean,MessageSourceAware': {'org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider': {}}, 'org.springframework.security.authentication.dao.UserDetailsChecker': {'org.springframework.security.authentication.dao.DefaultPreAuthenticationChecks': {}, 'org.springframework.security.authentication.dao.DefaultPostAuthenticationChecks': {}}, 'org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider': {'org.springframework.security.authentication.dao.DaoAuthenticationProvider': {}}, 'org.springframework.security.authentication.event.AbstractAuthenticationEvent': {'org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent': {}, 'org.springframework.security.authentication.event.AuthenticationSuccessEvent': {}, 'org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent': {}, 'org.springframework.security.authentication.event.LogoutSuccessEvent': {}}, 'org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent': {'org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureLockedEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent': {}, 'org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent': {}}, 'org.springframework.security.authentication.jaas.AuthenticationProvider,ApplicationEventPublisherAware,InitializingBean,ApplicationListener': {'org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider': {}}, 'org.springframework.security.authentication.jaas.CallbackHandler': {'org.springframework.security.authentication.jaas.InternalCallbackHandler': {}}, 'org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider': {'org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider': {}, 'org.springframework.security.authentication.jaas.JaasAuthenticationProvider': {}}, 'org.springframework.security.authentication.jaas.LoginExceptionResolver': {'org.springframework.security.authentication.jaas.DefaultLoginExceptionResolver': {}}, 'org.springframework.security.authentication.UsernamePasswordAuthenticationToken': {'org.springframework.security.authentication.jaas.JaasAuthenticationToken': {}}, 'org.springframework.security.core.GrantedAuthority': {'org.springframework.security.authentication.jaas.JaasGrantedAuthority': {}, 'org.springframework.security.core.authority.SimpleGrantedAuthority': {}}, 'org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler': {'org.springframework.security.authentication.jaas.JaasNameCallbackHandler': {}, 'org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler': {}}, 'javax.security.auth.spi.LoginModule': {'org.springframework.security.authentication.jaas.SecurityContextLoginModule': {}}, 'org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent': {'org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent': {}, 'org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent': {}}, 'javax.security.auth.login.Configuration': {'org.springframework.security.authentication.jaas.memory.InMemoryConfiguration': {}}, 'org.springframework.security.authentication.ott.OneTimeToken': {'org.springframework.security.authentication.ott.DefaultOneTimeToken': {}}, 'org.springframework.security.authentication.ott.OneTimeTokenService': {'org.springframework.security.authentication.ott.InMemoryOneTimeTokenService': {}}, 'org.springframework.security.authentication.ott.OneTimeTokenService,DisposableBean,InitializingBean': {'org.springframework.security.authentication.ott.JdbcOneTimeTokenService': {}}, 'org.springframework.security.authentication.ott.Function': {'org.springframework.security.authentication.ott.OneTimeTokenParametersMapper': {}}, 'org.springframework.security.authentication.ott.RowMapper': {'org.springframework.security.authentication.ott.OneTimeTokenRowMapper': {}}, 'org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService': {'org.springframework.security.authentication.ott.reactive.InMemoryReactiveOneTimeTokenService': {}}, 'org.springframework.security.authorization.AuthorizationManager': {'org.springframework.security.authorization.AuthenticatedAuthorizationManager': {}, 'org.springframework.security.authorization.AuthoritiesAuthorizationManager': {}, 'org.springframework.security.authorization.AuthorityAuthorizationManager': {}, 'org.springframework.security.authorization.ObservationAuthorizationManager': {}, 'org.springframework.security.authorization.SingleResultAuthorizationManager': {}, 'org.springframework.security.authorization.method.Jsr250AuthorizationManager': {}, 'org.springframework.security.authorization.method.MethodExpressionAuthorizationManager': {}, 'org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager': {}, 'org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager': {}, 'org.springframework.security.authorization.method.SecuredAuthorizationManager': {}}, 'org.springframework.security.authorization.AbstractAuthorizationStrategy': {'org.springframework.security.authorization.AuthenticatedAuthorizationStrategy': {}, 'org.springframework.security.authorization.AnonymousAuthorizationStrategy': {}, 'org.springframework.security.authorization.RememberMeAuthorizationStrategy': {}}, 'org.springframework.security.authorization.AuthenticatedAuthorizationStrategy': {'org.springframework.security.authorization.FullyAuthenticatedAuthorizationStrategy': {}}, 'org.springframework.security.authorization.ReactiveAuthorizationManager': {'org.springframework.security.authorization.AuthenticatedReactiveAuthorizationManager': {}, 'org.springframework.security.authorization.AuthorityReactiveAuthorizationManager': {}, 'org.springframework.security.authorization.ObservationReactiveAuthorizationManager': {}, 'org.springframework.security.authorization.method.PostAuthorizeReactiveAuthorizationManager': {}, 'org.springframework.security.authorization.method.PreAuthorizeReactiveAuthorizationManager': {}}, 'org.springframework.security.authorization.AuthorizationDecision': {'org.springframework.security.authorization.AuthorityAuthorizationDecision': {}, 'org.springframework.security.authorization.CompositeAuthorizationDecision': {}, 'org.springframework.security.authorization.NotAuthorizationDecision': {}, 'org.springframework.security.authorization.ExpressionAuthorizationDecision': {}, 'org.springframework.security.authorization.method.ExpressionAttributeAuthorizationDecision': {}}, 'org.springframework.security.authorization.AuthorizationResult': {'org.springframework.security.authorization.AuthorizationDecision': {}, 'org.springframework.security.authorization.AuthorizationDeniedException': {}}, 'org.springframework.security.authorization.Observation.Context': {'org.springframework.security.authorization.AuthorizationObservationContext': {}}, 'org.springframework.security.authorization.AuthorizationEventPublisher': {'org.springframework.security.authorization.SpringAuthorizationEventPublisher': {}, 'org.springframework.security.authorization.method.NoOpAuthorizationEventPublisher': {}}, 'org.springframework.security.authorization.event.AuthorizationEvent': {'org.springframework.security.authorization.event.AuthorizationDeniedEvent': {}, 'org.springframework.security.authorization.event.AuthorizationGrantedEvent': {}}, 'org.springframework.security.authorization.method.AuthorizationProxyFactory,Iterable': {'org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory': {}}, 'org.springframework.security.authorization.method.TargetVisitor': {'org.springframework.security.authorization.method.IgnoreValueTypeVisitor': {}, 'org.springframework.security.authorization.method.ClassVisitor': {}, 'org.springframework.security.authorization.method.ContainerTypeVisitor': {}, 'org.springframework.security.authorization.method.ReactiveTypeVisitor': {}}, 'org.springframework.security.authorization.method.AuthorizationAdvisor': {'org.springframework.security.authorization.method.AuthorizationProxyMethodInterceptor': {}, 'org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor': {}, 'org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor': {}, 'org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor': {}, 'org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor': {}, 'org.springframework.security.authorization.method.AuthorizeReturnObjectMethodInterceptor': {}, 'org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor': {}, 'org.springframework.security.authorization.method.PostFilterAuthorizationReactiveMethodInterceptor': {}, 'org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor': {}, 'org.springframework.security.authorization.method.PreFilterAuthorizationReactiveMethodInterceptor': {}}, 'org.springframework.security.authorization.method.StaticMethodMatcherPointcut': {'org.springframework.security.authorization.method.MethodReturnTypePointcut': {}}, 'org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry': {'org.springframework.security.authorization.method.Jsr250AuthorizationManagerRegistry': {}}, 'org.springframework.security.authorization.method.ExpressionAttribute': {'org.springframework.security.authorization.method.PostAuthorizeExpressionAttribute': {}, 'org.springframework.security.authorization.method.PreAuthorizeExpressionAttribute': {}, 'org.springframework.security.authorization.method.PreFilterExpressionAttribute': {}}, 'org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry': {'org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry': {}, 'org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry': {}, 'org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry': {}, 'org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry': {}}, 'org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler': {'org.springframework.security.authorization.method.ReflectiveMethodAuthorizationDeniedHandler': {}, 'org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler': {}}, 'java.util.concurrent.Callable': {'org.springframework.security.concurrent.DelegatingSecurityContextCallable': {}}, 'org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport': {'org.springframework.security.concurrent.DelegatingSecurityContextExecutor': {}}, 'java.util.concurrent.Executor': {'org.springframework.security.concurrent.DelegatingSecurityContextExecutor': {}}, 'org.springframework.security.concurrent.DelegatingSecurityContextExecutor': {'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService': {}, 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor': {}}, 'java.util.concurrent.ExecutorService': {'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService': {}}, 'org.springframework.security.concurrent.Runnable': {'org.springframework.security.concurrent.DelegatingSecurityContextRunnable': {}}, 'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService': {'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService': {}}, 'java.util.concurrent.ScheduledExecutorService': {'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService': {}}, 'org.springframework.security.converter.Converter': {'org.springframework.security.converter.X509PemDecoder': {}, 'org.springframework.security.converter.X509CertificateDecoder': {}}, 'org.springframework.security.core.RuntimeException': {'org.springframework.security.core.AuthenticationException': {}}, 'org.springframework.security.core.Comparable': {'org.springframework.security.core.ComparableVersion': {}}, 'org.springframework.security.core.Item': {'org.springframework.security.core.IntItem': {}, 'org.springframework.security.core.LongItem': {}, 'org.springframework.security.core.BigIntegerItem': {}, 'org.springframework.security.core.StringItem': {}, 'org.springframework.security.core.ListItem': {}}, 'org.springframework.security.core.ArrayList': {'org.springframework.security.core.ListItem': {}}, 'org.springframework.context.support.ResourceBundleMessageSource': {'org.springframework.security.core.SpringSecurityMessageSource': {}}, 'org.springframework.security.core.annotation.SecurityAnnotationScanner': {'org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner': {}}, 'org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner': {'org.springframework.security.core.annotation.ExpressionTemplateSecurityAnnotationScanner': {}, 'org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner': {}}, 'org.springframework.security.core.annotation.GenericConverter': {'org.springframework.security.core.annotation.ClassToStringConverter': {}}, 'org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,MappableAttributesRetriever,InitializingBean': {'org.springframework.security.core.authority.mapping.MapBasedAttributes2GrantedAuthoritiesMapper': {}}, 'org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,InitializingBean': {'org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper': {}}, 'org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper,InitializingBean': {'org.springframework.security.core.authority.mapping.SimpleAuthorityMapper': {}}, 'org.springframework.security.core.authority.mapping.MappableAttributesRetriever': {'org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever': {}}, 'org.springframework.security.core.context.SecurityContextHolderStrategy': {'org.springframework.security.core.context.GlobalSecurityContextHolderStrategy': {}, 'org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy': {}, 'org.springframework.security.core.context.ListeningSecurityContextHolderStrategy': {}, 'org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy': {}}, 'org.springframework.security.core.context.Supplier': {'org.springframework.security.core.context.PublishOnceSupplier': {}}, 'org.springframework.security.core.context.SecurityContextChangedListener': {'org.springframework.security.core.context.ObservationSecurityContextChangedListener': {}}, 'io.micrometer.context.ThreadLocalAccessor': {'org.springframework.security.core.context.ReactiveSecurityContextHolderThreadLocalAccessor': {}, 'org.springframework.security.core.context.SecurityContextHolderThreadLocalAccessor': {}}, 'org.springframework.security.core.context.SecurityContext': {'org.springframework.security.core.context.SecurityContextImpl': {}}, 'org.springframework.security.core.context.SecurityContextImpl': {'org.springframework.security.core.context.TransientSecurityContext': {}}, 'org.springframework.core.ParameterNameDiscoverer': {'org.springframework.security.core.parameters.AnnotationParameterNameDiscoverer': {}}, 'org.springframework.core.PrioritizedParameterNameDiscoverer': {'org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer': {}}, 'org.springframework.security.core.session.ReactiveSessionRegistry': {'org.springframework.security.core.session.InMemoryReactiveSessionRegistry': {}}, 'org.springframework.security.core.session.AbstractSessionEvent': {'org.springframework.security.core.session.SessionCreationEvent': {}, 'org.springframework.security.core.session.SessionDestroyedEvent': {}, 'org.springframework.security.core.session.SessionIdChangedEvent': {}}, 'org.springframework.security.core.session.SessionRegistry,ApplicationListener': {'org.springframework.security.core.session.SessionRegistryImpl': {}}, 'org.springframework.security.core.token.Token': {'org.springframework.security.core.token.DefaultToken': {}}, 'org.springframework.security.core.token.TokenService,InitializingBean': {'org.springframework.security.core.token.KeyBasedPersistenceTokenService': {}}, 'org.springframework.beans.factory.FactoryBean': {'org.springframework.security.core.token.SecureRandomFactoryBean': {}}, 'org.springframework.security.core.userdetails.ReactiveUserDetailsService,ReactiveUserDetailsPasswordService': {'org.springframework.security.core.userdetails.MapReactiveUserDetailsService': {}}, 'org.springframework.security.core.userdetails.UserDetails,CredentialsContainer': {'org.springframework.security.core.userdetails.User': {}}, 'org.springframework.security.core.userdetails.Comparator': {'org.springframework.security.core.userdetails.AuthorityComparator': {}}, 'org.springframework.security.core.userdetails.AuthenticationUserDetailsService': {'org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper': {}}, 'org.springframework.security.core.userdetails.UserCache': {'org.springframework.security.core.userdetails.cache.NullUserCache': {}, 'org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache': {}}, 'org.springframework.jdbc.core.support.JdbcDaoSupport': {'org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl': {}}, 'org.springframework.security.core.userdetails.jdbc.UserDetailsService,MessageSourceAware': {'org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl': {}}, 'java.beans.PropertyEditorSupport': {'org.springframework.security.core.userdetails.memory.UserAttributeEditor': {}}, 'com.fasterxml.jackson.databind.JsonDeserializer': {'org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer': {}, 'org.springframework.security.jackson2.UnmodifiableMapDeserializer': {}, 'org.springframework.security.jackson2.UserDeserializer': {}, 'org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer': {}}, 'com.fasterxml.jackson.databind.module.SimpleModule': {'org.springframework.security.jackson2.CoreJackson2Module': {}}, 'org.springframework.security.jackson2.ObjectMapper.DefaultTypeResolverBuilder': {'org.springframework.security.jackson2.AllowlistTypeResolverBuilder': {}}, 'org.springframework.security.jackson2.TypeIdResolver': {'org.springframework.security.jackson2.AllowlistTypeIdResolver': {}}, 'org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer': {'org.springframework.security.jackson2.UnmodifiableListDeserializer': {}, 'org.springframework.security.jackson2.UnmodifiableSetDeserializer': {}}, 'org.springframework.security.provisioning.UserDetailsManager,UserDetailsPasswordService': {'org.springframework.security.provisioning.InMemoryUserDetailsManager': {}}, 'org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl': {'org.springframework.security.provisioning.JdbcUserDetailsManager': {}}, 'org.springframework.security.provisioning.UserDetailsManager,GroupManager': {'org.springframework.security.provisioning.JdbcUserDetailsManager': {}}, 'org.springframework.security.provisioning.MutableUserDetails': {'org.springframework.security.provisioning.MutableUser': {}}, 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor': {'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor': {}}, 'org.springframework.scheduling.SchedulingTaskExecutor': {'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor': {}}, 'org.springframework.scheduling.TaskScheduler': {'org.springframework.security.scheduling.DelegatingSecurityContextTaskScheduler': {}}, 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor': {'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor': {}}, 'org.springframework.core.task.AsyncTaskExecutor': {'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor': {}}, 'org.springframework.core.task.TaskExecutor': {'org.springframework.security.task.DelegatingSecurityContextTaskExecutor': {}}, 'org.springframework.core.io.AbstractResource': {'org.springframework.security.util.InMemoryResource': {}}}

parent_aggregate_map : {'org.springframework.security.access.RuntimeException': ['org.springframework.security.access.AccessDeniedException', 'org.springframework.security.access.AuthorizationServiceException', 'org.springframework.security.authorization.AuthorizationDeniedException'], 'org.springframework.security.access.AccessDeniedException': ['org.springframework.security.access.AuthorizationServiceException', 'org.springframework.security.authorization.AuthorizationDeniedException'], 'org.springframework.security.access.ConfigAttribute': ['org.springframework.security.access.SecurityConfig', 'org.springframework.security.access.annotation.Jsr250SecurityConfig', 'org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute', 'org.springframework.security.access.expression.method.PostInvocationExpressionAttribute', 'org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'], 'org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource': ['org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource', 'org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource', 'org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource'], 'org.springframework.security.access.SecurityConfig': ['org.springframework.security.access.annotation.Jsr250SecurityConfig'], 'org.springframework.security.access.AccessDecisionVoter': ['org.springframework.security.access.annotation.Jsr250Voter', 'org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter', 'org.springframework.security.access.vote.AbstractAclVoter', 'org.springframework.security.access.vote.AuthenticatedVoter', 'org.springframework.security.access.vote.RoleVoter', 'org.springframework.security.access.vote.RoleHierarchyVoter'], 'org.springframework.security.access.annotation.AnnotationMetadataExtractor': ['org.springframework.security.access.annotation.SecuredAnnotationMetadataExtractor'], 'org.springframework.context.ApplicationEvent': ['org.springframework.security.access.event.AbstractAuthorizationEvent', 'org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent', 'org.springframework.security.access.event.AuthorizationFailureEvent', 'org.springframework.security.access.event.AuthorizedEvent', 'org.springframework.security.access.event.PublicInvocationEvent', 'org.springframework.security.authentication.event.AbstractAuthenticationEvent', 'org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent', 'org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent', 'org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent', 'org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureLockedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent', 'org.springframework.security.authentication.event.AuthenticationSuccessEvent', 'org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent', 'org.springframework.security.authentication.event.LogoutSuccessEvent', 'org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent', 'org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent', 'org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent', 'org.springframework.security.authorization.event.AuthorizationEvent', 'org.springframework.security.authorization.event.AuthorizationDeniedEvent', 'org.springframework.security.authorization.event.AuthorizationGrantedEvent', 'org.springframework.security.core.context.SecurityContextChangedEvent', 'org.springframework.security.core.session.AbstractSessionEvent', 'org.springframework.security.core.session.SessionCreationEvent', 'org.springframework.security.core.session.SessionDestroyedEvent', 'org.springframework.security.core.session.SessionIdChangedEvent'], 'org.springframework.security.access.event.AbstractAuthorizationEvent': ['org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent', 'org.springframework.security.access.event.AuthorizationFailureEvent', 'org.springframework.security.access.event.AuthorizedEvent', 'org.springframework.security.access.event.PublicInvocationEvent'], 'org.springframework.context.ApplicationListener': ['org.springframework.security.access.event.LoggerListener', 'org.springframework.security.authentication.event.LoggerListener', 'org.springframework.security.context.DelegatingApplicationListener'], 'org.springframework.security.access.expression.SecurityExpressionHandler': ['org.springframework.security.access.expression.AbstractSecurityExpressionHandler', 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler'], 'org.springframework.security.access.PermissionEvaluator': ['org.springframework.security.access.expression.DenyAllPermissionEvaluator'], 'org.springframework.security.access.expression.SecurityExpressionOperations': ['org.springframework.security.access.expression.SecurityExpressionRoot', 'org.springframework.security.access.expression.method.MethodSecurityExpressionRoot'], 'org.springframework.security.access.expression.AbstractSecurityExpressionHandler': ['org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler'], 'org.springframework.security.access.expression.method.MethodSecurityExpressionHandler': ['org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler'], 'org.springframework.security.access.prepost.PrePostInvocationAttributeFactory': ['org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory'], 'org.springframework.security.access.prepost.PostInvocationAuthorizationAdvice': ['org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice'], 'org.springframework.security.access.prepost.PreInvocationAuthorizationAdvice': ['org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice'], 'org.springframework.context.expression.MethodBasedEvaluationContext': ['org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'], 'org.springframework.security.access.expression.SecurityExpressionRoot': ['org.springframework.security.access.expression.method.MethodSecurityExpressionRoot'], 'org.springframework.security.access.expression.method.MethodSecurityExpressionOperations': ['org.springframework.security.access.expression.method.MethodSecurityExpressionRoot'], 'org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute': ['org.springframework.security.access.expression.method.PostInvocationExpressionAttribute', 'org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'], 'org.springframework.security.access.prepost.PostInvocationAttribute': ['org.springframework.security.access.expression.method.PostInvocationExpressionAttribute'], 'org.springframework.security.access.prepost.PreInvocationAttribute': ['org.springframework.security.access.expression.method.PreInvocationExpressionAttribute'], 'org.springframework.security.access.hierarchicalroles.RuntimeException': ['org.springframework.security.access.hierarchicalroles.CycleInRoleHierarchyException'], 'org.springframework.security.access.hierarchicalroles.RoleHierarchy': ['org.springframework.security.access.hierarchicalroles.NullRoleHierarchy', 'org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl'], 'org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper': ['org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper', 'org.springframework.security.core.authority.mapping.NullAuthoritiesMapper'], 'org.springframework.security.access.intercept.InitializingBean,ApplicationEventPublisherAware,MessageSourceAware': ['org.springframework.security.access.intercept.AbstractSecurityInterceptor', 'org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor', 'org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'], 'org.springframework.security.access.intercept.AuthenticationManager': ['org.springframework.security.access.intercept.NoOpAuthenticationManager'], 'org.springframework.security.access.intercept.AfterInvocationManager,InitializingBean': ['org.springframework.security.access.intercept.AfterInvocationProviderManager'], 'org.springframework.beans.factory.InitializingBean': ['org.springframework.security.access.intercept.MethodInvocationPrivilegeEvaluator'], 'org.springframework.security.access.intercept.RunAsManager': ['org.springframework.security.access.intercept.NullRunAsManager'], 'org.springframework.security.access.intercept.InitializingBean,AuthenticationProvider,MessageSourceAware': ['org.springframework.security.access.intercept.RunAsImplAuthenticationProvider'], 'org.springframework.security.access.intercept.RunAsManager,InitializingBean': ['org.springframework.security.access.intercept.RunAsManagerImpl'], 'org.springframework.security.authentication.AbstractAuthenticationToken': ['org.springframework.security.access.intercept.RunAsUserToken', 'org.springframework.security.authentication.AnonymousAuthenticationToken', 'org.springframework.security.authentication.RememberMeAuthenticationToken', 'org.springframework.security.authentication.TestingAuthenticationToken', 'org.springframework.security.authentication.UsernamePasswordAuthenticationToken', 'org.springframework.security.authentication.jaas.JaasAuthenticationToken', 'org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken'], 'org.springframework.security.access.intercept.AbstractSecurityInterceptor': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor', 'org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'], 'org.aopalliance.intercept.MethodInterceptor': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor', 'org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor', 'org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor'], 'org.springframework.aop.support.AbstractPointcutAdvisor': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor'], 'org.springframework.beans.factory.BeanFactoryAware': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor'], 'org.springframework.security.access.intercept.aopalliance.StaticMethodMatcherPointcut': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourcePointcut'], 'org.springframework.security.access.intercept.aopalliance.Serializable': ['org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourcePointcut'], 'org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor': ['org.springframework.security.access.intercept.aspectj.AspectJMethodSecurityInterceptor'], 'org.aopalliance.intercept.MethodInvocation': ['org.springframework.security.access.intercept.aspectj.MethodInvocationAdapter', 'org.springframework.security.util.SimpleMethodInvocation'], 'org.springframework.security.access.method.AbstractMethodSecurityMetadataSource': ['org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource', 'org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource', 'org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource', 'org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource', 'org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource', 'org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource'], 'org.springframework.security.access.method.MethodSecurityMetadataSource': ['org.springframework.security.access.method.AbstractMethodSecurityMetadataSource', 'org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource', 'org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource', 'org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource', 'org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource', 'org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource', 'org.springframework.security.access.prepost.PrePostAnnotationSecurityMetadataSource'], 'org.springframework.beans.factory.BeanClassLoaderAware': ['org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource'], 'org.springframework.security.access.AfterInvocationProvider': ['org.springframework.security.access.prepost.PostInvocationAdviceProvider'], 'org.springframework.security.access.vote.AccessDecisionManager,InitializingBean,MessageSourceAware': ['org.springframework.security.access.vote.AbstractAccessDecisionManager', 'org.springframework.security.access.vote.AffirmativeBased', 'org.springframework.security.access.vote.ConsensusBased', 'org.springframework.security.access.vote.UnanimousBased'], 'org.springframework.security.access.vote.AbstractAccessDecisionManager': ['org.springframework.security.access.vote.AffirmativeBased', 'org.springframework.security.access.vote.ConsensusBased', 'org.springframework.security.access.vote.UnanimousBased'], 'org.springframework.security.access.vote.RoleVoter': ['org.springframework.security.access.vote.RoleHierarchyVoter'], 'org.springframework.security.aot.hint.SecurityHintsRegistrar': ['org.springframework.security.aot.hint.AuthorizeReturnObjectCoreHintsRegistrar', 'org.springframework.security.aot.hint.AuthorizeReturnObjectHintsRegistrar', 'org.springframework.security.aot.hint.PrePostAuthorizeExpressionBeanHintsRegistrar', 'org.springframework.security.aot.hint.PrePostAuthorizeHintsRegistrar'], 'org.springframework.aot.hint.RuntimeHintsRegistrar': ['org.springframework.security.aot.hint.CoreSecurityRuntimeHints', 'org.springframework.security.aot.hint.OneTimeTokenRuntimeHints'], 'org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor': ['org.springframework.security.aot.hint.SecurityHintsAotProcessor'], 'org.springframework.security.aot.hint.BeanFactoryInitializationAotContribution': ['org.springframework.security.aot.hint.AuthorizationProxyFactoryAotContribution'], 'org.springframework.security.authentication.Authentication,CredentialsContainer': ['org.springframework.security.authentication.AbstractAuthenticationToken', 'org.springframework.security.access.intercept.RunAsUserToken', 'org.springframework.security.authentication.AnonymousAuthenticationToken', 'org.springframework.security.authentication.RememberMeAuthenticationToken', 'org.springframework.security.authentication.TestingAuthenticationToken', 'org.springframework.security.authentication.UsernamePasswordAuthenticationToken', 'org.springframework.security.authentication.jaas.JaasAuthenticationToken', 'org.springframework.security.authentication.ott.OneTimeTokenAuthenticationToken'], 'org.springframework.security.authentication.ReactiveAuthenticationManager,MessageSourceAware': ['org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager', 'org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'], 'org.springframework.security.authentication.AccountStatusException': ['org.springframework.security.authentication.AccountExpiredException', 'org.springframework.security.authentication.CredentialsExpiredException', 'org.springframework.security.authentication.DisabledException', 'org.springframework.security.authentication.LockedException'], 'org.springframework.security.core.AuthenticationException': ['org.springframework.security.authentication.AccountStatusException', 'org.springframework.security.authentication.AccountExpiredException', 'org.springframework.security.authentication.CredentialsExpiredException', 'org.springframework.security.authentication.DisabledException', 'org.springframework.security.authentication.LockedException', 'org.springframework.security.authentication.AuthenticationCredentialsNotFoundException', 'org.springframework.security.authentication.AuthenticationServiceException', 'org.springframework.security.authentication.InternalAuthenticationServiceException', 'org.springframework.security.authentication.BadCredentialsException', 'org.springframework.security.authentication.InsufficientAuthenticationException', 'org.springframework.security.authentication.ProviderNotFoundException', 'org.springframework.security.authentication.ott.InvalidOneTimeTokenException', 'org.springframework.security.authentication.password.CompromisedPasswordException', 'org.springframework.security.core.userdetails.UsernameNotFoundException'], 'org.springframework.security.authentication.UserDetailsChecker,MessageSourceAware': ['org.springframework.security.authentication.AccountStatusUserDetailsChecker'], 'org.springframework.security.authentication.AuthenticationProvider,MessageSourceAware': ['org.springframework.security.authentication.AnonymousAuthenticationProvider'], 'java.io.Serializable': ['org.springframework.security.authentication.AnonymousAuthenticationToken', 'org.springframework.security.core.session.ReactiveSessionInformation', 'org.springframework.security.core.session.SessionInformation'], 'org.springframework.security.authentication.Observation.Context': ['org.springframework.security.authentication.AuthenticationObservationContext'], 'io.micrometer.observation.ObservationConvention': ['org.springframework.security.authentication.AuthenticationObservationConvention', 'org.springframework.security.authorization.AuthorizationObservationConvention'], 'org.springframework.security.authentication.AuthenticationTrustResolver': ['org.springframework.security.authentication.AuthenticationTrustResolverImpl'], 'org.springframework.security.core.userdetails.UserDetailsService': ['org.springframework.security.authentication.CachingUserDetailsService'], 'org.springframework.security.authentication.AuthenticationEventPublisher,ApplicationEventPublisherAware': ['org.springframework.security.authentication.DefaultAuthenticationEventPublisher'], 'org.springframework.security.authentication.ReactiveAuthenticationManager': ['org.springframework.security.authentication.DelegatingReactiveAuthenticationManager', 'org.springframework.security.authentication.ObservationReactiveAuthenticationManager', 'org.springframework.security.authentication.ReactiveAuthenticationManagerAdapter', 'org.springframework.security.authentication.ott.reactive.OneTimeTokenReactiveAuthenticationManager'], 'org.springframework.security.authentication.AuthenticationServiceException': ['org.springframework.security.authentication.InternalAuthenticationServiceException'], 'org.springframework.security.authentication.AuthenticationManager': ['org.springframework.security.authentication.ObservationAuthenticationManager'], 'org.springframework.security.authentication.AuthenticationManager,MessageSourceAware,InitializingBean': ['org.springframework.security.authentication.ProviderManager'], 'org.springframework.security.authentication.AuthenticationEventPublisher': ['org.springframework.security.authentication.NullEventPublisher'], 'org.springframework.security.authentication.AuthenticationProvider,InitializingBean,MessageSourceAware': ['org.springframework.security.authentication.RememberMeAuthenticationProvider'], 'org.springframework.security.authentication.AuthenticationProvider': ['org.springframework.security.authentication.TestingAuthenticationProvider', 'org.springframework.security.authentication.ott.OneTimeTokenAuthenticationProvider'], 'org.springframework.security.authentication.AbstractUserDetailsReactiveAuthenticationManager': ['org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'], 'org.springframework.security.authentication.dao.AuthenticationProvider,InitializingBean,MessageSourceAware': ['org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider', 'org.springframework.security.authentication.dao.DaoAuthenticationProvider'], 'org.springframework.security.authentication.dao.UserDetailsChecker': ['org.springframework.security.authentication.dao.DefaultPreAuthenticationChecks', 'org.springframework.security.authentication.dao.DefaultPostAuthenticationChecks'], 'org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider': ['org.springframework.security.authentication.dao.DaoAuthenticationProvider'], 'org.springframework.security.authentication.event.AbstractAuthenticationEvent': ['org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent', 'org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent', 'org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent', 'org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureLockedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent', 'org.springframework.security.authentication.event.AuthenticationSuccessEvent', 'org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent', 'org.springframework.security.authentication.event.LogoutSuccessEvent'], 'org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent': ['org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent', 'org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent', 'org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent', 'org.springframework.security.authentication.event.AuthenticationFailureLockedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent', 'org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent', 'org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'], 'org.springframework.security.authentication.jaas.AuthenticationProvider,ApplicationEventPublisherAware,InitializingBean,ApplicationListener': ['org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider', 'org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider', 'org.springframework.security.authentication.jaas.JaasAuthenticationProvider'], 'org.springframework.security.authentication.jaas.CallbackHandler': ['org.springframework.security.authentication.jaas.InternalCallbackHandler'], 'org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider': ['org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider', 'org.springframework.security.authentication.jaas.JaasAuthenticationProvider'], 'org.springframework.security.authentication.jaas.LoginExceptionResolver': ['org.springframework.security.authentication.jaas.DefaultLoginExceptionResolver'], 'org.springframework.security.authentication.UsernamePasswordAuthenticationToken': ['org.springframework.security.authentication.jaas.JaasAuthenticationToken'], 'org.springframework.security.core.GrantedAuthority': ['org.springframework.security.authentication.jaas.JaasGrantedAuthority', 'org.springframework.security.core.authority.SimpleGrantedAuthority'], 'org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler': ['org.springframework.security.authentication.jaas.JaasNameCallbackHandler', 'org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'], 'javax.security.auth.spi.LoginModule': ['org.springframework.security.authentication.jaas.SecurityContextLoginModule'], 'org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent': ['org.springframework.security.authentication.jaas.event.JaasAuthenticationFailedEvent', 'org.springframework.security.authentication.jaas.event.JaasAuthenticationSuccessEvent'], 'javax.security.auth.login.Configuration': ['org.springframework.security.authentication.jaas.memory.InMemoryConfiguration'], 'org.springframework.security.authentication.ott.OneTimeToken': ['org.springframework.security.authentication.ott.DefaultOneTimeToken'], 'org.springframework.security.authentication.ott.OneTimeTokenService': ['org.springframework.security.authentication.ott.InMemoryOneTimeTokenService'], 'org.springframework.security.authentication.ott.OneTimeTokenService,DisposableBean,InitializingBean': ['org.springframework.security.authentication.ott.JdbcOneTimeTokenService'], 'org.springframework.security.authentication.ott.Function': ['org.springframework.security.authentication.ott.OneTimeTokenParametersMapper'], 'org.springframework.security.authentication.ott.RowMapper': ['org.springframework.security.authentication.ott.OneTimeTokenRowMapper'], 'org.springframework.security.authentication.ott.reactive.ReactiveOneTimeTokenService': ['org.springframework.security.authentication.ott.reactive.InMemoryReactiveOneTimeTokenService'], 'org.springframework.security.authorization.AuthorizationManager': ['org.springframework.security.authorization.AuthenticatedAuthorizationManager', 'org.springframework.security.authorization.AuthoritiesAuthorizationManager', 'org.springframework.security.authorization.AuthorityAuthorizationManager', 'org.springframework.security.authorization.ObservationAuthorizationManager', 'org.springframework.security.authorization.SingleResultAuthorizationManager', 'org.springframework.security.authorization.method.Jsr250AuthorizationManager', 'org.springframework.security.authorization.method.MethodExpressionAuthorizationManager', 'org.springframework.security.authorization.method.PostAuthorizeAuthorizationManager', 'org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager', 'org.springframework.security.authorization.method.SecuredAuthorizationManager'], 'org.springframework.security.authorization.AbstractAuthorizationStrategy': ['org.springframework.security.authorization.AuthenticatedAuthorizationStrategy', 'org.springframework.security.authorization.FullyAuthenticatedAuthorizationStrategy', 'org.springframework.security.authorization.AnonymousAuthorizationStrategy', 'org.springframework.security.authorization.RememberMeAuthorizationStrategy'], 'org.springframework.security.authorization.AuthenticatedAuthorizationStrategy': ['org.springframework.security.authorization.FullyAuthenticatedAuthorizationStrategy'], 'org.springframework.security.authorization.ReactiveAuthorizationManager': ['org.springframework.security.authorization.AuthenticatedReactiveAuthorizationManager', 'org.springframework.security.authorization.AuthorityReactiveAuthorizationManager', 'org.springframework.security.authorization.ObservationReactiveAuthorizationManager', 'org.springframework.security.authorization.method.PostAuthorizeReactiveAuthorizationManager', 'org.springframework.security.authorization.method.PreAuthorizeReactiveAuthorizationManager'], 'org.springframework.security.authorization.AuthorizationDecision': ['org.springframework.security.authorization.AuthorityAuthorizationDecision', 'org.springframework.security.authorization.CompositeAuthorizationDecision', 'org.springframework.security.authorization.NotAuthorizationDecision', 'org.springframework.security.authorization.ExpressionAuthorizationDecision', 'org.springframework.security.authorization.method.ExpressionAttributeAuthorizationDecision'], 'org.springframework.security.authorization.AuthorizationResult': ['org.springframework.security.authorization.AuthorizationDecision', 'org.springframework.security.authorization.AuthorityAuthorizationDecision', 'org.springframework.security.authorization.CompositeAuthorizationDecision', 'org.springframework.security.authorization.NotAuthorizationDecision', 'org.springframework.security.authorization.ExpressionAuthorizationDecision', 'org.springframework.security.authorization.method.ExpressionAttributeAuthorizationDecision', 'org.springframework.security.authorization.AuthorizationDeniedException'], 'org.springframework.security.authorization.Observation.Context': ['org.springframework.security.authorization.AuthorizationObservationContext'], 'org.springframework.security.authorization.AuthorizationEventPublisher': ['org.springframework.security.authorization.SpringAuthorizationEventPublisher', 'org.springframework.security.authorization.method.NoOpAuthorizationEventPublisher'], 'org.springframework.security.authorization.event.AuthorizationEvent': ['org.springframework.security.authorization.event.AuthorizationDeniedEvent', 'org.springframework.security.authorization.event.AuthorizationGrantedEvent'], 'org.springframework.security.authorization.method.AuthorizationProxyFactory,Iterable': ['org.springframework.security.authorization.method.AuthorizationAdvisorProxyFactory'], 'org.springframework.security.authorization.method.TargetVisitor': ['org.springframework.security.authorization.method.IgnoreValueTypeVisitor', 'org.springframework.security.authorization.method.ClassVisitor', 'org.springframework.security.authorization.method.ContainerTypeVisitor', 'org.springframework.security.authorization.method.ReactiveTypeVisitor'], 'org.springframework.security.authorization.method.AuthorizationAdvisor': ['org.springframework.security.authorization.method.AuthorizationProxyMethodInterceptor', 'org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor', 'org.springframework.security.authorization.method.AuthorizationManagerAfterReactiveMethodInterceptor', 'org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor', 'org.springframework.security.authorization.method.AuthorizationManagerBeforeReactiveMethodInterceptor', 'org.springframework.security.authorization.method.AuthorizeReturnObjectMethodInterceptor', 'org.springframework.security.authorization.method.PostFilterAuthorizationMethodInterceptor', 'org.springframework.security.authorization.method.PostFilterAuthorizationReactiveMethodInterceptor', 'org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor', 'org.springframework.security.authorization.method.PreFilterAuthorizationReactiveMethodInterceptor'], 'org.springframework.security.authorization.method.StaticMethodMatcherPointcut': ['org.springframework.security.authorization.method.MethodReturnTypePointcut'], 'org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry': ['org.springframework.security.authorization.method.Jsr250AuthorizationManagerRegistry'], 'org.springframework.security.authorization.method.ExpressionAttribute': ['org.springframework.security.authorization.method.PostAuthorizeExpressionAttribute', 'org.springframework.security.authorization.method.PreAuthorizeExpressionAttribute', 'org.springframework.security.authorization.method.PreFilterExpressionAttribute'], 'org.springframework.security.authorization.method.AbstractExpressionAttributeRegistry': ['org.springframework.security.authorization.method.PostAuthorizeExpressionAttributeRegistry', 'org.springframework.security.authorization.method.PostFilterExpressionAttributeRegistry', 'org.springframework.security.authorization.method.PreAuthorizeExpressionAttributeRegistry', 'org.springframework.security.authorization.method.PreFilterExpressionAttributeRegistry'], 'org.springframework.security.authorization.method.MethodAuthorizationDeniedHandler': ['org.springframework.security.authorization.method.ReflectiveMethodAuthorizationDeniedHandler', 'org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler'], 'java.util.concurrent.Callable': ['org.springframework.security.concurrent.DelegatingSecurityContextCallable'], 'org.springframework.security.concurrent.AbstractDelegatingSecurityContextSupport': ['org.springframework.security.concurrent.DelegatingSecurityContextExecutor', 'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService', 'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService', 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor', 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'java.util.concurrent.Executor': ['org.springframework.security.concurrent.DelegatingSecurityContextExecutor', 'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService', 'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService', 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor', 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.security.concurrent.DelegatingSecurityContextExecutor': ['org.springframework.security.concurrent.DelegatingSecurityContextExecutorService', 'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService', 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor', 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'java.util.concurrent.ExecutorService': ['org.springframework.security.concurrent.DelegatingSecurityContextExecutorService', 'org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService'], 'org.springframework.security.concurrent.Runnable': ['org.springframework.security.concurrent.DelegatingSecurityContextRunnable'], 'org.springframework.security.concurrent.DelegatingSecurityContextExecutorService': ['org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService'], 'java.util.concurrent.ScheduledExecutorService': ['org.springframework.security.concurrent.DelegatingSecurityContextScheduledExecutorService'], 'org.springframework.security.converter.Converter': ['org.springframework.security.converter.X509PemDecoder', 'org.springframework.security.converter.X509CertificateDecoder'], 'org.springframework.security.core.RuntimeException': ['org.springframework.security.core.AuthenticationException', 'org.springframework.security.authentication.AccountStatusException', 'org.springframework.security.authentication.AccountExpiredException', 'org.springframework.security.authentication.CredentialsExpiredException', 'org.springframework.security.authentication.DisabledException', 'org.springframework.security.authentication.LockedException', 'org.springframework.security.authentication.AuthenticationCredentialsNotFoundException', 'org.springframework.security.authentication.AuthenticationServiceException', 'org.springframework.security.authentication.InternalAuthenticationServiceException', 'org.springframework.security.authentication.BadCredentialsException', 'org.springframework.security.authentication.InsufficientAuthenticationException', 'org.springframework.security.authentication.ProviderNotFoundException', 'org.springframework.security.authentication.ott.InvalidOneTimeTokenException', 'org.springframework.security.authentication.password.CompromisedPasswordException', 'org.springframework.security.core.userdetails.UsernameNotFoundException'], 'org.springframework.security.core.Comparable': ['org.springframework.security.core.ComparableVersion'], 'org.springframework.security.core.Item': ['org.springframework.security.core.IntItem', 'org.springframework.security.core.LongItem', 'org.springframework.security.core.BigIntegerItem', 'org.springframework.security.core.StringItem', 'org.springframework.security.core.ListItem'], 'org.springframework.security.core.ArrayList': ['org.springframework.security.core.ListItem'], 'org.springframework.context.support.ResourceBundleMessageSource': ['org.springframework.security.core.SpringSecurityMessageSource'], 'org.springframework.security.core.annotation.SecurityAnnotationScanner': ['org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner', 'org.springframework.security.core.annotation.ExpressionTemplateSecurityAnnotationScanner', 'org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner'], 'org.springframework.security.core.annotation.AbstractSecurityAnnotationScanner': ['org.springframework.security.core.annotation.ExpressionTemplateSecurityAnnotationScanner', 'org.springframework.security.core.annotation.UniqueSecurityAnnotationScanner'], 'org.springframework.security.core.annotation.GenericConverter': ['org.springframework.security.core.annotation.ClassToStringConverter'], 'org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,MappableAttributesRetriever,InitializingBean': ['org.springframework.security.core.authority.mapping.MapBasedAttributes2GrantedAuthoritiesMapper'], 'org.springframework.security.core.authority.mapping.Attributes2GrantedAuthoritiesMapper,InitializingBean': ['org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'], 'org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper,InitializingBean': ['org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'], 'org.springframework.security.core.authority.mapping.MappableAttributesRetriever': ['org.springframework.security.core.authority.mapping.SimpleMappableAttributesRetriever'], 'org.springframework.security.core.context.SecurityContextHolderStrategy': ['org.springframework.security.core.context.GlobalSecurityContextHolderStrategy', 'org.springframework.security.core.context.InheritableThreadLocalSecurityContextHolderStrategy', 'org.springframework.security.core.context.ListeningSecurityContextHolderStrategy', 'org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'], 'org.springframework.security.core.context.Supplier': ['org.springframework.security.core.context.PublishOnceSupplier'], 'org.springframework.security.core.context.SecurityContextChangedListener': ['org.springframework.security.core.context.ObservationSecurityContextChangedListener'], 'io.micrometer.context.ThreadLocalAccessor': ['org.springframework.security.core.context.ReactiveSecurityContextHolderThreadLocalAccessor', 'org.springframework.security.core.context.SecurityContextHolderThreadLocalAccessor'], 'org.springframework.security.core.context.SecurityContext': ['org.springframework.security.core.context.SecurityContextImpl', 'org.springframework.security.core.context.TransientSecurityContext'], 'org.springframework.security.core.context.SecurityContextImpl': ['org.springframework.security.core.context.TransientSecurityContext'], 'org.springframework.core.ParameterNameDiscoverer': ['org.springframework.security.core.parameters.AnnotationParameterNameDiscoverer'], 'org.springframework.core.PrioritizedParameterNameDiscoverer': ['org.springframework.security.core.parameters.DefaultSecurityParameterNameDiscoverer'], 'org.springframework.security.core.session.ReactiveSessionRegistry': ['org.springframework.security.core.session.InMemoryReactiveSessionRegistry'], 'org.springframework.security.core.session.AbstractSessionEvent': ['org.springframework.security.core.session.SessionCreationEvent', 'org.springframework.security.core.session.SessionDestroyedEvent', 'org.springframework.security.core.session.SessionIdChangedEvent'], 'org.springframework.security.core.session.SessionRegistry,ApplicationListener': ['org.springframework.security.core.session.SessionRegistryImpl'], 'org.springframework.security.core.token.Token': ['org.springframework.security.core.token.DefaultToken'], 'org.springframework.security.core.token.TokenService,InitializingBean': ['org.springframework.security.core.token.KeyBasedPersistenceTokenService'], 'org.springframework.beans.factory.FactoryBean': ['org.springframework.security.core.token.SecureRandomFactoryBean'], 'org.springframework.security.core.userdetails.ReactiveUserDetailsService,ReactiveUserDetailsPasswordService': ['org.springframework.security.core.userdetails.MapReactiveUserDetailsService'], 'org.springframework.security.core.userdetails.UserDetails,CredentialsContainer': ['org.springframework.security.core.userdetails.User'], 'org.springframework.security.core.userdetails.Comparator': ['org.springframework.security.core.userdetails.AuthorityComparator'], 'org.springframework.security.core.userdetails.AuthenticationUserDetailsService': ['org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper'], 'org.springframework.security.core.userdetails.UserCache': ['org.springframework.security.core.userdetails.cache.NullUserCache', 'org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache'], 'org.springframework.jdbc.core.support.JdbcDaoSupport': ['org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl', 'org.springframework.security.provisioning.JdbcUserDetailsManager'], 'org.springframework.security.core.userdetails.jdbc.UserDetailsService,MessageSourceAware': ['org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl', 'org.springframework.security.provisioning.JdbcUserDetailsManager'], 'java.beans.PropertyEditorSupport': ['org.springframework.security.core.userdetails.memory.UserAttributeEditor'], 'com.fasterxml.jackson.databind.JsonDeserializer': ['org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer', 'org.springframework.security.jackson2.UnmodifiableListDeserializer', 'org.springframework.security.jackson2.UnmodifiableSetDeserializer', 'org.springframework.security.jackson2.UnmodifiableMapDeserializer', 'org.springframework.security.jackson2.UserDeserializer', 'org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer'], 'com.fasterxml.jackson.databind.module.SimpleModule': ['org.springframework.security.jackson2.CoreJackson2Module'], 'org.springframework.security.jackson2.ObjectMapper.DefaultTypeResolverBuilder': ['org.springframework.security.jackson2.AllowlistTypeResolverBuilder'], 'org.springframework.security.jackson2.TypeIdResolver': ['org.springframework.security.jackson2.AllowlistTypeIdResolver'], 'org.springframework.security.jackson2.AbstractUnmodifiableCollectionDeserializer': ['org.springframework.security.jackson2.UnmodifiableListDeserializer', 'org.springframework.security.jackson2.UnmodifiableSetDeserializer'], 'org.springframework.security.provisioning.UserDetailsManager,UserDetailsPasswordService': ['org.springframework.security.provisioning.InMemoryUserDetailsManager'], 'org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl': ['org.springframework.security.provisioning.JdbcUserDetailsManager'], 'org.springframework.security.provisioning.UserDetailsManager,GroupManager': ['org.springframework.security.provisioning.JdbcUserDetailsManager'], 'org.springframework.security.provisioning.MutableUserDetails': ['org.springframework.security.provisioning.MutableUser'], 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor': ['org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.scheduling.SchedulingTaskExecutor': ['org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.scheduling.TaskScheduler': ['org.springframework.security.scheduling.DelegatingSecurityContextTaskScheduler'], 'org.springframework.security.task.DelegatingSecurityContextTaskExecutor': ['org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.core.task.AsyncTaskExecutor': ['org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.core.task.TaskExecutor': ['org.springframework.security.task.DelegatingSecurityContextTaskExecutor', 'org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor', 'org.springframework.security.scheduling.DelegatingSecurityContextSchedulingTaskExecutor'], 'org.springframework.core.io.AbstractResource': ['org.springframework.security.util.InMemoryResource']}
call : org.springframework.security.access.intercept.RunAsManagerImpl::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.intercept.RunAsManagerImpl::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.intercept.RunAsManagerImpl::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1 
call : org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1 
call : org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1 
call : org.springframework.security.access.vote.RoleVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.vote.RoleVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call : org.springframework.security.access.vote.RoleVoter::supports_1_1 method_call org.springframework.security.access.SecurityConfig::getAttribute_0_1
call_chain : {'result': [{'id': 'org.springframework.security.access.vote.RoleVoter::supports_1_1'}, {'id': 'org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1'}, {'id': 'org.springframework.security.access.intercept.RunAsManagerImpl::supports_1_1'}, {'id': 'org.springframework.security.access.vote.RoleVoter::supports_1_1'}, {'id': 'org.springframework.security.access.vote.AuthenticatedVoter::supports_1_1'}, {'id': 'org.springframework.security.access.intercept.RunAsManagerImpl::supports_1_1'}]}
files_list from graphdb : ['org.springframework.security.access.vote.RoleVoter', 'org.springframework.security.access.vote.AuthenticatedVoter', 'org.springframework.security.access.intercept.RunAsManagerImpl', 'org.springframework.security.access.vote.RoleVoter', 'org.springframework.security.access.vote.AuthenticatedVoter', 'org.springframework.security.access.intercept.RunAsManagerImpl']

running retrieve_from_vectordb ...
retrieved_docs :
 [Document(id='89aaf4b0-c082-4421-bba5-d7f87d2008f9', metadata={'source': 'E:\\code\\spring-security-main\\spring-security-main\\core\\src\\main\\java\\org\\springframework\\security\\authorization\\method\\AuthorizationAdvisorProxyFactory.java'}, page_content='/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.authorization.method;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Queue;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.function.Supplier;\nimport java.util.stream.Stream;\n\nimport org.aopalliance.aop.Advice;\nimport org.aopalliance.intercept.MethodInvocation;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.Pointcut;\nimport org.springframework.aop.framework.AopInfrastructureBean;\nimport org.springframework.aop.framework.ProxyFactory;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\nimport org.springframework.lang.NonNull;\nimport org.springframework.security.authorization.AuthorizationProxyFactory;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\n/**\n * A proxy factory for applying authorization advice to an arbitrary object.\n *\n * <p>\n * For example, consider a non-Spring-managed object {@code Foo}: <pre>\n *     class Foo {\n *         &#064;PreAuthorize("hasAuthority(\'bar:read\')")\n *         String bar() { ... }\n *     }\n * </pre>\n *\n * Use {@link AuthorizationAdvisorProxyFactory} to wrap the instance in Spring Security\'s\n * {@link org.springframework.security.access.prepost.PreAuthorize} method interceptor\n * like so:\n *\n * <pre>\n *     AuthorizationProxyFactory proxyFactory = AuthorizationAdvisorProxyFactory.withDefaults();\n *     Foo foo = new Foo();\n *     foo.bar(); // passes\n *     Foo securedFoo = proxyFactory.proxy(foo);\n *     securedFoo.bar(); // access denied!\n * </pre>\n *\n * @author Josh Cummings\n * @since 6.3\n */\npublic final class AuthorizationAdvisorProxyFactory\n\t\timplements AuthorizationProxyFactory, Iterable<AuthorizationAdvisor>, AopInfrastructureBean {\n\n\tprivate static final boolean isReactivePresent = ClassUtils.isPresent("reactor.core.publisher.Mono", null);\n\n\tprivate static final TargetVisitor DEFAULT_VISITOR = isReactivePresent\n\t\t\t? TargetVisitor.of(new ClassVisitor(), new ReactiveTypeVisitor(), new ContainerTypeVisitor())\n\t\t\t: TargetVisitor.of(new ClassVisitor(), new ContainerTypeVisitor());\n\n\tprivate static final TargetVisitor DEFAULT_VISITOR_SKIP_VALUE_TYPES = TargetVisitor.of(new ClassVisitor(),\n\t\t\tnew IgnoreValueTypeVisitor(), DEFAULT_VISITOR);\n\n\tprivate final AuthorizationProxyMethodInterceptor authorizationProxy = new AuthorizationProxyMethodInterceptor();\n\n\tprivate List<AuthorizationAdvisor> advisors;\n\n\tprivate TargetVisitor visitor = DEFAULT_VISITOR;\n\n\t/**\n\t * Construct an {@link AuthorizationAdvisorProxyFactory} with the provided advisors.\n\t *\n\t * <p>\n\t * The list may be empty, in the case where advisors are added later using\n\t * {@link #addAdvisor}.\n\t * @param advisors the advisors to use\n\t * @since 6.4\n\t */\n\tpublic AuthorizationAdvisorProxyFactory(List<AuthorizationAdvisor> advisors) {\n\t\tthis.advisors = new ArrayList<>(advisors);\n\t\tAnnotationAwareOrderComparator.sort(this.advisors);\n\t}\n\n\t/**\n\t * Construct an {@link AuthorizationAdvisorProxyFactory} with the defaults needed for\n\t * wrapping objects in Spring Security\'s pre-post method security support.\n\t * @return an {@link AuthorizationAdvisorProxyFactory} for adding pre-post method\n\t * security support\n\t */\n\tpublic static AuthorizationAdvisorProxyFactory withDefaults() {\n\t\tList<AuthorizationAdvisor> advisors = new ArrayList<>();\n\t\tadvisors.add(AuthorizationManagerBeforeMethodInterceptor.preAuthorize());\n\t\tadvisors.add(AuthorizationManagerAfterMethodInterceptor.postAuthorize());\n\t\tadvisors.add(new PreFilterAuthorizationMethodInterceptor());\n\t\tadvisors.add(new PostFilterAuthorizationMethodInterceptor());\n\t\tAuthorizationAdvisorProxyFactory proxyFactory = new AuthorizationAdvisorProxyFactory(advisors);\n\t\tproxyFactory.addAdvisor(new AuthorizeReturnObjectMethodInterceptor(proxyFactory));\n\t\treturn proxyFactory;\n\t}\n\n\t/**\n\t * Construct an {@link AuthorizationAdvisorProxyFactory} with the defaults needed for\n\t * wrapping objects in Spring Security\'s pre-post reactive method security support.\n\t * @return an {@link AuthorizationAdvisorProxyFactory} for adding pre-post reactive\n\t * method security support\n\t */\n\tpublic static AuthorizationAdvisorProxyFactory withReactiveDefaults() {\n\t\tList<AuthorizationAdvisor> advisors = new ArrayList<>();\n\t\tadvisors.add(AuthorizationManagerBeforeReactiveMethodInterceptor.preAuthorize());\n\t\tadvisors.add(AuthorizationManagerAfterReactiveMethodInterceptor.postAuthorize());\n\t\tadvisors.add(new PreFilterAuthorizationReactiveMethodInterceptor());\n\t\tadvisors.add(new PostFilterAuthorizationReactiveMethodInterceptor());\n\t\tAuthorizationAdvisorProxyFactory proxyFactory = new AuthorizationAdvisorProxyFactory(advisors);\n\t\tproxyFactory.addAdvisor(new AuthorizeReturnObjectMethodInterceptor(proxyFactory));\n\t\treturn proxyFactory;\n\t}\n\n\t/**\n\t * Proxy an object to enforce authorization advice.\n\t *\n\t * <p>\n\t * Proxies any instance of a non-final class or a'), Document(id='0827b297-47b6-4a50-bdde-df690845fea2', metadata={'source': 'E:\\code\\spring-security-main\\spring-security-main\\core\\src\\main\\java\\org\\springframework\\security\\authentication\\dao\\AbstractUserDetailsAuthenticationProvider.java'}, page_content='public void setPreAuthenticationChecks(UserDetailsChecker preAuthenticationChecks) {\n\t\tthis.preAuthenticationChecks = preAuthenticationChecks;\n\t}\n\n\tprotected UserDetailsChecker getPostAuthenticationChecks() {\n\t\treturn this.postAuthenticationChecks;\n\t}\n\n\tpublic void setPostAuthenticationChecks(UserDetailsChecker postAuthenticationChecks) {\n\t\tthis.postAuthenticationChecks = postAuthenticationChecks;\n\t}\n\n\tpublic void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n\t\tthis.authoritiesMapper = authoritiesMapper;\n\t}\n\n\tprivate'), Document(id='e7a54b84-85ca-4b10-9107-701d461c783e', metadata={'source': 'E:\\code\\spring-security-main\\spring-security-main\\core\\src\\main\\java\\org\\springframework\\security\\authorization\\method\\AuthorizationAdvisorProxyFactory.java'}, page_content='class that implements more than one\n\t * interface.\n\t *\n\t * <p>\n\t * If {@code target} is an {@link Iterator}, {@link Collection}, {@link Array},\n\t * {@link Map}, {@link Stream}, or {@link Optional}, then the element or value type is\n\t * proxied.\n\t *\n\t * <p>\n\t * If {@code target} is a {@link Class}, then {@link ProxyFactory#getProxyClass} is\n\t * invoked instead.\n\t * @param target the instance to proxy\n\t * @return the proxied instance\n\t */\n\t@Override\n\tpublic Object proxy(Object target) {\n\t\tAnnotationAwareOrderComparator.sort(this.advisors);\n\t\tif (target == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (target instanceof AuthorizationProxy proxied) {\n\t\t\treturn proxied;\n\t\t}\n\t\tObject proxied = this.visitor.visit(this, target);\n\t\tif (proxied != null) {\n\t\t\treturn proxied;\n\t\t}\n\t\tProxyFactory factory = new ProxyFactory(target);\n\t\tfactory.addAdvisors(this.authorizationProxy);\n\t\tfor (Advisor advisor : this.advisors) {\n\t\t\tfactory.addAdvisors(advisor);\n\t\t}\n\t\tfactory.addInterface(AuthorizationProxy.class);\n\t\tfactory.setOpaque(true);\n\t\tfactory.setProxyTargetClass(!Modifier.isFinal(target.getClass().getModifiers()));\n\t\treturn factory.getProxy();\n\t}\n\n\t/**\n\t * Add advisors that should be included to each proxy created.\n\t *\n\t * <p>\n\t * All advisors are re-sorted by their advisor order.\n\t * @param advisors the advisors to add\n\t * @deprecated Please use {@link #addAdvisor} instead\n\t */\n\t@Deprecated\n\tpublic void setAdvisors(AuthorizationAdvisor... advisors) {\n\t\tthis.advisors = new ArrayList<>(List.of(advisors));\n\t}\n\n\t/**\n\t * Add advisors that should be included to each proxy created.\n\t *\n\t * <p>\n\t * All advisors are re-sorted by their advisor order.\n\t * @param advisors the advisors to add\n\t * @deprecated Please use {@link #addAdvisor} instead\n\t */\n\t@Deprecated\n\tpublic void setAdvisors(Collection<AuthorizationAdvisor> advisors) {\n\t\tthis.advisors = new ArrayList<>(advisors);\n\t}\n\n\t/**\n\t * Add an advisor that should be included to each proxy created.\n\t *\n\t * <p>\n\t * This method sorts the advisors based on the order in\n\t * {@link AuthorizationAdvisor#getOrder}. You can use the values in\n\t * {@link AuthorizationInterceptorsOrder}to ensure advisors are located where you need\n\t * them.\n\t * @param advisor\n\t * @since 6.4\n\t */\n\tpublic void addAdvisor(AuthorizationAdvisor advisor) {\n\t\tthis.advisors.add(advisor);\n\t}\n\n\t/**\n\t * Use this visitor to navigate the proxy target\'s hierarchy.\n\t *\n\t * <p>\n\t * This can be helpful when you want a specialized behavior for a type or set of\n\t * types. For example, if you want to have this factory skip primitives and wrappers,\n\t * then you can do:\n\t *\n\t * <pre>\n\t * \tAuthorizationAdvisorProxyFactory proxyFactory = new AuthorizationAdvisorProxyFactory();\n\t * \tproxyFactory.setTargetVisitor(TargetVisitor.defaultsSkipValueTypes());\n\t * </pre>\n\t *\n\t * <p>\n\t * The default {@link TargetVisitor} proxies {@link Class} instances as well as\n\t * instances contained in reactive types (if reactor is present), collection types,\n\t * and other container types like {@link Optional} and {@link Supplier}.\n\t *\n\t * <p>\n\t * If you want to add support for another container type, you can do so in the\n\t * following way:\n\t *\n\t * <pre>\n\t * \tTargetVisitor functions = (factory, target) -> {\n\t *\t\tif (target instanceof Function function) {\n\t *\t\t\treturn (input) -> factory.proxy(function.apply(input));\n\t *\t\t}\n\t *\t\treturn null;\n\t * \t};\n\t * \tAuthorizationAdvisorProxyFactory proxyFactory = new AuthorizationAdvisorProxyFactory();\n\t * \tproxyFactory.setTargetVisitor(TargetVisitor.of(functions, TargetVisitor.defaultsSkipValueTypes()));\n\t * </pre>\n\t * @param visitor the visitor to use to introduce specialized behavior for a type\n\t * @see TargetVisitor#defaults\n\t */\n\tpublic void setTargetVisitor(TargetVisitor visitor) {\n\t\tAssert.notNull(visitor, "delegate cannot be null");\n\t\tthis.visitor = visitor;\n\t}\n\n\t@Override\n\t@NonNull\n\tpublic Iterator<AuthorizationAdvisor> iterator() {\n\t\treturn this.advisors.iterator();\n\t}\n\n\t/**\n\t * An interface to handle how the {@link AuthorizationAdvisorProxyFactory} should step\n\t * through the target\'s object hierarchy.\n\t *\n\t * @author Josh Cummings\n\t * @since 6.3\n\t * @see AuthorizationAdvisorProxyFactory#setTargetVisitor\n\t */\n\tpublic interface TargetVisitor {\n\n\t\t/**\n\t\t * Visit and possibly proxy this object.\n\t\t *\n\t\t * <p>\n\t\t * Visiting may take the form of walking down this object\'s hierarchy and proxying\n\t\t * sub-objects.\n\t\t *\n\t\t * <p>\n\t\t * An example is a visitor that proxies the elements of a {@link List} instead of\n\t\t * the list itself\n\t\t *\n\t\t * <p>\n\t\t * Returning {@code null} implies that this visitor does not want to proxy this\n\t\t * object\n\t\t * @param proxyFactory the proxy factory to delegate proxying to for any\n\t\t * sub-objects\n\t\t * @param target the object to proxy\n\t\t * @return the visited (and possibly proxied) object\n\t\t */\n\t\tObject visit(AuthorizationAdvisorProxyFactory proxyFactory, Object target);\n\n\t\t/**\n\t\t * The default {@link TargetVisitor}, which will proxy {@link Class} instances as\n\t\t * well as instances contained in reactive types (if reactor is present),\n\t\t * collection types, and other container types like {@link Optional} and\n\t\t * {@link Supplier}\n\t\t */\n\t\tstatic TargetVisitor defaults() {\n\t\t\treturn AuthorizationAdvisorProxyFactory.DEFAULT_VISITOR;\n\t\t}\n\n\t\t/**\n\t\t * The default {@link TargetVisitor} that also skips any value types (for example,\n\t\t * {@link String}, {@link Integer}). This is handy for annotations like\n\t\t * {@link AuthorizeReturnObject} when used at the class level\n\t\t */\n\t\tstatic TargetVisitor defaultsSkipValueTypes() {\n\t\t\treturn AuthorizationAdvisorProxyFactory.DEFAULT_VISITOR_SKIP_VALUE_TYPES;\n\t\t}\n\n\t\t/**\n\t\t * Compose a set of visitors. This is helpful when you are customizing for a given\n\t\t * type and still want the defaults applied for the remaining types.\n\t\t *\n\t\t * <p>\n\t\t * The resulting visitor will execute the first visitor that returns a non-null\n\t\t * value.\n\t\t * @param visitors the set of visitors\n\t\t * @return a composite that executes the first visitor that returns a non-null\n\t\t * value\n\t\t */\n\t\tstatic TargetVisitor of(TargetVisitor... visitors) {\n\t\t\treturn (proxyFactory, target) -> {\n\t\t\t\tfor (TargetVisitor visitor : visitors) {\n\t\t\t\t\tObject result = visitor.visit(proxyFactory, target);\n\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tprivate static final class IgnoreValueTypeVisitor implements TargetVisitor {\n\n\t\t@Override\n\t\tpublic Object visit(AuthorizationAdvisorProxyFactory proxyFactory, Object object) {\n\t\t\tif (ClassUtils.isSimpleValueType(object.getClass())) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tprivate static final class ClassVisitor implements TargetVisitor {\n\n\t\tprivate final AuthorizationProxyMethodInterceptor authorizationProxy = new AuthorizationProxyMethodInterceptor();\n\n\t\t@Override\n\t\tpublic Object visit(AuthorizationAdvisorProxyFactory proxyFactory, Object object) {\n\t\t\tif (object instanceof Class<?> targetClass) {\n\t\t\t\tif (AuthorizationProxy.class.isAssignableFrom(targetClass)) {\n\t\t\t\t\treturn targetClass;\n\t\t\t\t}\n\t\t\t\tProxyFactory factory = new ProxyFactory();\n\t\t\t\tfactory.setTargetClass(targetClass);\n\t\t\t\tfactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass));\n\t\t\t\tfactory.setOpaque(true);\n\t\t\t\tfactory.setProxyTargetClass(!Modifier.isFinal(targetClass.getModifiers()));\n\t\t\t\tfactory.addAdvisor(this.authorizationProxy);\n\t\t\t\tfor (Advisor advisor : proxyFactory) {\n\t\t\t\t\tfactory.addAdvisors(advisor);\n\t\t\t\t}\n\t\t\t\tfactory.addInterface(AuthorizationProxy.class);\n\t\t\t\treturn factory.getProxyClass(getClass().getClassLoader());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tprivate static final'), Document(id='92587e3d-50d9-4372-bc06-424ad30241bc', metadata={'source': 'E:\\code\\spring-security-main\\spring-security-main\\core\\src\\main\\java\\org\\springframework\\security\\core\\userdetails\\jdbc\\JdbcDaoImpl.java'}, page_content='class will use the\n\t * {@link #loadUserByUsername(String)} derived username in the returned\n\t * <code>UserDetails</code>.\n\t * @param usernameBasedPrimaryKey <code>true</code> if the mapping queries return the\n\t * username <code>String</code>, or <code>false</code> if the mapping returns a\n\t * database primary key.\n\t */\n\tpublic void setUsernameBasedPrimaryKey(boolean usernameBasedPrimaryKey) {\n\t\tthis.usernameBasedPrimaryKey = usernameBasedPrimaryKey;\n\t}\n\n\tprotected boolean isUsernameBasedPrimaryKey() {\n\t\treturn this.usernameBasedPrimaryKey;\n\t}\n\n\t/**\n\t * Allows the default query string used to retrieve users based on username to be\n\t * overridden, if default table or column names need to be changed. The default query\n\t * is {@link #DEF_USERS_BY_USERNAME_QUERY}; when modifying this query, ensure that all\n\t * returned columns are mapped back to the same column positions as in the default\n\t * query. If the \'enabled\' column does not exist in the source database, a permanent\n\t * true value for this column may be returned by using a query similar to\n\t *\n\t * <pre>\n\t * &quot;select username,password,\'true\' as enabled from users where username = ?&quot;\n\t * </pre>\n\t * @param usersByUsernameQueryString The query string to set\n\t */\n\tpublic void setUsersByUsernameQuery(String usersByUsernameQueryString) {\n\t\tthis.usersByUsernameQuery = usersByUsernameQueryString;\n\t}\n\n\tprotected boolean getEnableAuthorities() {\n\t\treturn this.enableAuthorities;\n\t}\n\n\t/**\n\t * Enables loading of authorities (roles) from the authorities table. Defaults to true\n\t */\n\tpublic void setEnableAuthorities(boolean enableAuthorities) {\n\t\tthis.enableAuthorities = enableAuthorities;\n\t}\n\n\tprotected boolean getEnableGroups() {\n\t\treturn this.enableGroups;\n\t}\n\n\t/**\n\t * Enables support for group authorities. Defaults to false\n\t * @param enableGroups\n\t */\n\tpublic void setEnableGroups(boolean enableGroups) {\n\t\tthis.enableGroups = enableGroups;\n\t}\n\n\t@Override\n\tpublic void setMessageSource(MessageSource messageSource) {\n\t\tAssert.notNull(messageSource, "messageSource cannot be null");\n\t\tthis.messages = new MessageSourceAccessor(messageSource);\n\t}\n\n}')]
